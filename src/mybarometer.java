
import javax.swing.JOptionPane;

/*
 * mybarometer.java
 *
 * Created on 27 augustus 2008, 7:55
 */

/**
 *
 * @author  Martin
 */
public class mybarometer extends javax.swing.JFrame {

    /** Creates new form mybarometer */
    public mybarometer() {
        initComponents();
        initComponents2();
        initSynopparameters();
        setLocation(main.x_pos_frame, main.y_pos_frame);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jSeparator1 = new javax.swing.JSeparator();
      jLabel6 = new javax.swing.JLabel();
      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jLabel7 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jTextField2 = new javax.swing.JTextField();
      jTextField1 = new javax.swing.JTextField();
      jLabel5 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jTextField3 = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jButton3 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("barometer reading");
      setResizable(false);

      jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel6.setText("** e.g. from the instrument calibration correction card, this is NOT the height correction. you can always overwrite this value");

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel1.setText("does the reading indicate Mean Sea Level pressure ");
      jLabel1.setEnabled(false);

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("yes");
      jRadioButton1.setEnabled(false);

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("no");
      jRadioButton2.setEnabled(false);

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(41, 41, 41)
            .addComponent(jLabel1)
            .addGap(73, 73, 73)
            .addComponent(jRadioButton1)
            .addGap(18, 18, 18)
            .addComponent(jRadioButton2)
            .addContainerGap(117, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton2)
               .addComponent(jRadioButton1)
               .addComponent(jLabel1))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel7.setText("meta data (Maintenance --> Station data)");
      jLabel7.setEnabled(false);

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel2.setText("barometer reading (hPa)");

      jLabel4.setText("current deepest draft (metres)");

      jLabel5.setText("[0.0 - 50.0]");

      jLabel3.setText("[860.0 - 1070.0]");

      jLabel8.setText("[-4.0 - 4.0]");

      jLabel9.setText("instrument correction (ic)** (hPa)");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(165, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                  .addGroup(jPanel2Layout.createSequentialGroup()
                     .addGap(37, 37, 37)
                     .addComponent(jLabel2)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                     .addGap(30, 30, 30)
                     .addComponent(jLabel4)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jLabel9)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel3)
               .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(92, 92, 92))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(jLabel3)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel9)
               .addComponent(jLabel8))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel4)
               .addComponent(jLabel5))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jButton3.setText("Back");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton5.setText("OK");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton1.setText("Cancel");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Internet");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_mouseClicked(evt);
         }
      });

      jButton4.setText("Stop");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(117, 117, 117)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap())
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(117, 117, 117))))
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(160, 160, 160)
                  .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(119, 119, 119)
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(50, 50, 50)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {
      // hide Back/Stop buttons if not in next_screen_mode
      if (main.in_next_sequence == false)
      {
         jButton3.setEnabled(false);                         // back button
         jButton4.setEnabled(false);                         // stop button
      }

      // in offline mode change text on button from "Internet" to "Help"
      if (main.offline_mode == true)
      {
         jButton2.setText("Help");
      }

      // if pressure reading set to MSL -> disable current deepest draft
      if (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES))
      {
         jLabel4.setEnabled(false);
         jLabel5.setEnabled(false);
         jTextField2.setEnabled(false);
      }
      
      if (main.RS232_connection_mode == 3)                        // AWS connected mode
      {
         jTextField1.setForeground(main.input_color_from_aws);    // pressure reading field 
         jTextField1.setEditable(false);
         
         jTextField2.setForeground(main.input_color_from_aws);    // deepest draft field
         jTextField2.setEditable(false);
          
         jTextField3.setForeground(main.input_color_from_aws);    // instrument correction field
         jTextField3.setEditable(false);
      }
      else
      {
         jTextField1.setForeground(main.input_color_from_observer);
         jTextField1.setEditable(true);
         
         jTextField2.setForeground(main.input_color_from_observer);
         jTextField2.setEditable(true);
          
         jTextField3.setForeground(main.input_color_from_observer);
         jTextField3.setEditable(true);
      }
   }



    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void MSL_Herleiding_Luchtdruk() 
    {
       double hoogte_corr;
       double temp;
       double term_1;
       double term_2;
       double double_hoogte_barometer;
       double double_barometer_above_sll  = 0.0;
       double double_keel_sll             = 0.0;
       //double double_pressure_msl;

   
       // NB double_hoogte_barometer in meters

       if (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES) == true) 
       {
          // NB dat "main.pressure_reading_msl_yes_no" een "yes" of "no" waarde heeft was al op gechecked 
           
          // barometer reading indicate MSL pressure 
          pressure_msl_corrected        = pressure_reading_corrected;
          double_pressure_msl_corrected = double_pressure_reading_corrected;
       } 
       else // barometer reading doesn't indicate MSL pressure
       {
          /*
          /////////// checks 
          */
          if ( (main.barometer_above_sll.equals("")) || (main.barometer_above_sll.trim().length() == 0) )
          {
             JOptionPane.showMessageDialog(null, "barometer height above MSL not available (Maintenance -> Station data)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // hier wordt ook "checks_ok" op false gezet
          }
          else if ( (main.keel_sll.equals("")) || (main.keel_sll.trim().length() == 0) )
          {
             JOptionPane.showMessageDialog(null, "distance keel - MSL not available (Maintenance -> Station data)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // hier wordt ook "checks_ok" op false gezet
          }
           
           
          if (checks_ok == true)  
          { 
              
             // convert to double: distance barometer - keel
             try 
             {
                double_barometer_above_sll = Double.parseDouble(main.barometer_above_sll.trim());
             } 
             catch (NumberFormatException e) 
             {  
                /* ... */
                JOptionPane.showMessageDialog(null, "Internal error (converting distance barometer - SLL to double)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                Reset_All_Barometer_Vars();                   // hier wordt ook "checks_ok" op false gezet
             }

             // convert to double: distance keel - sll
             try 
             {
                double_keel_sll = Double.parseDouble(main.keel_sll.trim());
             } 
             catch (NumberFormatException e) 
             {
                /* ... */ 
                JOptionPane.showMessageDialog(null, "Internal error (converting distance keel - SLL to double)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                Reset_All_Barometer_Vars();                              // in this function "checks_ok" set false
             }
          } // if (checks_ok == true)
          
          if (checks_ok == true)
          {    
             double_hoogte_barometer = double_keel_sll + double_barometer_above_sll - double_deepest_draft;

             temp = 15.0 + CELCIUS_TO_KELVIN_FACTOR;                  // hier wordt dus van standaard temp (15.0 C) uitgegaan !!!!
             term_1 = double_pressure_reading_corrected * double_hoogte_barometer;
             term_2 = 29.27 * temp;

             if (term_2 != 0.0) // exception voorkomen (hier zal hij in principe nooit inkomen)
             {
                hoogte_corr = term_1 / term_2;
             } 
             else 
             {
                hoogte_corr = 0.0;
                Reset_All_Barometer_Vars();                             // in this function "checks_ok" set false
             }
             
             // at Great lakes? (for extra height correction value)
             double great_lakes_corr = main_RS232_RS422.check_at_Great_Lakes();
             if (great_lakes_corr < 50.0)                               // so at Great Lakes
             {
                hoogte_corr += great_lakes_corr;
                String info = "at Great Lakes; extra air pressure height correction was applied (" + great_lakes_corr + " hPa)";
                JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
             }
             else if ((great_lakes_corr > main_RS232_RS422.AT_GREAT_LAKES_OUTSIDE_MAIN_AREAS - 1) && (great_lakes_corr < main_RS232_RS422.AT_GREAT_LAKES_OUTSIDE_MAIN_AREAS + 1))     // so at Great Lakes but in transition between two lakes (locks)
             {
                Reset_All_Barometer_Vars();                             // in this function "checks_ok" set false
                String info = "at Great Lakes but outside main areas (locks); click Cancel on input screen to continue";
                JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
             }
             

             if (checks_ok == true)
             {    
                double_pressure_msl_corrected = double_pressure_reading_corrected + hoogte_corr;

                // convert to string
                //pressure_msl = Double.toString(double_pressure_msl);

                // NB onderstaande werkt wel echter door nederlands windows systeem wordt het bv 1002,3 i.p.v. 1002.3
                //java.text.DecimalFormat df1 = new java.text.DecimalFormat("#####0.0");
                //pressure_msl = df1.format(double_pressure_msl);
                
                
                int hulp_int_pressure_msl = (int)Math.floor(double_pressure_msl_corrected * 10 + 0.5);
                double hulp_double_pressure_msl = (double)hulp_int_pressure_msl / 10; 
             
                pressure_msl_corrected = Double.toString(hulp_double_pressure_msl);     // convert to string
             } // if (checks_ok == true)   
          } // if (checks_ok == true)
       } // reading doesn't indicate MSL pressure
    }


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void initSynopparameters() 
    {
       // AWS
       //
       if ( (main.RS232_connection_mode == 3) && (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES))) 
       {
          // EUCAWS AWS connected
          String info = "air pressure meta data setting 'does the reading indicate MSL pressure' not correct\n";
          info += "Please change the appropriate settings\n";
          info += "(see: Maintenance -> Station data -> air pressure meta data -> does the reading indicate MSL pressure: no)";
       
          JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " warning", JOptionPane.WARNING_MESSAGE);
       }
       
       
       // RS232/WiFi barometer connected
       //
       if ( (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2 || main.RS232_connection_mode == 4 || main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6) && 
            (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES))) 
       {
          // PTB220, PTB330, MintakaDuo, Mintaka Star USB or Mintaka Star WiFi connected
          String info = "TurboWin+ will always retrieve the pressure at instrument level (never at MSL) of the connected barometer\n";
          info += "Please change the appropriate settings\n";
          info += "(see: Maintenance -> Station data -> air pressure meta data -> does the reading indicate MSL pressure: no)";
       
          JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " warning", JOptionPane.WARNING_MESSAGE);
       }
       else if ( (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2) && (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_NO)) )
       {
          // PTB220 or PTB330 connected
          boolean local_tray_icon_clicked = false;
          main_RS232_RS422.RS232_Read_Sensor_Data_PPPP_For_Obs(local_tray_icon_clicked);                // this function will set 'pressure_reading' in jTextfield1

       } 
       else if ( (main.RS232_connection_mode == 4) && (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_NO)) )                                                       
       {
          // Mintaka Duo connected
          boolean local_tray_icon_clicked = false;
          main_RS232_RS422.RS232_Mintaka_Duo_Read_Sensor_Data_PPPP_For_Obs(local_tray_icon_clicked);    // this function will set 'pressure_reading'
       } 
       else if ( (main.RS232_connection_mode == 5) && (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_NO)) )                                                       
       {
          // Mintaka Star (USB) connected
          boolean local_tray_icon_clicked = false;
          main_RS232_RS422.RS232_Mintaka_Star_Read_Sensor_Data_PPPP_For_Obs(local_tray_icon_clicked);    // this function will set 'pressure_reading'
       }       
       else if ( (main.RS232_connection_mode == 6) && (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_NO)) )                                                       
       {
          // Mintaka Star (WiFi) connected
          boolean local_tray_icon_clicked = false;
          main_RS232_RS422.RS232_Mintaka_Star_Read_Sensor_Data_PPPP_For_Obs(local_tray_icon_clicked);    // this function will set 'pressure_reading'
       }       
       
       
       
       // put back earlier inserted values (if applicable)
       //
       if (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES)) 
       {
          jRadioButton1.setSelected(true);
       } 
       else if (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_NO)) 
       {
          jRadioButton2.setSelected(true);
       }
       
       // pressure_reading, only if no barometer connected (than RS232 applicable see above eg main_RS232_RS422.RS232_Read_Sensor_Data_PPPP_For_Obs(local_tray_icon_clicked))
       if ( (pressure_reading.compareTo("") != 0) && (main.RS232_connection_mode != 1 && main.RS232_connection_mode != 2 && main.RS232_connection_mode != 4) )
       {
          jTextField1.setText(pressure_reading); 
       }
       
       if (main.barometer_instrument_correction.compareTo("") != 0)
       {
          jTextField3.setText(main.barometer_instrument_correction); 
       }

       if (deepest_draft.compareTo("") != 0)
       {
          jTextField2.setText(deepest_draft); 
       }
    }

    

    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Reset_All_Barometer_Vars()
    {
       // scope this module + myturbowin.java main module (all of type: static)
       PPPP_code                                    = "";
       pressure_reading_corrected                   = "";
       pressure_msl_corrected                       = "";
       pressure_reading                             = "";
       pressure_msl                                 = ""; 
       deepest_draft                                = ""; 
       //barometer_instrument_correction_new          = "";          // NB there is also: main.barometer_instrument_correction
   
       // scope only this module (no static) 
       double_pressure_reading                      = main.INVALID;
       //double_pressure_msl                          = main.INVALID;
       double_barometer_instrument_correction       = main.INVALID; 
       double_pressure_reading_corrected            = main.INVALID;
       double_pressure_msl_corrected                = main.INVALID;
       double_deepest_draft                         = main.INVALID;
       checks_ok                                    = false;
  
       /* update progress fields on main screen */
       main.barometer_fields_update();
    }



    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
       // TODO add your handling code here:

       /* close input page */
       setVisible(false);
       dispose();

       /* next screen in in next sequence mode */
       if (main.in_next_sequence == true)
       {
          next_screen();
       }
    }//GEN-LAST:event_Cancel_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Internet_button_mouseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_mouseClicked
       // TODO add your handling code here:
       main.internet_mouseClicked(BAROMETER_HELP_DIR);
    }//GEN-LAST:event_Internet_button_mouseClicked


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       previous_screen();
    }//GEN-LAST:event_Back_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Stop_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       main.in_next_sequence = false;
    }//GEN-LAST:event_Stop_button_actionPerformed


    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
       // TODO add your handling code here:
        
       
       if (main.RS232_connection_mode != 3)                        // not AWS
       {
       
       // initialisation
       Reset_All_Barometer_Vars();
       
       // initialisation (will be set to false in function Reset_All_Barometer_Vars())
       checks_ok = true;
       

       // read inserted values
       pressure_reading                     = jTextField1.getText().trim();
       main.barometer_instrument_correction = jTextField3.getText().trim();
       deepest_draft                        = jTextField2.getText().trim();

 

       /*
       /////////// checks on reading indication
       */
       if ( (main.pressure_reading_msl_yes_no.compareTo(main.PRESSURE_READING_MSL_YES) != 0) &&
            (main.pressure_reading_msl_yes_no.compareTo(main.PRESSURE_READING_MSL_NO) != 0) )
       {
          JOptionPane.showMessageDialog(null, "barometer reading (yes or no MSL) indication not available (Maintenance -> Station data)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Barometer_Vars();                   // "checks_ok" -> false
       }

       
       /*
       // if reading is present
       */
       if (pressure_reading.trim().length() == 0)
       {
          {
             JOptionPane.showMessageDialog(null, "pressure reading not inserted", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // "checks_ok" -> false
          } // if ( (main.pressure_reading_msl_yes_no.compareTo(main.PRESSURE_READING_MSL_NO) != 0) etc.
       }
       
       
       /*
       // if reading is present also barometer instrument correction must be present
       */
       if ( (pressure_reading.trim().length() > 0) && (main.barometer_instrument_correction.trim().length() == 0) )
       {
          {
             JOptionPane.showMessageDialog(null, "instrument correction not inserted", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // "checks_ok" -> false
          } // if ( (main.pressure_reading_msl_yes_no.compareTo(main.PRESSURE_READING_MSL_NO) != 0) etc.
       }

       /*
       // if reading do not indicate pressure at msl (and pressure reading is present) -> current deepest draft must be inserted!
       */
       if (checks_ok == true)
       {
          if ( (main.pressure_reading_msl_yes_no.compareTo(main.PRESSURE_READING_MSL_NO) == 0) &&
               (pressure_reading.trim().length() > 0) &&
               (deepest_draft.trim().length() == 0) )
          {
             JOptionPane.showMessageDialog(null, "current deepest draft not inserted", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // "checks_ok" -> false
          } // if ( (main.pressure_reading_msl_yes_no.compareTo(main.PRESSURE_READING_MSL_NO) != 0) etc.
       } // if (checks_ok == true)


       /*
       // convert collected (string) values to floats
       */
       if (checks_ok == true)
       {
           // convert collected (string) values to floats

          // air pressure reading
          try
          {
             double_pressure_reading = Double.parseDouble(pressure_reading.trim());
          }
          catch (NumberFormatException e) {  }

           // barometer instrument correction
          try
          {
             double_barometer_instrument_correction = Double.parseDouble(main.barometer_instrument_correction.trim());
          }
          catch (NumberFormatException e) { }
          
          // deepest draft
          try
          {
             double_deepest_draft = Double.parseDouble(deepest_draft.trim());
          }
          catch (NumberFormatException e)
          { }
       } // if (checks_ok == true)

       
        

       /*
       //////////////// checks on limits
       */
       if (checks_ok == true)
       {
          // barometer reading limits
          if ((pressure_reading.trim().length() > 0) &&
              (double_pressure_reading < 860.0 || double_pressure_reading > 1070.0))
          {
             JOptionPane.showMessageDialog(null, "barometer reading must be in range 860.0 - 1070.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // hier wordt ook "checks_ok" op false gezet
          }
          
          // barometer instrument correction
          else if ( (main.barometer_instrument_correction.trim().length() > 0) &&
              (double_barometer_instrument_correction < -4.0 || double_barometer_instrument_correction > 4.0) )
          {
             JOptionPane.showMessageDialog(null, "barometer instrument correction must be in range -4.0 - 4.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // hier wordt ook "checks_ok" op false gezet
          }

          // deepest draft
          else if ((deepest_draft.trim().length() > 0) &&
              (double_deepest_draft < 0.0 || double_deepest_draft > 50.0))
          {
             JOptionPane.showMessageDialog(null, "deepest draft must be in range 0.0 - 50.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barometer_Vars();                   // hier wordt ook "checks_ok" op false gezet
          }
       } // if (checks_ok == true)

       
       /*
       //////////// apply instrument correction
       */
       double_pressure_reading_corrected = double_pressure_reading + double_barometer_instrument_correction;
       double_pressure_reading_corrected = Math.round(double_pressure_reading_corrected * 10) / 10.0d; // always 1 decimal!!
       pressure_reading_corrected = Double.toString(double_pressure_reading_corrected);
       
       
       /*
       //////////// compute pressure at MSL
       */        
       if (checks_ok == true)
       {
          // compute pressure at MSL (Mean Sea level) required for observation
          MSL_Herleiding_Luchtdruk();                   // in this function "checks_ok" could be set to false
       } // if (checks_ok == true)


       /*
       ///////////// determine meteorological code figures
       */
       if (checks_ok == true)
       {
          //if ( (double_pressure_msl != main.INVALID) && (double_barometer_instrument_correction != main.INVALID) )
          if (double_pressure_msl_corrected != main.INVALID)   
          {
             int num_PPPP_code = (int)Math.floor(double_pressure_msl_corrected * 10 + 0.5);

             // duizental van luchtdruk komt niet in de code
             if (num_PPPP_code >= 10000)
             {
                num_PPPP_code -= 10000;
             }
             
             PPPP_code = Integer.toString(num_PPPP_code);     // convert to string

             // NB PPPP_code always 4 characters width e.g. 0007 (accomplish via construction below)
             int len = 4;
             if (PPPP_code.length() < len)                                            // pad on left with zeros
             {
                PPPP_code = "0000000000".substring(0, len - PPPP_code.length()) + PPPP_code;
             }
          } // if (double_pressure_msl != INVALID)
       } // if (checks_ok == true)

       } // if (main.RS232_connection_mode != 3)
       else                                  // AWS connected mode
       {
          checks_ok = true;
       }
       
       
       /*
       ////// finish
       */
       if (checks_ok == true)
       {
          /* save ic (instrument correction) barometer */
          if (main.RS232_connection_mode != 3)          // NOT AWS connected mode
          {
             //main.configuratie_regels[26] = "";
             //main.configuratie_regels[26] = main.IC_BAROMETER_TXT + main.barometer_instrument_correction;

             // write meta (station) data to muffins or configuration files
             if (main.offline_mode_via_cmd == true)
             {
                main.schrijf_configuratie_regels();          
             }
             else // so offline via turbowin_jws_offline.jnlp or online (webstart) mode
             {
                main.set_muffin();
                main.schrijf_configuratie_regels();   // backup for muffin
             }
          } // if (main.RS232_connection_mode != 3)
          
          /* update progress fields on main screen */
          main.barometer_fields_update();

          /* close this input page */
          setVisible(false);
          dispose();

          /* next screen if in_next_screen mode */
          if (main.in_next_sequence == true)
          {
             next_screen();
          }
       } // if (checks_ok == true)
    }//GEN-LAST:event_OK_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void previous_screen()
    {
       myposition form = new myposition();
       form.setSize(800, 600);
       form.setVisible(true);
    }


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void next_screen()
    {
       mybarograph form = new mybarograph();
       form.setSize(800, 600);
       form.setVisible(true);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

         @Override
            public void run() {
                new mybarometer().setVisible(true);
            }
        });
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JSeparator jSeparator1;
   public static javax.swing.JTextField jTextField1;
   public static javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField3;
   // End of variables declaration//GEN-END:variables
    
   // constants
   private final double CELCIUS_TO_KELVIN_FACTOR               = 273.15;       // add to Celcius to obtain Kelvin
   private final String BAROMETER_HELP_DIR                     = "barometer.html";
    
   // scope this module + myturbowin.java main module (all of type: static)
   public static String PPPP_code                              = "";
   public static String pressure_reading_corrected             = "";
   public static String pressure_msl_corrected                 = "";
   public static String pressure_reading                       = "";
   public static String pressure_msl                           = ""; 
   public static String deepest_draft                          = ""; 
   //public static String barometer_instrument_correction_new    = "";
   
   // scope only this module (no static) 
   private double double_pressure_reading                      = main.INVALID;
   //private double double_pressure_msl                          = main.INVALID;
   private double double_barometer_instrument_correction       = main.INVALID; 
   private double double_pressure_reading_corrected            = main.INVALID;
   private double double_pressure_msl_corrected                = main.INVALID;   // also used in Tdew computation [mytemp.java]
   private double double_deepest_draft                         = main.INVALID;
   private boolean checks_ok                                   = false;
    
}


