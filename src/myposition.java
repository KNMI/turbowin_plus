import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
/*
 * myposition.java
 *
 * Created on 6 april 2007, 6:57
 */

/**
 *
 * @author  stam
 */
public class myposition extends javax.swing.JFrame {
   
   /** Creates new form myposition */
   public myposition() {
      initComponents();
      initComponents2();
      initSynopparameters(); 
      setLocation(main.x_pos_frame, main.y_pos_frame);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      buttonGroup4 = new javax.swing.ButtonGroup();
      jButton4 = new javax.swing.JButton();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();
      jPanel5 = new javax.swing.JPanel();
      jPanel3 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jTextField2 = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jLabel7 = new javax.swing.JLabel();
      jPanel4 = new javax.swing.JPanel();
      jTextField3 = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      jTextField4 = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jLabel8 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel1 = new javax.swing.JPanel();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jRadioButton8 = new javax.swing.JRadioButton();
      jRadioButton9 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jRadioButton11 = new javax.swing.JRadioButton();
      jRadioButton12 = new javax.swing.JRadioButton();
      jRadioButton13 = new javax.swing.JRadioButton();
      jPanel2 = new javax.swing.JPanel();
      jRadioButton14 = new javax.swing.JRadioButton();
      jRadioButton15 = new javax.swing.JRadioButton();
      jRadioButton16 = new javax.swing.JRadioButton();
      jRadioButton17 = new javax.swing.JRadioButton();
      jRadioButton18 = new javax.swing.JRadioButton();
      jRadioButton19 = new javax.swing.JRadioButton();
      jRadioButton20 = new javax.swing.JRadioButton();
      jRadioButton21 = new javax.swing.JRadioButton();
      jRadioButton22 = new javax.swing.JRadioButton();
      jRadioButton23 = new javax.swing.JRadioButton();
      jLabel5 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jCheckBox1 = new javax.swing.JCheckBox();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Position, course and speed");
      setMinimumSize(new java.awt.Dimension(800, 600));
      setResizable(false);
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            myposition_windowClosing(evt);
         }
      });

      jButton4.setText("Back");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jButton3.setText("Internet");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_actionPerformed(evt);
         }
      });

      jButton5.setText("Stop");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionPerformed(evt);
         }
      });

      jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

      jLabel1.setText("degrees");

      jLabel2.setText("minutes");

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("North");
      jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("South");
      jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel2)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton2)
                     .addComponent(jRadioButton1))))
            .addContainerGap(26, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jRadioButton1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton2)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel7.setText("latitude");

      jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

      jLabel3.setText("degrees");

      jLabel4.setText("minutes");

      buttonGroup2.add(jRadioButton3);
      jRadioButton3.setText("East");
      jRadioButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton4);
      jRadioButton4.setText("West");
      jRadioButton4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton4.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel3)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel4)
               .addGroup(jPanel4Layout.createSequentialGroup()
                  .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton4)
                     .addComponent(jRadioButton3))))
            .addContainerGap(28, Short.MAX_VALUE))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel4)
               .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jRadioButton3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton4)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel8.setText("longitude");

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap(16, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel7)
               .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8))
            .addContainerGap(27, Short.MAX_VALUE))
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel7)
               .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(21, Short.MAX_VALUE))
      );

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      buttonGroup3.add(jRadioButton5);
      jRadioButton5.setText("stationary");
      jRadioButton5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton5.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton6);
      jRadioButton6.setText("023 - 067");
      jRadioButton6.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton6.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton7);
      jRadioButton7.setText("068 - 112");
      jRadioButton7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton8);
      jRadioButton8.setText("113 - 157");
      jRadioButton8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton8.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton9);
      jRadioButton9.setText("158 - 202");
      jRadioButton9.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton9.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton10);
      jRadioButton10.setText("203 - 247");
      jRadioButton10.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton10.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton11);
      jRadioButton11.setText("248 - 292");
      jRadioButton11.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton11.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton12);
      jRadioButton12.setText("293 - 337");
      jRadioButton12.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton12.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton13);
      jRadioButton13.setText("338 - 022");
      jRadioButton13.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton13.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton6)
                     .addComponent(jRadioButton7)
                     .addComponent(jRadioButton8)
                     .addComponent(jRadioButton9))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton13)
                     .addComponent(jRadioButton12)
                     .addComponent(jRadioButton11)
                     .addComponent(jRadioButton10))
                  .addGap(73, 73, 73))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jRadioButton5)
                  .addContainerGap(176, Short.MAX_VALUE))))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jRadioButton10)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton11)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton12)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton13))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jRadioButton5)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton6)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton7)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton8)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jRadioButton9)))
            .addContainerGap())
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      buttonGroup4.add(jRadioButton14);
      jRadioButton14.setText("0");
      jRadioButton14.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton14.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton15);
      jRadioButton15.setText("1 - 5");
      jRadioButton15.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton15.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton16);
      jRadioButton16.setText("6 - 10");
      jRadioButton16.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton16.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton17);
      jRadioButton17.setText("11 - 15");
      jRadioButton17.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton17.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton18);
      jRadioButton18.setText("16 - 20");
      jRadioButton18.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton18.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton19);
      jRadioButton19.setText("21 - 25");
      jRadioButton19.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton19.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton20);
      jRadioButton20.setText("26 - 30");
      jRadioButton20.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton20.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton21);
      jRadioButton21.setText("31 - 35");
      jRadioButton21.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton21.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton22);
      jRadioButton22.setText("36 - 40");
      jRadioButton22.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton22.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup4.add(jRadioButton23);
      jRadioButton23.setText("> 40");
      jRadioButton23.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton23.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jRadioButton14)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                  .addComponent(jRadioButton19))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jRadioButton16)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                  .addComponent(jRadioButton21))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jRadioButton15)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                  .addComponent(jRadioButton20))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton17)
                     .addComponent(jRadioButton18))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton23)
                     .addComponent(jRadioButton22))))
            .addGap(78, 78, 78))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton14)
               .addComponent(jRadioButton19))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton15)
               .addComponent(jRadioButton20))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton16)
               .addComponent(jRadioButton21))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton17)
               .addComponent(jRadioButton22))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton18)
               .addComponent(jRadioButton23))
            .addContainerGap())
      );

      jLabel5.setText("course made good during last 3 hrs (degr)");

      jLabel6.setText("speed made good during last 3 hrs (knots)");

      jCheckBox1.setText("plot position on Google Maps (internet)");
      jCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel5)
                           .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel6)
                           .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
         .addGroup(layout.createSequentialGroup()
            .addGap(160, 160, 160)
            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(25, 25, 25)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jCheckBox1)
            .addGap(36, 36, 36)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel5)
               .addComponent(jLabel6))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {
      // hide Back/Stop buttons if not in next_screen_mode
      if (main.in_next_sequence == false)
      {
         jButton4.setEnabled(false);                         // back button
         jButton5.setEnabled(false);                         // stop button
      }

      if (main.offline_mode == true)
      {
         jButton3.setText("Help");
      }

      // default position will not be plotted on Google maps (if internet available)
      jCheckBox1.setSelected(false);                                  // only position on Google Maps
      //jCheckBox2.setSelected(false);                                  // position on Google Maps + AIS map
      
      
      // SOG and COG over 10 minutes if AWS connected or 101 format (FM13 default over 3 hrs)
      if ( (main.obs_format.equals(main.FORMAT_101)) || (main.RS232_connection_mode == 3) )
      {
         jLabel5.setText("course made good during last 10 min (degr)");
         jLabel6.setText("speed made good during last 10 min (knots)");
      }
      
      
      // if in AWS collecting data mode the parameter was measured by AWS then disable the option to insert the parameter manually
      // latitude
      if (main.RS232_connection_mode == 3)                            // AWS connected mode
      {
         jTextField1.setForeground(main.input_color_from_aws);        // Latitude degr
         jTextField1.setEditable(false);
         
         jTextField2.setForeground(main.input_color_from_aws);        // Latitude minutes
         jTextField2.setEditable(false);
         
         jRadioButton1.setEnabled(false);                             // North
         jRadioButton2.setEnabled(false);                             // South
      }   
         
         
      // longitude
      if (main.RS232_connection_mode == 3)
      {   
         jTextField3.setForeground(main.input_color_from_aws);        // Longitude degr
         jTextField3.setEditable(false);
         
         jTextField4.setForeground(main.input_color_from_aws);        // Longitude minutes
         jTextField4.setEditable(false);
         
         jRadioButton3.setEnabled(false);                             // East
         jRadioButton4.setEnabled(false);                             // West
      }
      
      
      // course
      if (main.RS232_connection_mode == 3)
      {
         jLabel6.setForeground(main.input_color_from_aws); 
         jLabel6.setText("course made good during last 10 minutes (degr)");

         
         jRadioButton5.setEnabled(false); 
         jRadioButton6.setEnabled(false);
         jRadioButton7.setEnabled(false);
         jRadioButton8.setEnabled(false);
         jRadioButton9.setEnabled(false);
         jRadioButton10.setEnabled(false);
         jRadioButton11.setEnabled(false);
         jRadioButton12.setEnabled(false);
         jRadioButton13.setEnabled(false);         
      }
      
      
      // speed
      if (main.RS232_connection_mode == 3)
      {
         jLabel5.setForeground(main.input_color_from_aws); 
         jLabel5.setText("speed made good during last 10 minutes (knots)");
         
         jRadioButton14.setEnabled(false); 
         jRadioButton15.setEnabled(false);
         jRadioButton16.setEnabled(false);
         jRadioButton17.setEnabled(false);
         jRadioButton18.setEnabled(false);
         jRadioButton19.setEnabled(false);
         jRadioButton20.setEnabled(false);
         jRadioButton21.setEnabled(false);
         jRadioButton22.setEnabled(false);    
         jRadioButton23.setEnabled(false);
      }
     
      
      if (main.RS232_connection_mode == 3)
      {
         jCheckBox1.setSelected(false);                 // display obs position on Google maps
         jCheckBox1.setEnabled(false);
         
         //jCheckBox2.setSelected(false);                 // display obs position on Google maps + AIS map
         //jCheckBox2.setEnabled(false);
      }
   }



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Reset_All_Position_Vars()
   {
      // scope this module + myturbowin.java main module (all of type: static) 
      latitude_degrees      = "";
      latitude_minutes      = "";
      latitude_hemisphere   = "";
      longitude_degrees     = "";
      longitude_minutes     = "";
      longitude_hemisphere  = "";
      course                = "";
      speed                 = "";
      lalala_code           = "";
      lolololo_code         = "";
      Qc_code               = "";
      Ds_code               = "";
      vs_code               = "";
      int_latitude_degrees  = main.INVALID;
      int_latitude_minutes  = main.INVALID;
      int_longitude_degrees = main.INVALID;
      int_longitude_minutes = main.INVALID;

      // local var's with initialisation
      checks_ok             = false;

      /* position velden op hoofdscherm overzicht updaten */
      main.position_fields_update();
   }
   
   

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Internet_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_actionPerformed
// TODO add your handling code here:
      main.internet_mouseClicked(POSITION_HELP_DIR);
   }//GEN-LAST:event_Internet_button_actionPerformed


   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
   // TODO add your handling code here:
      setVisible(false);
      dispose();

      if (main.in_next_sequence == true)
      {
         next_screen();
      }
      
      // if myposition vars were set (in initsynopparameters if ?GPS connected) before clear them
      myposition_windowClosing(null);
   }//GEN-LAST:event_Cancel_button_actionPerformed


   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
      // TODO add your handling code here:
      
      if (main.RS232_connection_mode != 3)                       // not AWS connected
      { 
      
      // initialisation
      Reset_All_Position_Vars();
      
      // initialisation
      checks_ok = true;
      
      // latitude
      latitude_degrees = jTextField1.getText().trim(); 
      latitude_minutes = jTextField2.getText().trim(); 
       
      if (jRadioButton1.isSelected() == true)
      {
         latitude_hemisphere = HEMISPHERE_NORTH;
      }
      else if (jRadioButton2.isSelected() == true)
      {
         latitude_hemisphere = HEMISPHERE_SOUTH;
      }
      else
      {
         latitude_hemisphere = "";
      }

      // longitude
      longitude_degrees = jTextField3.getText().trim(); 
      longitude_minutes = jTextField4.getText().trim(); 

      if (jRadioButton3.isSelected() == true)
      {
         longitude_hemisphere = HEMISPHERE_EAST;
      }
      else if (jRadioButton4.isSelected() == true)
      {
         longitude_hemisphere = HEMISPHERE_WEST;
      }
      else
      {
         longitude_hemisphere = "";
      }
      
      // course
      if (jRadioButton5.isSelected() == true)
      {
         course = COURSE_STATIONARY;
      }
      else if (jRadioButton6.isSelected() == true)
      {
         course = COURSE_023_067;
      }
      else if (jRadioButton7.isSelected() == true)
      {
         course = COURSE_068_112;
      }
      else if (jRadioButton8.isSelected() == true)
      {
         course = COURSE_113_157;
      }
      else if (jRadioButton9.isSelected() == true)
      {
         course = COURSE_158_202;
      }
      else if (jRadioButton10.isSelected() == true)
      {
         course = COURSE_203_247;
      }
      else if (jRadioButton11.isSelected() == true)
      {
         course = COURSE_248_292;
      }
      else if (jRadioButton12.isSelected() == true)
      {
         course = COURSE_293_337;
      }
      else if (jRadioButton13.isSelected() == true)
      {
         course = COURSE_338_022;
      }
      else
      {
         course = "";
      }

      
      // speed
      if (jRadioButton14.isSelected() == true)
      {
         speed = SPEED_0;
      }
      else if (jRadioButton15.isSelected() == true)
      {
         speed = SPEED_1_5;
      }
      else if (jRadioButton16.isSelected() == true)
      {
         speed = SPEED_6_10;
      }
      else if (jRadioButton17.isSelected() == true)
      {
         speed = SPEED_11_15;
      }
      else if (jRadioButton18.isSelected() == true)
      {
         speed = SPEED_16_20;
      }
      else if (jRadioButton19.isSelected() == true)
      {
         speed = SPEED_21_25;
      }
      else if (jRadioButton20.isSelected() == true)
      {
         speed = SPEED_26_30;
      }
      else if (jRadioButton21.isSelected() == true)
      {
         speed = SPEED_31_35;
      }
      else if (jRadioButton22.isSelected() == true)
      {
         speed = SPEED_36_40;
      }
      else if (jRadioButton23.isSelected() == true)
      {
         speed = SPEED_MORE_40;
      }
      else
      {
         speed = "";
      }
      
      /* 
      //////////////// checks
      */
      
      // String latitude convert to integer
      try 
      {
         int_latitude_degrees = Integer.parseInt(latitude_degrees.trim());
      }
      catch (NumberFormatException e){/* ... */}
      
      
      try 
      {
         int_latitude_minutes = Integer.parseInt(latitude_minutes.trim());
      }
      catch (NumberFormatException e){/* ... */}
      
      
      // String longitude omzetten naar integer
      try 
      {
         int_longitude_degrees = Integer.parseInt(longitude_degrees.trim());
      }
      catch (NumberFormatException e){/* ... */}
      
      
      try 
      {
         int_longitude_minutes = Integer.parseInt(longitude_minutes.trim());
      }
      catch (NumberFormatException e){/* ... */}
    
      
      
      // latitude check error messages
      if (int_latitude_degrees < 0 || int_latitude_degrees > 90 || int_latitude_degrees == 99999)
      {
         JOptionPane.showMessageDialog(null, "latitude degrees must be in range 0 - 90",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }
      else if (int_latitude_minutes < 0 || int_latitude_minutes > 59 || int_latitude_minutes == 99999)
      {
         JOptionPane.showMessageDialog(null, "latitude minutes must be in range 0 - 59",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }
      else if (latitude_hemisphere.equals("") == true)   
      {
         JOptionPane.showMessageDialog(null, "latitude hemisphere not set",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }
       
      // longitude check error messages
      else if (int_longitude_degrees < 0 || int_longitude_degrees > 180 || int_longitude_degrees == 99999)
      {
         JOptionPane.showMessageDialog(null, "longitude degrees must be in range 0 - 180",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }
      else if (int_longitude_minutes < 0 || int_longitude_minutes > 59 || int_longitude_minutes == 99999)
      {
         JOptionPane.showMessageDialog(null, "longitude minutes must be in range 0 - 59",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }
      else if (longitude_hemisphere.equals("") == true)   
      {
         JOptionPane.showMessageDialog(null, "longitude hemisphere not set",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }

      // course check
      else if (course.equals("") == true)
      {
         JOptionPane.showMessageDialog(null, "course made good not set",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_Position_Vars();
      }

      // speed check
      else if (speed.equals("") == true)
      {
         JOptionPane.showMessageDialog(null, "speed made good not set",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Position_Vars();
      }

      else
      {
         checks_ok = true;
      }
    
      
      // combined checks 
      if (checks_ok == true)
      {
         if ( (course.equals(COURSE_STATIONARY) == true) && (speed.equals(SPEED_0) == false) )
         {
            JOptionPane.showMessageDialog(null, "if course made good = 'stationary' than speed made good must be '0'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_Position_Vars();
         }
         else if ( (speed.equals(SPEED_0) == true) && (course.equals(COURSE_STATIONARY) == false) )
         {
            JOptionPane.showMessageDialog(null, "if speed made good = '0' than course made good must be 'stationary'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_Position_Vars();
         }
      } // if (checks_ok == true)
      
      
      if (checks_ok == true)
      {   
         // determine code figure quadrant of the globe
         //
         if ((latitude_hemisphere.equals(HEMISPHERE_NORTH) == true) && (longitude_hemisphere.equals(HEMISPHERE_EAST) == true))
         {
            Qc_code = "1";
         }
         else if ((latitude_hemisphere.equals(HEMISPHERE_SOUTH) == true) && (longitude_hemisphere.equals(HEMISPHERE_EAST) == true))
         {
            Qc_code = "3";
         }
         else if ((latitude_hemisphere.equals(HEMISPHERE_SOUTH) == true) && (longitude_hemisphere.equals(HEMISPHERE_WEST) == true))
         {
            Qc_code = "5";
         }
         else if ((latitude_hemisphere.equals(HEMISPHERE_NORTH) == true) && (longitude_hemisphere.equals(HEMISPHERE_WEST) == true))
         {
            Qc_code = "7";
         }
         else
         {
            JOptionPane.showMessageDialog(null, "internal error: Qc_code", main.APPLICATION_NAME + " error", JOptionPane.ERROR_MESSAGE); // bug check message
         }

         // determine code figures (latitude)
         //
         int int_latitude_minutes_6 = int_latitude_minutes / 6;               // devide the minutes by six and disregard the remainder
         String latitude_minutes_6 = Integer.toString(int_latitude_minutes_6);// convert to String 
         
         if (latitude_minutes_6.length() != 1)                                 // debug check
         {
            JOptionPane.showMessageDialog(null, "internal error: latitude_minutes_6",  main.APPLICATION_NAME + " error", JOptionPane.ERROR_MESSAGE);
         }

         //lalala_code = latitude_degrees.trim() + latitude_minutes_6;
         lalala_code = latitude_degrees.trim().replaceFirst("^0+(?!$)", "") + latitude_minutes_6;

         int len = 3;                                                           // always 3 chars
         if (lalala_code.length() < len) 
         {
            // pad on left with zeros
            lalala_code = "0000000000".substring(0, len - lalala_code.length()) + lalala_code;
         }
         
         // determine code figures (longitude)
         //
         int int_longitude_minutes_6 = int_longitude_minutes / 6;               // devide the minutes by six and disregard the remainder
         String longitude_minutes_6 = Integer.toString(int_longitude_minutes_6);// convert to String 
         
         if (longitude_minutes_6.length() != 1)                                 // debug check
         {
            JOptionPane.showMessageDialog(null, "internal error: longitude_minutes_6",  main.APPLICATION_NAME + " error", JOptionPane.ERROR_MESSAGE);
         }

         //lolololo_code = longitude_degrees.trim() + longitude_minutes_6;
         lolololo_code = longitude_degrees.trim().replaceFirst("^0+(?!$)", "") + longitude_minutes_6;
         
         len = 4;                                                               // always 4 chars
         if (lolololo_code.length() < len)                                      // pad on left with zeros
         {
            lolololo_code = "0000000000".substring(0, len - lolololo_code.length()) + lolololo_code;
         }
         
         
         // determine code figure course
         //
         if (course.equals(COURSE_STATIONARY) == true)            // stopped
         {
            Ds_code = "0";
         }
         else if (course.equals(COURSE_023_067) == true)          // NE
         {
            Ds_code = "1";
         }
         else if (course.equals(COURSE_068_112) == true)          // E 
         {
            Ds_code = "2";
         }
         else if (course.equals(COURSE_113_157) == true)          // SE
         {
            Ds_code = "3";
         }
         else if (course.equals(COURSE_158_202) == true)          // S
         {
            Ds_code = "4";
         }
         else if (course.equals(COURSE_203_247) == true)          // SW
         {
            Ds_code = "5";
         }
         else if (course.equals(COURSE_248_292) == true)          // W
         {
            Ds_code = "6";
         }
         else if (course.equals(COURSE_293_337) == true)          // NW
         {
            Ds_code = "7";
         }
         else if (course.equals(COURSE_338_022) == true)          // N
         {
            Ds_code = "8";
         }
         else
         {
            Ds_code = "9";                           // no information (could be Ds_code = "/" also, because two options to code Ds undefined)
         }
         
         // determine code figure speed
         //
         if (speed.equals(SPEED_0) == true)
         {
            vs_code = "0";
         }
         else if (speed.equals(SPEED_1_5) == true)
         {
            vs_code = "1";
         }
         else if (speed.equals(SPEED_6_10) == true)
         {
            vs_code = "2";
         }
         else if (speed.equals(SPEED_11_15) == true)
         {
            vs_code = "3";
         }
         else if (speed.equals(SPEED_16_20) == true)
         {
            vs_code = "4";
         }
         else if (speed.equals(SPEED_21_25) == true)
         {
            vs_code = "5";
         }
         else if (speed.equals(SPEED_26_30) == true)
         {
            vs_code = "6";
         }
         else if (speed.equals(SPEED_31_35) == true)
         {
            vs_code = "7";
         }
         else if (speed.equals(SPEED_36_40) == true)
         {
            vs_code = "8";
         }
         else if (speed.equals(SPEED_MORE_40) == true)
         {
            vs_code = "9";
         }
         else
         {
            vs_code = "/";
         }
      } // if (checks_ok == true)
      
      /* put ship position on a google map (but only if an internet connection is available (and appropriate checkbox ticked and a logs_dir is available */
      if ( (checks_ok == true) && (jCheckBox1.isSelected() == true) )
      {
         new SwingWorker<Void, Void>()
         {
            @Override
            protected Void doInBackground() throws Exception
            {
               Desktop desktop = null;

               // Before more Desktop API is used, first check
               // whether the API is supported by this particular
               // virtual machine (VM) on this particular host.

               if ( (Desktop.isDesktopSupported()) && ((main.logs_dir != null) && (main.logs_dir.compareTo("") != 0)) /*&& (main.offline_mode == false)*/ )
               {
                  desktop = Desktop.getDesktop();
                  
                  try
                  {
                     
                     // check internet connection available
                     URL url = new URL("http://www.google.com");              // arbitray address could also take www.knmi.nl or etc.
                     URLConnection con = url.openConnection();
                     con.connect();
                     

                     // make the google maps html file
                     //
                     //if (jCheckBox2.isSelected() == true)
                     //{
                     //   AIS_map_also = true;
                     //}
                     //else
                     //{
                     //   AIS_map_also = false;
                     //}
                     
                     String full_path_google_maps_html_file = main.logs_dir + java.io.File.separator + GOOGLE_MAPS_HTML_FILE;
                     Position_In_Google_Maps(full_path_google_maps_html_file/*, AIS_map_also*/);
                     
                     // open the just created google maps html with the default web browser
                     try
                     {
                        File google_maps_file = new File(full_path_google_maps_html_file);  // String omzetten naar File

                        //if (google_maps_file.exists()) // is niet nodig door het try/catch blok
                        desktop.open(google_maps_file);
                     }
                     catch (NullPointerException | IllegalArgumentException | IOException ex1) 
                     { 
                        // if file is null  
                        System.out.println("+++ unable to create dynamic html file for Google Maps plot [function: OK_button_actionPerformed()] (" + ex1 + ")");
                     }





/*
                     try
                     {

                        // open web browser with static Google maps
                        // Static Map URLs are restricted to 2048 characters in size

                        float google_maps_lat = int_latitude_degrees + (float)int_latitude_minutes / 60;
                        if (latitude_hemisphere.equals(HEMISPHERE_SOUTH) == true)
                        {
                           google_maps_lat *= -1;
                        }

                        
                        float google_maps_lon = int_longitude_degrees + (float)int_longitude_minutes / 60;
                        if (longitude_hemisphere.equals(HEMISPHERE_WEST) == true)
                        {
                           google_maps_lon *= -1;
                        }

                        //Toolkit kit = Toolkit.getDefaultToolkit();
                        //Dimension screenSize = kit.getScreenSize();
                        //int screenWidth = screenSize.width;
                        //int screenHeight = screenSize.height;

                        //String http_adres = "http://maps.googleapis.com/maps/api/staticmap?center=-15.800513,-47.91378&zoom=11&size=200x200&sensor=false";          // arbitray address could also take www.knmi.nl or etc.


                        String http_adres = "http://maps.googleapis.com/maps/api/staticmap"
                                             + "?center=" + google_maps_lat + "," + google_maps_lon
                                             + "&zoom=2"
                                             + "&size="          
                                             + "640"//+ main.screenWidth
                                             + "x"
                                             + "320"//"400"//+ main.screenHeight
                                             + "&scale=2"
                                             + "&markers=" + google_maps_lat + "," + google_maps_lon
                                             + "&sensor=false";

                        uri = new URI(http_adres);
                        desktop.browse(uri);
                     }
                     catch (IOException ioe) { }
                     catch (URISyntaxException ex) { }
*/
                  }
                  catch (MalformedURLException ex) 
                  { 
                     System.out.println("+++ unable to create dynamic html file for Google Maps plot [function: OK_button_actionPerformed()] (" + ex + ")");
                  }
                  catch (IOException ioe) 
                  { 
                     System.out.println("+++ unable to create dynamic html file for Google Maps plot [function: OK_button_actionPerformed()] (" + ioe + ")");
                  }
               } // if ((Desktop.isDesktopSupported()) && etc.

               return null;

            } // protected Void doInBackground() throws Exception
         }.execute(); // new SwingWorker<Void, Void>()

      } // if ( (checks_ok == true) && (jCheckBox1.isSelected() == true) )

      } // if (main.RS232_connection_mode != 3)
      else                                          // AWS connected mode
      {
         checks_ok = true;
      }

      
      if (checks_ok == true)
      {
         /* position velden op hoofdscherm overzicht updaten */
         main.position_fields_update();
          
         /* close this input page */
         setVisible(false);
         dispose();

         /* next screen if in_next_screen mode */
         if (main.in_next_sequence == true)
         {
            next_screen();
         }
          
      } // if (checks_ok == true)   
   }//GEN-LAST:event_OK_button_actionPerformed




   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Position_In_Google_Maps(String full_path_google_maps_html_file/*, boolean AIS_map_also*/)
   {
      // make a dynamic html file
      // NB Before invoking this function the existence of the output dir (the logs dir) is already checked positive
      //
      // voor AIS info see: http://www.marinetraffic.com/ais/nl/addyourarea.aspx?level1=150 (English version: http://www.marinetraffic.com/ais/addyourarea.aspx?level1=150)
      
      float float_google_maps_lat = int_latitude_degrees + (float)int_latitude_minutes / 60;
      if (latitude_hemisphere.equals(HEMISPHERE_SOUTH) == true)
      {
         float_google_maps_lat *= -1;
      }

      float float_google_maps_lon = int_longitude_degrees + (float)int_longitude_minutes / 60;
      if (longitude_hemisphere.equals(HEMISPHERE_WEST) == true)
      {
         float_google_maps_lon *= -1;
      }

      //String zoom_level;
      //if (AIS_map_also == true)
      //{
      //   zoom_level = "7";
      //}
      //else
      //{
      //   zoom_level = "2";
      //}
      String zoom_level = "3";
      
      String google_maps_lat = Float.toString(float_google_maps_lat);
      String google_maps_lon = Float.toString(float_google_maps_lon);
      
      
      //
      // data for the (pop-up) infoWindow (attached to the position marker on the Google map)
      //
      String infowindow_lat = "\"" + latitude_degrees + "&#176 " +  latitude_minutes + "' " + latitude_hemisphere + "\"";
      String infowindow_lon = "\"" + longitude_degrees + "&#176 " +  longitude_minutes + "' " + longitude_hemisphere + "\"";
      //String infowindow_date_time = "\"" + main.google_maps_obs_day + " " + main.google_maps_obs_month + " " + main.google_maps_obs_year + "  " + main.google_maps_obs_hour + ".00 UTC" + "\"";
      
      // date time
      String infowindow_date_time = "\"" + "" + "\"";
      //String infowindow_date_time = "\"" + main.google_maps_obs_day + " " + main.google_maps_obs_month + " " + main.google_maps_obs_year + "  " + main.google_maps_obs_hour + ".00 UTC" + "\"";
      if (!main.google_maps_obs_day.equals(""))  // NB if day is not blank also the other date/time parameters are not blank
      {
         infowindow_date_time = "\"" + main.google_maps_obs_day + " " + main.google_maps_obs_month + " " + main.google_maps_obs_year + "  " + main.google_maps_obs_hour + ".00 UTC" + "\"";
      }
      
      // wind dir
      String infowindow_wind_dir = "\"" + "wind dir: " + "\"";
      if (!main.google_maps_obs_wind_dir.equals(""))
      {
          infowindow_wind_dir = "\"" + "wind dir: " +  main.google_maps_obs_wind_dir + "\"";
      }
      
      // wind speed
      String infowindow_wind_speed =  "\"" + "wind speed: " + "\"";
      if (!main.google_maps_obs_wind_speed.equals(""))
      {
         infowindow_wind_speed = "\"" + "wind speed: " +  main.google_maps_obs_wind_speed + "\"";
      }
      
      // air temp
      String infowindow_air_temp =  "\"" + "air temp: " + "\"";
      if (!main.google_maps_obs_air_temp.equals(""))
      {
         infowindow_air_temp = "\"" + "air temp: " +  main.google_maps_obs_air_temp + "\"";
      } 
      
      // sst
      String infowindow_sst =  "\"" + "sea surface temp: " + "\"";
     if (!main.google_maps_obs_sst.equals(""))
      {
         infowindow_sst = "\"" + "sea surface temp: " +  main.google_maps_obs_sst + "\"";
      }
      
      // MSL air pressure
      String infowindow_msl_pressure =  "\"" + "MSL air pressure: " + "\"";
      if (!main.google_maps_obs_msl_pressure.equals(""))
      {
         infowindow_msl_pressure = "\"" + "MSL air pressure: " +  main.google_maps_obs_msl_pressure + "\"";
      }
      
      // name vessel
      String vessel = "\"" + main.ship_name + "\"";
      
      
      //
      // write HTML/JS code
      //
      try
      {
         
         BufferedWriter out = new BufferedWriter(new FileWriter(full_path_google_maps_html_file));

         out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");out.newLine();
         out.write("<html>");out.newLine();
         out.write("<head>");out.newLine();
         out.write("   <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\"/>");out.newLine();
         out.write("   <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/>");out.newLine();
         out.newLine();
         out.write("   <style type=\"text/css\">");out.newLine();
         out.write("      html { height: 100% }");out.newLine();
         out.write("      body { height: 100%; margin: 0px; padding: 0px }");out.newLine();
         //out.write("      #map_canvas { height: 100% }");out.newLine();
         out.write("   </style>");out.newLine();
         out.newLine();
         out.write("   <title>TurboWin+</title>");out.newLine();
         out.write("   <script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=false\"></script>");out.newLine();
         //out.write("   <script type=\"text/javascript\" src=\"util.js\"></script>");out.newLine();
         out.write("   <script type=\"text/javascript\">");out.newLine();
         out.newLine();
         out.write("   function initialize()");out.newLine();
         out.write("   {");out.newLine();
         out.write("      var infoWindow = new google.maps.InfoWindow;");out.newLine();
         out.write("      var myLatlng = new google.maps.LatLng(" + google_maps_lat + ", " + google_maps_lon + ");");out.newLine();
         out.write("      var myOptions =");out.newLine();
         out.write("      {");out.newLine();
         out.write("      zoom: " + zoom_level + ",");out.newLine();
         out.write("         center: myLatlng,");out.newLine();
         out.write("         mapTypeId: google.maps.MapTypeId.ROADMAP,");out.newLine();
         out.write("         streetViewControl: false");out.newLine();
         out.write("      }");out.newLine();
         out.write("      var map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);");out.newLine();
         out.write("      var lat = " + google_maps_lat + ";");out.newLine();
         out.write("      var lon = " + google_maps_lon + ";");out.newLine();
         out.write("      var latlon = new google.maps.LatLng(lat, lon);");out.newLine();
         out.write("      var marker = new google.maps.Marker({position: latlon, map: map});");out.newLine();
         out.write("      bindInfoWindow(marker, map, infoWindow, " + 
                               infowindow_lat + ", " + 
                                infowindow_lon + ", " + 
                                infowindow_date_time + ", " + 
                                vessel + ", " + 
                                infowindow_wind_dir + ", " + 
                                infowindow_wind_speed + ", " +  
                                infowindow_air_temp + ", " + 
                                infowindow_sst + ", " + 
                                infowindow_msl_pressure +
                 ");");out.newLine();
                 
          //out.write("      bindInfoWindow(marker, map, infoWindow, " + infowindow_lat + ", " + infowindow_lon + ", " + infowindow_date_time + ", " + vessel + ", " + infowindow_wind_dir + ", " + infowindow_wind_speed + ", " + infowindow_air_temp + ", " + infowindow_sst + ", " + infowindow_msl_pressure + ");");out.newLine();                 
                 
                 
          out.newLine();
          out.write("      google.maps.event.trigger(marker, 'click');");out.newLine();
          out.write("   }");out.newLine();
          out.newLine();
          out.write("   function bindInfoWindow(marker, map, infoWindow, obs_breedte, obs_lengte, obs_date_time, vessel, wind_dir, wind_speed, air_temp, sst, msl_pressure)");out.newLine();
          out.write("   {");out.newLine();
          out.write("   	  google.maps.event.addListener(marker, 'click', function()");out.newLine();
          out.write("   	  {");out.newLine();

          out.write("         infoWindow.setContent(\"<h3>\" + vessel + \" weather observation\" + \"</h3>\" + "
                         + " \"<p>\" + "
                         + " \"position: \" + obs_breedte + \" \" + obs_lengte + \" \" + \"<br>\" + "
                         + " \"date time: \" + obs_date_time + \"<br>\" + "
                         + " wind_dir  + \"<br>\" + "
                         + " wind_speed + \"<br>\" + "
                         + " air_temp + \"<br>\" + "
                         + " sst + \"<br>\" + "
                         + " msl_pressure + \"<br>\" + "
                         + " \"</p>\");");out.newLine();
          //out.write("         infoWindow.setContent(\"<h3>\" + vessel + \" weather observation\" + \"</h3>\" + \"<p>\" + \"position: \" + obs_breedte + \" \" + obs_lengte + \" \" + \"<br>\" + \"date time: \" + obs_date_time + \"<br>\" + wind_dir  + \"<br>\" + wind_speed + \"<br>\" + air_temp + \"<br>\" + sst + \"<br>\" + msl_pressure + \"<br>\" + \"</p>\");");out.newLine();
        
          out.write("         infoWindow.open(map, marker);");out.newLine();
          out.write("   	  });");out.newLine();
          out.write("   }");out.newLine();
          out.newLine();
          out.write("   </script>");out.newLine();
          out.write("</head>");out.newLine();
          out.newLine();
          out.write("<body onload=\"initialize()\">");out.newLine();

/*
if (AIS_map_also == true)
{
   out.write("   <div  style= \"width: 50%; height: 100%; float:left\">");out.newLine();
  
   // old marine traffic version
   //
   out.write("   <script type=\"text/javascript\">");out.newLine();
   out.write("           width='100%';");out.newLine();          
   out.write("           height='100%';");out.newLine();         
   out.write("           border='1';");out.newLine();           
   out.write("           notation='true';");out.newLine();     
   out.write("           shownames='false'; ");out.newLine();   
   out.write("           latitude=" + google_maps_lat + ";");out.newLine();   
   out.write("           longitude=" + google_maps_lon + ";");out.newLine(); 
   out.write("           zoom=" + zoom_level + ";");out.newLine(); 
   out.write("           maptype='0';");out.newLine();          
   out.write("           trackvessel='0';");out.newLine();      
   out.write("           fleet='';");out.newLine();           
   out.write("           remember='false';");out.newLine();     
   out.write("   </script>");out.newLine();
   out.write("   <script type=\"text/javascript\" src=\"http://www.marinetraffic.com/ais/embed.js\"></script>");out.newLine();
   
   
   // new marine traffic version 
   // werkt niet goed, omdat verwijzing in de nieuwe embed.js library niet goed is 
   // (subdir EN op marine traffic server niet ok is o.i.d.)
   //
   //out.write("   <script type=\"text/javascript\">");out.newLine();
   //out.write("           width='100%';");out.newLine();          
   //out.write("           height='100%';");out.newLine();         
   //out.write("           border='1';");out.newLine();           
   //out.write("           shownames='false'; ");out.newLine();   
   //out.write("           latitude='" + google_maps_lat + "';");out.newLine();   
   //out.write("           longitude='" + google_maps_lon + "';");out.newLine(); 
   //out.write("           zoom='" + zoom_level + "';");out.newLine(); 
   //out.write("           maptype='0';");out.newLine();          
   //out.write("           trackvessel='0';");out.newLine();      
   //out.write("           fleet='';");out.newLine();           
   //out.write("           remember='false';");out.newLine();  
   //out.write("           showmenu='false';");out.newLine();
   //out.write("   </script>");out.newLine();
   //out.write("   <script type=\"text/javascript\" src=\"http://services.marinetraffic.com/resources/embed.js\"></script>");out.newLine();
   
   out.write("   </div>");out.newLine();
   out.write("  <div id=\"map_canvas\" style= \"width: 50%; height: 100%\">");out.newLine();
   out.write("  </div>");out.newLine();
} // if (AIS_map_also == true)
else
{
   out.write("  <div id=\"map_canvas\" style= \"width: 100%; height: 100%; float:left\">");out.newLine();
   out.write("  </div>");out.newLine();
} // else
*/

         out.write("  <div id=\"map_canvas\" style= \"width: 100%; height: 100%; float:left\">");out.newLine();
         out.write("  </div>");out.newLine();

         out.newLine();
         out.write("</body>");out.newLine();
         out.write("</html>");out.newLine();

         out.close();

      } // try
      catch (HeadlessException | IOException e)
      {
         System.out.println("+++ unable to create dynamic html file for Google Maps plot (" + e + ")");
      } // catch
      

   }



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
      // TODO add your handling code here:

      setVisible(false);
      dispose();

      previous_screen();
   }//GEN-LAST:event_Back_button_actionPerformed

   

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Stop_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionPerformed
      // TODO add your handling code here:

      setVisible(false);
      dispose();

      main.in_next_sequence = false;
   }//GEN-LAST:event_Stop_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void myposition_windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_myposition_windowClosing
      // TODO add your handling code here:
      
      // NB when pressing OK button the program will not enter this function myposition_windowClosing()
      //JOptionPane.showMessageDialog(null, "myposition_windowClosing",  main.APPLICATION_NAME + " test", JOptionPane.WARNING_MESSAGE);
      
      if (main.RS232_GPS_connection_mode == 1 && GPS_ok)          // GPS connected  and fix ok
      {
         // see function initSynopparameters(), in this function the myposition vars are set if GPS connected and fix OK
         Reset_All_Position_Vars(); 
      }
   }//GEN-LAST:event_myposition_windowClosing



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void next_screen()
   {
      mybarometer form = new mybarometer();
      form.setSize(800, 600);
      form.setVisible(true);
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void previous_screen()
   {
      myobserver form = new myobserver();
      form.setSize(800, 600);
      form.setVisible(true);
   }






   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new myposition().setVisible(true);
         }
      });
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initSynopparameters() 
   {
      // initialisation
      GPS_ok = true;
      
      
      // GPS connection
      if (main.RS232_GPS_connection_mode == 3)                               // GPS integrated Mintaka Star
      {
         main_RS232_RS422.RS232_Mintaka_Star_Read_Sensor_Data_GPS_For_Obs("MANUAL"); 
         //System.out.println("+++ GPS-ok = " + GPS_ok);
         // NB inserting values in jTextfields etc was done in the function: RS232_Mintaka_Star_Read_Sensor_Data_GPS_For_Obs("MANUAL");
      }
      else if (main.RS232_GPS_connection_mode == 1)
      {
         GPS_ok = main_RS232_RS422.RS232_GPS_NMEA_0183_Date_Position_Parsing("MANUAL");     
         
         if (GPS_ok)
         {
            // latitude
            if (latitude_degrees.compareTo("") != 0)
            {
               jTextField1.setText(latitude_degrees); 
            }
            
            if (latitude_minutes.compareTo("") != 0)
            {
               jTextField2.setText(latitude_minutes); 
            }
            
            if (latitude_hemisphere.compareTo("") != 0)
            {
               if (latitude_hemisphere.equals(HEMISPHERE_NORTH))
               {
                  jRadioButton1.setSelected(true);
               }
               else if (latitude_hemisphere.equals(HEMISPHERE_SOUTH))
               {
                  jRadioButton2.setSelected(true);
               }
            } // if (latitude_hemisphere != "")              
            
            // longitude
            if (longitude_degrees.compareTo("") != 0)
            {
               jTextField3.setText(longitude_degrees); 
            }
      
            if (longitude_minutes.compareTo("") != 0)
            {
               jTextField4.setText(longitude_minutes);
            } 
     
            if (longitude_hemisphere.compareTo("") != 0)
            {
               if (longitude_hemisphere.equals(HEMISPHERE_EAST))
               {
                  jRadioButton3.setSelected(true);
               }
               else if (longitude_hemisphere.equals(HEMISPHERE_WEST))
               {
                  jRadioButton4.setSelected(true);
               }
            } // if (latitude_hemisphere != "")  
            
         } // if (GPS_date_time_ok )
         
      } // if (main.RS232_GPS_connection_mode == 1)
      else if (main.RS232_GPS_connection_mode == 0)                          // no GPS connected
      {
         // put back earlier inserted values (if applicable)
         //
      
         // latitude
         if (latitude_degrees.compareTo("") != 0)
            jTextField1.setText(latitude_degrees); 
      
         if (latitude_minutes.compareTo("") != 0)
            jTextField2.setText(latitude_minutes); 
     
         if (latitude_hemisphere.compareTo("") != 0)
         {
            if (latitude_hemisphere.equals(HEMISPHERE_NORTH))
               jRadioButton1.setSelected(true);
            else if (latitude_hemisphere.equals(HEMISPHERE_SOUTH))
               jRadioButton2.setSelected(true);
         } // if (latitude_hemisphere != "")  
      
      
         // longitude
         if (longitude_degrees.compareTo("") != 0)
            jTextField3.setText(longitude_degrees); 
      
         if (longitude_minutes.compareTo("") != 0)
            jTextField4.setText(longitude_minutes); 
     
         if (longitude_hemisphere.compareTo("") != 0)
         {
            if (longitude_hemisphere.equals(HEMISPHERE_EAST))
               jRadioButton3.setSelected(true);
            else if (longitude_hemisphere.equals(HEMISPHERE_WEST))
               jRadioButton4.setSelected(true);
         } // if (latitude_hemisphere != "")  
      } // else if (main.RS232_GPS_connection_mode == 0) 
      else
      {
         String info = "RS232_GPS_connection_mode unknown";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " warning", JOptionPane.WARNING_MESSAGE);
         System.out.println(info);
      }
      
      
      
      // course
      if (course.compareTo("") != 0)
      {
         if (course.equals(COURSE_STATIONARY))
            jRadioButton5.setSelected(true);
         else if (course.equals(COURSE_023_067))
            jRadioButton6.setSelected(true);
         else if (course.equals(COURSE_068_112))
            jRadioButton7.setSelected(true);
         else if (course.equals(COURSE_113_157))
            jRadioButton8.setSelected(true);
         else if (course.equals(COURSE_158_202))
            jRadioButton9.setSelected(true);
         else if (course.equals(COURSE_203_247))
            jRadioButton10.setSelected(true);
         else if (course.equals(COURSE_248_292))
            jRadioButton11.setSelected(true);
         else if (course.equals(COURSE_293_337))
            jRadioButton12.setSelected(true);
         else if (course.equals(COURSE_338_022))
            jRadioButton13.setSelected(true);
      } // if (course.compareTo("") != 0) 
      
      
      // speed
      if (speed.compareTo("") != 0)
      {
         if (speed.equals(SPEED_0))
            jRadioButton14.setSelected(true);
         else if (speed.equals(SPEED_1_5))
            jRadioButton15.setSelected(true);
         else if (speed.equals(SPEED_6_10))
            jRadioButton16.setSelected(true);
         else if (speed.equals(SPEED_11_15))
            jRadioButton17.setSelected(true);
         else if (speed.equals(SPEED_16_20))
            jRadioButton18.setSelected(true);
         else if (speed.equals(SPEED_21_25))
            jRadioButton19.setSelected(true);
         else if (speed.equals(SPEED_26_30))
            jRadioButton20.setSelected(true);
         else if (speed.equals(SPEED_36_40))
            jRadioButton21.setSelected(true);
         else if (speed.equals(SPEED_MORE_40))
            jRadioButton22.setSelected(true);
      } // if (speed.compareTo("") != 0) 
      
   } // private void initSynopparameters() 




   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   public static javax.swing.ButtonGroup buttonGroup1;
   public static javax.swing.ButtonGroup buttonGroup2;
   public static javax.swing.ButtonGroup buttonGroup3;
   public static javax.swing.ButtonGroup buttonGroup4;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JCheckBox jCheckBox1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   public static javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton10;
   private javax.swing.JRadioButton jRadioButton11;
   private javax.swing.JRadioButton jRadioButton12;
   private javax.swing.JRadioButton jRadioButton13;
   private javax.swing.JRadioButton jRadioButton14;
   private javax.swing.JRadioButton jRadioButton15;
   private javax.swing.JRadioButton jRadioButton16;
   private javax.swing.JRadioButton jRadioButton17;
   private javax.swing.JRadioButton jRadioButton18;
   private javax.swing.JRadioButton jRadioButton19;
   public static javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton20;
   private javax.swing.JRadioButton jRadioButton21;
   private javax.swing.JRadioButton jRadioButton22;
   private javax.swing.JRadioButton jRadioButton23;
   public static javax.swing.JRadioButton jRadioButton3;
   public static javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JRadioButton jRadioButton7;
   private javax.swing.JRadioButton jRadioButton8;
   private javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JSeparator jSeparator1;
   public static javax.swing.JTextField jTextField1;
   public static javax.swing.JTextField jTextField2;
   public static javax.swing.JTextField jTextField3;
   public static javax.swing.JTextField jTextField4;
   // End of variables declaration//GEN-END:variables

      
   
   // constants
   private final String POSITION_HELP_DIR        = "position.html";             // help file
   private final String GOOGLE_MAPS_HTML_FILE    = "position_google_maps.html"; // Google maps file

   public static final String HEMISPHERE_NORTH  = "North" ;
   public static final String HEMISPHERE_SOUTH  = "South" ;
   public static final String HEMISPHERE_EAST   = "East" ;
   public static final String HEMISPHERE_WEST   = "West" ;
  
   public static final String COURSE_STATIONARY = "stationary";
   public static final String COURSE_023_067    = "023 - 067";
   public static final String COURSE_068_112    = "068 - 112";
   public static final String COURSE_113_157    = "113 - 157";
   public static final String COURSE_158_202    = "158 - 202";
   public static final String COURSE_203_247    = "203 - 247";
   public static final String COURSE_248_292    = "248 - 292";
   public static final String COURSE_293_337    = "293 - 337";
   public static final String COURSE_338_022    = "338 - 022";
   
   public static final String SPEED_0           = "0";
   public static final String SPEED_1_5         = "1 - 5";
   public static final String SPEED_6_10        = "6 - 10";
   public static final String SPEED_11_15       = "11- 15";
   public static final String SPEED_16_20       = "16 - 20";
   public static final String SPEED_21_25       = "21 - 25";
   public static final String SPEED_26_30       = "26 - 30";
   public static final String SPEED_31_35       = "31 - 35";
   public static final String SPEED_36_40       = "36 - 40";
   public static final String SPEED_MORE_40     = "> 40"   ;
   
   //public static final int INVALID              = 9999999;


   // global var's
   public static String latitude_degrees        = "";
   public static String latitude_minutes        = "";
   public static String latitude_hemisphere     = "";
   public static String longitude_degrees       = "";
   public static String longitude_minutes       = "";
   public static String longitude_hemisphere    = "";
   public static String course                  = "";
   public static String speed                   = "";
   public static String lalala_code             = "";         // always 3 chars
   public static String lolololo_code           = "";         // always 4 chars
   public static String Qc_code                 = "";         // always 1 chars
   public static String Ds_code                 = "";
   public static String vs_code                 = "";
   public static int int_latitude_degrees       = main.INVALID;    // also used for position sequence check and cloud height advice computation
   public static int int_latitude_minutes       = main.INVALID;    // also used for position sequence check
   public static int int_longitude_degrees      = main.INVALID;    // also used for position sequence check and cloud height advice computation
   public static int int_longitude_minutes      = main.INVALID;    // also used for position sequence check

   // locale var's with initialisation
   boolean checks_ok                            = false;
   private boolean GPS_ok                       = true;
}
