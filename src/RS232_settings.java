package turbowin;


import com.fazecast.jSerialComm.SerialPort;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
//import jssc.SerialPort;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hometrainer
 */
final public class RS232_settings extends javax.swing.JFrame {

   /**
    * Creates new form RS232_settings
    */
   public RS232_settings() {
      initComponents();
      initComponents2();
      setLocation(main.x_pos_main_frame, main.y_pos_main_frame);
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
    * Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jComboBox1 = new javax.swing.JComboBox<>();
      jComboBox2 = new javax.swing.JComboBox<>();
      jComboBox3 = new javax.swing.JComboBox<>();
      jComboBox4 = new javax.swing.JComboBox<>();
      jComboBox5 = new javax.swing.JComboBox<>();
      jLabel8 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jRadioButton11 = new javax.swing.JRadioButton();
      jRadioButton12 = new javax.swing.JRadioButton();
      jRadioButton13 = new javax.swing.JRadioButton();
      jRadioButton14 = new javax.swing.JRadioButton();
      jRadioButton15 = new javax.swing.JRadioButton();
      jLabel6 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jLabel9 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel3 = new javax.swing.JPanel();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jPanel4 = new javax.swing.JPanel();
      jComboBox6 = new javax.swing.JComboBox<>();
      jLabel14 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jComboBox7 = new javax.swing.JComboBox<>();
      jLabel17 = new javax.swing.JLabel();
      jTextField2 = new javax.swing.JTextField();
      jPanel5 = new javax.swing.JPanel();
      jRadioButton8 = new javax.swing.JRadioButton();
      jRadioButton9 = new javax.swing.JRadioButton();
      jLabel5 = new javax.swing.JLabel();
      jLabel13 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Serial/USB or LAN connection settings");
      setMinimumSize(new java.awt.Dimension(1000, 700));
      setResizable(false);

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel1.setText("bits per second");

      jLabel2.setText("data bits");

      jLabel3.setText("parity");

      jLabel4.setText("stop bits");

      jLabel8.setText("port number*");

      jLabel10.setText("port name**");

      jLabel11.setText("* Windows and Linux   ** OS X");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1)
                     .addComponent(jLabel3)
                     .addComponent(jLabel4)
                     .addComponent(jLabel2)
                     .addComponent(jLabel8)
                     .addComponent(jLabel10))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jComboBox3, 0, 206, Short.MAX_VALUE)
                     .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jComboBox4, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jComboBox5, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING))
                  .addGap(20, 20, 20))))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel10))
            .addGap(18, 18, 18)
            .addComponent(jLabel11)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("Vaisala PTB220 serial");
      jRadioButton1.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            PTB220_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("Vaisala PTB330 serial");
      jRadioButton2.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            PTB330_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton3);
      jRadioButton3.setText("EUCAWS AWS serial");
      jRadioButton3.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            AWS_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton4);
      jRadioButton4.setText("none");
      jRadioButton4.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            none_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton5);
      jRadioButton5.setText("Mintaka Duo USB");
      jRadioButton5.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            Mintaka_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton10);
      jRadioButton10.setText("Mintaka Star USB");
      jRadioButton10.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            Mintaka_Star_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton11);
      jRadioButton11.setText("Mintaka Star LAN");
      jRadioButton11.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            Mintaka_Star_WiFi_connected_itenStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton12);
      jRadioButton12.setText("OMC-140 AWS serial");
      jRadioButton12.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            AWS_OMC_serial_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton13);
      jRadioButton13.setText("Mintaka Star + StarX USB");
      jRadioButton13.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            Mintaka_StarX_USB_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton14);
      jRadioButton14.setText("Mintaka Star +  StarX LAN");
      jRadioButton14.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            Mintaka_StarX_WiFi_connected_itemStateChanged(evt);
         }
      });

      buttonGroup1.add(jRadioButton15);
      jRadioButton15.setText("OMC-140 AWS LAN");
      jRadioButton15.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            AWS_OMC_ethernet_connected_itemStateChanged(evt);
         }
      });

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton3)
               .addComponent(jRadioButton2)
               .addComponent(jRadioButton4)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton5)
                     .addComponent(jRadioButton10)
                     .addComponent(jRadioButton11)
                     .addComponent(jRadioButton1))
                  .addGap(29, 29, 29)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(jRadioButton14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jRadioButton12)
                     .addComponent(jRadioButton15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jRadioButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addContainerGap(40, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton5)
               .addComponent(jRadioButton13))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton10)
               .addComponent(jRadioButton14))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton11)
               .addComponent(jRadioButton15))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton1)
               .addComponent(jRadioButton12))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton4)
            .addContainerGap(13, Short.MAX_VALUE))
      );

      jLabel6.setText("instrument port settings");

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            Cancel_button_actionPerformed(evt);
         }
      });

      jLabel9.setForeground(new java.awt.Color(0, 0, 255));
      jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel9.setText("--- Especially for laptops, set all the energy saving settings, display excepted, to 'never' ---");

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel3.setPreferredSize(new java.awt.Dimension(325, 4));

      buttonGroup2.add(jRadioButton6);
      jRadioButton6.setText("GPS (NMEA 0183)");
      jRadioButton6.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            GPS_NMEA_0183_itemStateChanged(evt);
         }
      });

      buttonGroup2.add(jRadioButton7);
      jRadioButton7.setText("none");
      jRadioButton7.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            none_GPS_NMEA_0183_itemStateChanged(evt);
         }
      });

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton7)
               .addComponent(jRadioButton6))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton7)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel4.setPreferredSize(new java.awt.Dimension(326, 147));

      jLabel14.setText("bits per second");

      jLabel15.setText("port number*");

      jLabel16.setText("port name**");

      jLabel17.setText("* Windows and Linux   ** OS X");

      jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

      buttonGroup3.add(jRadioButton8);
      jRadioButton8.setText("use RMC sentence (recommended)");

      buttonGroup3.add(jRadioButton9);
      jRadioButton9.setText("use GGA sentence");

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton9)
               .addComponent(jRadioButton8))
            .addContainerGap(66, Short.MAX_VALUE))
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton9)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel17)
               .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(jPanel4Layout.createSequentialGroup()
                     .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel14)
                        .addComponent(jLabel15)
                        .addComponent(jLabel16))
                     .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                           .addGap(26, 26, 26)
                           .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                           .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))))
            .addContainerGap(26, Short.MAX_VALUE))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel14))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel15)
               .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel16)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(jLabel17)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      jLabel5.setText("GPS connected (USB or serial port)");

      jLabel13.setText("GPS port settings");

      jLabel7.setText("instrument connected (USB or serial port or LAN)");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jSeparator1)))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                              .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                              .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
                           .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 58, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel7)
               .addComponent(jLabel5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel6)
               .addComponent(jLabel13))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   /**
    * ********************************************************************************************
    */
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /**
    * ********************************************************************************************
    */
   private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
      // TODO add your handling code here:

      boolean doorgaan = true;
      String info = "";

      //
      /////////////////// meteorological instrument connected //////////////////
      //
      // type instrument connected instrument
      //
      if (jRadioButton1.isSelected() == true)              // PTB220 connected
      {
         main.RS232_connection_mode = 1;
      } 
      else if (jRadioButton2.isSelected() == true)         // PTB330 connected
      {
         main.RS232_connection_mode = 2;
      } 
      else if (jRadioButton3.isSelected() == true)         // EUCOS AWS connected
      {
         main.RS232_connection_mode = 3;
      } 
      else if (jRadioButton4.isSelected() == true)         // NONE
      {
         main.RS232_connection_mode = 0;
      } 
      else if (jRadioButton5.isSelected() == true)         // Mintaka Duo connected
      {
         main.RS232_connection_mode = 4;
      } 
      else if (jRadioButton10.isSelected() == true)         // Mintaka Star USB connected (NB there is also a Mintaka Star with WiFi)
      {
         main.RS232_connection_mode = 5;
         // NB Mintaka Star has an integrated GPS (see below, GPS connected)!
      } 
      else if (jRadioButton11.isSelected() == true)        // Mintaka Star WiFi connected (NB there is also a Mintaka Star with USB)
      {
         main.RS232_connection_mode = 6;
         // NB Mintaka Star has an integrated GPS (see below, GPS connected)!
      } 
      else if (jRadioButton13.isSelected() == true)        // Mintaka Star + StarX USB connected (NB there is also a Mintaka Star + StarX with WiFi)
      {
         main.RS232_connection_mode = 7;
         // NB Mintaka Star + StarX has an integrated GPS (see below, GPS connected)!
      } 
      else if (jRadioButton14.isSelected() == true)        // Mintaka Star + StarX WiFi connected (NB there is also a Mintaka Star + StarX with USB)
      {
         main.RS232_connection_mode = 8;
         // NB Mintaka Star + StarX has an integrated GPS (see below, GPS connected)!
      } 
      else if (jRadioButton12.isSelected() == true)        // OMC-140 AWS serial connected
      {
         main.RS232_connection_mode = 9;
      } 
      else if (jRadioButton15.isSelected() == true)        // OMC-140 AWS ethernet LAN connected
      {
         main.RS232_connection_mode = 10;
      } 
      else 
      {
         main.RS232_connection_mode = 0;
      }

      // instrument bits per second
      //
      if (jComboBox2.getSelectedItem() != null)            // nothing selected, returns null 
      {
         main.bits_per_second = (Integer) jComboBox2.getSelectedItem();
      } 
      else 
      {
         main.bits_per_second = 0;
      }

      // instrument data bits
      //
      if (jComboBox3.getSelectedItem() != null) // nothing selected, returns null 
      {
         int hulp_data_bits = (Integer) jComboBox3.getSelectedItem();

         switch (hulp_data_bits) 
         {
            case 7:
               main.data_bits = 7;//SerialPort.DATABITS_7;
               break;
            case 8:
               main.data_bits = 8;//SerialPort.DATABITS_8;
               break;
            default:
               main.data_bits = 0;
               break;
         } // switch (hulp_data_bits)
      } 
      else 
      {
         main.data_bits = 0;
      }

      // instrument parity
      //
      if (jComboBox4.getSelectedItem() != null) // nothing selected, returns null 
      {
         String hulp_parity = (String) jComboBox4.getSelectedItem();

         switch (hulp_parity) 
         {
            case "none":
               main.parity = SerialPort.NO_PARITY;//SerialPort.PARITY_NONE;
               break;
            case "odd":
               main.parity = SerialPort.ODD_PARITY;//SerialPort.PARITY_ODD;
               break;
            case "even":
               main.parity = SerialPort.EVEN_PARITY;//SerialPort.PARITY_EVEN;
               break;
            default:
               main.parity = 99;                                    // 99 = non-existing value
               break;
         } // switch (hulp_parity)
      } 
      else 
      {
         main.parity = 99;                                                      // 99 = non-existing value
      }

      // instrument stop bits
      //
      if (jComboBox1.getSelectedItem() != null) // nothing selected, returns null 
      {
         int hulp_stop_bits = (Integer) jComboBox1.getSelectedItem();

         switch (hulp_stop_bits) 
         {
            case 1:
               main.stop_bits = SerialPort.ONE_STOP_BIT;//SerialPort.STOPBITS_1;
               break;
            case 2:
               main.stop_bits = SerialPort.TWO_STOP_BITS;//SerialPort.STOPBITS_2;
               break;
            default:
               main.stop_bits = 0;
               break;
         } // switch (hulp_stop_bits)
      } else 
      {
         main.stop_bits = 0;
      }

      // instrument (prefered) COM port (Windows and Linux)
      //
      if (jComboBox5.getSelectedItem() != null) // nothing selected, returns null 
      {
         main.prefered_COM_port_number = (String) jComboBox5.getSelectedItem();
      } 
      else 
      {
         main.prefered_COM_port_number = "";
      }

      // (prefered) COM port (OS X)
      //
      main.prefered_COM_port_name = jTextField1.getText().trim();

      //System.out.println("+++ prefered_COM_port = " + main.prefered_COM_port);
      //System.out.println("+++ prefered_COM_port_name = " + main.prefered_COM_port_name);
      // NB see Function: meta_data_from_configuration_regels_into_global_vars() [main.java]
      //    here generic name : prefered_COM_port will be used (=prefered_COM_port_number or prefered_COM_port_name)
      //
      /////////////////// GPS (NMEA 0183) connected (or integrated GPS of the Mintaka Star/StarX) //////////////////
      //
      // note in case of Mintaka Star/StarX: main.RS232_GPS_connection_mode = 3/4; (see above, type instrument connected instrument)
      //      because Mintaka Star/StarX has an integrated GPS
      // type GPS connected
      //     
      if (main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6)     // Mintaka Star (USB or WiFi) with integrated GPS
      {
         main.RS232_GPS_connection_mode = 3;                                      // integrated GPS of Mintaka Star
      } 
      else if (main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8)// Mintaka StarX (USB or WiFi) with integrated GPS
      {
         main.RS232_GPS_connection_mode = 4;                                      // integrated GPS of Mintaka StarX
      }
      else 
      {
         if (jRadioButton6.isSelected() == true)      // GPS NMEA 0183 connected
         {
            main.RS232_GPS_connection_mode = 1;
         } 
         else if (jRadioButton7.isSelected() == true) // NONE
         {
            main.RS232_GPS_connection_mode = 0;
         } 
         else 
         {
            //main.RS232_GPS_connection_mode = 3;                                     // integrated GPS of Mintaka Star
            main.RS232_GPS_connection_mode = 0;   // from 18 April 2018
         }
      } // else

      // GPS bits per second
      //
      if (jComboBox6.getSelectedItem() != null) // nothing selected, returns null 
      {
         main.GPS_bits_per_second = (Integer) jComboBox6.getSelectedItem();
      } 
      else 
      {
         main.GPS_bits_per_second = 0;
      }

      // GPS (prefered) COM port (Windows and Linux)
      //
      if (jComboBox7.getSelectedItem() != null) // nothing selected, returns null 
      {
         main.prefered_GPS_COM_port_number = (String) jComboBox7.getSelectedItem();
      } 
      else 
      {
         main.prefered_GPS_COM_port_number = "";
      }

      // GPS (prefered) COM port (OS X)
      //
      main.prefered_GPS_COM_port_name = jTextField2.getText().trim();

      //System.out.println("+++ prefered_COM_port = " + main.prefered_COM_port);
      //System.out.println("+++ prefered_COM_port_name = " + main.prefered_COM_port_name);
      // NB see Function: meta_data_from_configuration_regels_into_global_vars() [main.java]
      //    here generic name : prefered_GPS_COM_port will be used (=prefered_GPS_COM_port_number or prefered_GPS_COM_port_name)
      // GPS sentence to be used (RMC or GGA)
      //
      if (jRadioButton8.isSelected() == true) // use RMC sentence
      {
         main.RS232_GPS_sentence = 1;
      } 
      else if (jRadioButton9.isSelected() == true) // use GGA sentence
      {
         main.RS232_GPS_sentence = 2;
      } 
      else 
      {
         main.RS232_GPS_sentence = 0;                // default; nothing selected
      }

      //
      ////////////////// checks /////////////////
      //
      // NB see also: function: OK_button_actionPerformed() [mystationdata.java]
      
      if (doorgaan == true) 
      {
         // a connected barometer is only possible in combination with setting: "barometer reading NOT at MSL"
         if (((main.RS232_connection_mode == 1) || (main.RS232_connection_mode == 2) || (main.RS232_connection_mode == 4) || (main.RS232_connection_mode == 5) || (main.RS232_connection_mode == 6)) && // PTB220 or PTB330 or MintakaDuo or Mintaka Star USB and WiFi
              (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES) == true)) 
         {
            main.pressure_reading_msl_yes_no = main.PRESSURE_READING_MSL_NO;
            main.configuratie_regels[10] = main.PRESSURE_READING_MSL_TXT + main.pressure_reading_msl_yes_no.trim();

            info = "TurboWin+ will always retrieve the pressure at instrument level (never at MSL) of the connected barometer\n";
            info += "TurboWin+ has automatically changed the setting \"does the reading indicate MSL pressure\" to \"no\" (see: Maintenance -> Station data)";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
            doorgaan = true;
         }
      }
      
      if (doorgaan)
      {  
         if ((main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10) && main.obs_format.equals(main.FORMAT_AWS) == false)
         {
            info = "Do not forget to set obs format to \"AWS connected\". (Maintenance -> Obs format settings)";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
            doorgaan = true;
         }
      }
      
      // PTB330 with max 4800 bps (because with higher settings the incomming data is not correct anymore [missing QNH])
      if (doorgaan)
      {
         if ((main.RS232_connection_mode == 2) && (main.bits_per_second > 4800))
         {
            info = "For PTB330 'bits per second' is max 4800";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
      }
      
      if (doorgaan)
      {
         // warning if AUTOMATICALLY was not selected for instrument port name (for serial and USB connections)
         if (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2 || main.RS232_connection_mode == 3 ||
             main.RS232_connection_mode == 4 || main.RS232_connection_mode == 5 || main.RS232_connection_mode == 7 ||
             main.RS232_connection_mode == 9)
         {
            if (main.prefered_COM_port_number.length() > 2)    // there was something selected
            {
               if (main.prefered_COM_port_number.equals("AUTOMATICALLY") == false)
               {
                  info = "It is recommended to set the instrument COM port number to \"AUTOMATICALLY\",\nselect the other instrument COM port numbers only when testing";
                  JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
                  doorgaan = true;
               }
            }
         }
      }
      
      if (doorgaan)
      {
         // warning if AUTOMATICALLY was not selected for GPS port name (for seria/USB connections)
         if (main.RS232_GPS_connection_mode == 1)
         {
            if (main.prefered_GPS_COM_port_number.length() > 2)    // there was something selected
            {
               if (main.prefered_GPS_COM_port_number.equals("AUTOMATICALLY") == false)
               {
                  info = "It is recommended to set the GPS COM port number to \"AUTOMATICALLY\",\nselect the other GPS COM port numbers only when testing";
                  JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
                  doorgaan = true;
               }
            }   
         }
      }

      // AWS and GPS can not be checked both
      if (doorgaan) 
      {
         if ((main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10) && (main.RS232_GPS_connection_mode != 0)) 
         {
            info = "If an AWS is connected a GPS cannot be connected";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
      }

      // if GPS is connected then there must be also a sentence (RMC or GGA) checked (but not in the case of the Mintaka Star or StarX with integrated GPS)
      if (doorgaan) 
      {
         if ((main.RS232_GPS_connection_mode != 0 && main.RS232_GPS_connection_mode != 3 && main.RS232_GPS_connection_mode != 4) && (main.RS232_GPS_sentence == 0)) 
         {
            info = "If a GPS is connected a GPS sentence type (RMC or GGA) must be also selected";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
      }
      
      // if GPS is connected then there must be also GPS bps checked (but not in the case of the Mintaka Star or StarX with integrated GPS)
      if (doorgaan) 
      {
         if ((main.RS232_GPS_connection_mode != 0 && main.RS232_GPS_connection_mode != 3 && main.RS232_GPS_connection_mode != 4) && (main.GPS_bits_per_second == 0)) 
         {
            info = "If a GPS is connected the GPS port setting 'bits per second' must be also selected";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
      }

      // Mintaka Star or StarX USB/WiFi (integrated GPS) and seperated GPS (NMEA 0178) can not be checked together
      if (doorgaan) 
      {
         if ((main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6 || main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8) && (main.RS232_GPS_connection_mode == 1)) 
         {
            info = "If a Mintaka Star or StarX (integrated GPS) is connected a second seperated GPS cannot be connected";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
      }
      
      // for security (if first AWSR was activated and second the connection was (re)set to EUCAWS)
      if (doorgaan)
      {
         if (main.RS232_connection_mode == 3)    // EUCAWS serial connected
         { 
            // tp be sure
            main.AWSR = false;
            main.AWSR_reporting_interval = "";
         }
      }

      
      //
      ////////////////// save the RS232 (RS422) settings data ///////////////////////
      //
      if (doorgaan == true) 
      {
         // write meta (station) data to muffins or configuration files
         if (main.offline_mode_via_cmd == true) 
         {
            main.schrijf_configuratie_regels();
         } 
         else // so offline_via_jnlp mode or online (webstart) mode
         {
            main.set_muffin();
            main.schrijf_configuratie_regels();
         }

         /* message */
         info = "";
         info = "Changes will take effect after restarting " + main.APPLICATION_NAME;
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);

         /* close this RS232 settings input page */
         setVisible(false);
         dispose();
      }

   }//GEN-LAST:event_OK_button_actionPerformed

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
      // TODO add your handling code here:
      setVisible(false);
      dispose();
   }//GEN-LAST:event_Cancel_button_actionPerformed

   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void AWS_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AWS_connected_itemStateChanged
      // TODO add your handling code here:
      if (jRadioButton3.isSelected() == true) // EUCAWS AWS
      {
         //JOptionPane.showMessageDialog(null, "test radiobutton AWS was selected",  main.APPLICATION_NAME + " test", JOptionPane.INFORMATION_MESSAGE);

         jComboBox2.setSelectedItem(4800);                    // bits per seconde
         jComboBox3.setSelectedItem(8);                       // data bits
         jComboBox4.setSelectedItem("none");                  // parity none
         jComboBox1.setSelectedItem(1);                       // stop bits
         jComboBox5.setSelectedIndex(1);                      // port (Windows and Linux)    -1 indicates no selection; 0 = blanco; 1 = "AUTOMATICALLY"
         jTextField1.setText("AUTOMATICALLY");                // port (OS X) 

         jComboBox2.setEnabled(false);                        // bits per seconde
         jComboBox3.setEnabled(false);                        // data bits
         jComboBox4.setEnabled(false);                        // parity none
         jComboBox1.setEnabled(false);                        // stop bits
         jComboBox5.setEnabled(true);                         // port (Windows and Linux)
         jTextField1.setEnabled(true);                        // port (OS X)

      } // if (jRadioButton3.isSelected() == true)
      else if (jRadioButton3.isSelected() == false)           // EUCAWS AWS
      {
         //JOptionPane.showMessageDialog(null, "test radiobutton AWS was deselected",  main.APPLICATION_NAME + " test", JOptionPane.INFORMATION_MESSAGE);

         jComboBox2.setSelectedIndex(-1);                     // bits per seconde         -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                     // data bits                -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                     // parity none              -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                     // stop bits                -1 indicates no selection
         jComboBox5.setSelectedIndex(-1);                     // port (Windows and Linux) -1 indicates no selection
         jTextField1.setText("");                             // port (OS X) 

         jComboBox2.setEnabled(true);                         // bits per seconde
         jComboBox3.setEnabled(true);                         // data bits
         jComboBox4.setEnabled(true);                         // parity none
         jComboBox1.setEnabled(true);                         // stop bits
         jComboBox5.setEnabled(true);                         // port (Windows and Linux)
         jTextField1.setEnabled(true);                        // port (OS X)

      } // else if (jRadioButton3.isSelected() == false)
   }//GEN-LAST:event_AWS_connected_itemStateChanged


   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void none_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_none_connected_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton4.isSelected() == true) // NONE instrument
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde        -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits               -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none             -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits               -1 indicates no selection
         jComboBox5.setSelectedIndex(-1);                      // port (Windows and Linux)-1 indicates no selection
         jTextField1.setText("");                              // port (OS X) 

         jComboBox2.setEnabled(false);                         // bits per seconde
         jComboBox3.setEnabled(false);                         // data bits
         jComboBox4.setEnabled(false);                         // parity none
         jComboBox1.setEnabled(false);                         // stop bits
         jComboBox5.setEnabled(false);                         // port (Windows and Linux)
         jTextField1.setEnabled(false);                        // port (OS X)
         
      } //else if (jRadioButton3.isSelected() == false)
      else if (jRadioButton4.isSelected() == false) // NONE instrument  
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }
   }//GEN-LAST:event_none_connected_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void PTB220_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PTB220_connected_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton1.isSelected() == true) // PTB220
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde        -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits               -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none             -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits               -1 indicates no selection
         jComboBox5.setSelectedIndex(1);                       // port (Windows and Linux) 0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("AUTOMATICALLY");                 // port (OS X)

         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)

      } 
      else if (jRadioButton1.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }
   }//GEN-LAST:event_PTB220_connected_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void PTB330_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PTB330_connected_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton2.isSelected() == true) // PTB330
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(1);                       // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("AUTOMATICALLY");                 // port (OS X)

         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)

      } 
      else if (jRadioButton2.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }
   }//GEN-LAST:event_PTB330_connected_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void Mintaka_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Mintaka_connected_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton5.isSelected() == true) // Mintaka Duo
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(1);                       // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("AUTOMATICALLY");                 // port (OS X)

         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)

      } 
      else if (jRadioButton5.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }
   }//GEN-LAST:event_Mintaka_connected_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void GPS_NMEA_0183_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_GPS_NMEA_0183_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton6.isSelected() == true) // GPS (NMEA 0183)
      {
         jComboBox6.setSelectedIndex(-1);                      // bits per seconde        -1 indicates no selection
         jComboBox7.setSelectedIndex(1);                       // port (Windows and Linux) 0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField2.setText("AUTOMATICALLY");                 // port (OS X)
         //jRadioButton8.setSelected(false);                     // use RMC sentence
         //jRadioButton9.setSelected(false);                     // use GGA sentence
         buttonGroup3.clearSelection();                        //  !!!!!!! instead off individual radio buttons deselecting !!!

         jComboBox6.setEnabled(true);                          // bits per seconde
         jComboBox7.setEnabled(true);                          // port (windows and Linux)
         jTextField2.setEnabled(true);                         // port (OS X)
         jRadioButton8.setEnabled(true);                       // use RMC sentence
         jRadioButton9.setEnabled(true);                       // use GGA sentence
      } else if (jRadioButton6.isSelected() == false) // GPS (NMEA 0183)
      {
         jComboBox6.setEnabled(false);                          // bits per seconde
         jComboBox7.setEnabled(false);                          // port (Windows and Linux)
         jTextField2.setEnabled(false);                         // port (OS X)
         jRadioButton8.setEnabled(false);                       // use RMC sentence
         jRadioButton9.setEnabled(false);                       // use GGA sentence
      }

   }//GEN-LAST:event_GPS_NMEA_0183_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void none_GPS_NMEA_0183_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_none_GPS_NMEA_0183_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton7.isSelected() == true) // NONE GPS
      {
         jComboBox6.setSelectedIndex(-1);                      // bits per seconde        -1 indicates no selection
         jComboBox7.setSelectedIndex(-1);                      // port (Windows and Linux)-1 indicates no selection
         jTextField2.setText("");                              // port (OS X) 
         //jRadioButton8.setSelected(false);                     // use RMC sentence
         //jRadioButton9.setSelected(false);                     // use GGA sentence
         buttonGroup3.clearSelection();                        //  !!!!!!! instead off individual radio buttons deselecting !!!

         jComboBox6.setEnabled(false);                         // bits per seconde
         jComboBox7.setEnabled(false);                         // port (Windows and Linux)
         jTextField2.setEnabled(false);                        // port (OS X)
         jRadioButton8.setEnabled(false);                      // use RMC sentence
         jRadioButton9.setEnabled(false);                      // use GGA sentence
      } 
      else if (jRadioButton7.isSelected() == false) // NONE GPS            
      {
         jComboBox6.setEnabled(true);                          // bits per seconde
         jComboBox7.setEnabled(true);                          // data bits
         jTextField2.setEnabled(true);                         // port (OS X)
         jRadioButton8.setEnabled(true);                       // use RMC sentence
         jRadioButton9.setEnabled(true);                       // use GGA sentence
      }
   }//GEN-LAST:event_none_GPS_NMEA_0183_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void Mintaka_Star_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Mintaka_Star_connected_itemStateChanged
      // TODO add your handling code here:

      if (jRadioButton10.isSelected() == true) // Mintaka Star USB
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(1);                       // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("AUTOMATICALLY");                 // port (OS X)

         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)

      } 
      else if (jRadioButton10.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }

   }//GEN-LAST:event_Mintaka_Star_connected_itemStateChanged

   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void Mintaka_Star_WiFi_connected_itenStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Mintaka_Star_WiFi_connected_itenStateChanged
      // TODO add your handling code here:

      if (jRadioButton11.isSelected() == true) // Mintaka Star WiFi
      {
         //System.out.println("+++  Mintaka_Star_WiFi_connected_itenStateChanged. jRadioButton11.isSelected()");

         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(-1);                      // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("");                              // port (OS X)

         jComboBox2.setEnabled(false);                         // bits per seconde
         jComboBox3.setEnabled(false);                         // data bits
         jComboBox4.setEnabled(false);                         // parity none
         jComboBox1.setEnabled(false);                         // stop bits
         jComboBox5.setEnabled(false);                         // port (Windows and Linux)
         jTextField1.setEnabled(false);                        // port (OS X)

      } 
      else if (jRadioButton11.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }
   }//GEN-LAST:event_Mintaka_Star_WiFi_connected_itenStateChanged

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/    
   private void Mintaka_StarX_USB_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Mintaka_StarX_USB_connected_itemStateChanged
      // TODO add your handling code here:
      
      if (jRadioButton13.isSelected() == true) // Mintaka Star + StarX USB
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(1);                       // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("AUTOMATICALLY");                 // port (OS X)

         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)

      } 
      else if (jRadioButton13.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }
      
   }//GEN-LAST:event_Mintaka_StarX_USB_connected_itemStateChanged

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/  
   private void Mintaka_StarX_WiFi_connected_itemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Mintaka_StarX_WiFi_connected_itemStateChanged
      // TODO add your handling code here:
    if (jRadioButton14.isSelected() == true) // Mintaka Star + StarX WiFi
      {
         //System.out.println("+++  Mintaka_StarX_WiFi_connected_itenStateChanged. jRadioButton11.isSelected()");

         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(-1);                      // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("");                              // port (OS X)

         jComboBox2.setEnabled(false);                         // bits per seconde
         jComboBox3.setEnabled(false);                         // data bits
         jComboBox4.setEnabled(false);                         // parity none
         jComboBox1.setEnabled(false);                         // stop bits
         jComboBox5.setEnabled(false);                         // port (Windows and Linux)
         jTextField1.setEnabled(false);                        // port (OS X)

      } 
      else if (jRadioButton14.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }  
      
   }//GEN-LAST:event_Mintaka_StarX_WiFi_connected_itemStateChanged

   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/   
   private void AWS_OMC_ethernet_connected_itemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_AWS_OMC_ethernet_connected_itemStateChanged
   {//GEN-HEADEREND:event_AWS_OMC_ethernet_connected_itemStateChanged
      // TODO add your handling code here:
         if (jRadioButton15.isSelected() == true)                 // AWS OMC-140 ethernet
      {
         jComboBox2.setSelectedIndex(-1);                      // bits per seconde          -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                      // data bits                 -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                      // parity none               -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                      // stop bits                 -1 indicates no selection
         jComboBox5.setSelectedIndex(-1);                      // port (Windows and Linux)   0 = blanco; 1 = "AUTOMATICALLY" 
         jTextField1.setText("");                              // port (OS X)

         jComboBox2.setEnabled(false);                         // bits per seconde
         jComboBox3.setEnabled(false);                         // data bits
         jComboBox4.setEnabled(false);                         // parity none
         jComboBox1.setEnabled(false);                         // stop bits
         jComboBox5.setEnabled(false);                         // port (Windows and Linux)
         jTextField1.setEnabled(false);                        // port (OS X)

      } 
      else if (jRadioButton15.isSelected() == false) 
      {
         jComboBox2.setEnabled(true);                          // bits per seconde
         jComboBox3.setEnabled(true);                          // data bits
         jComboBox4.setEnabled(true);                          // parity none
         jComboBox1.setEnabled(true);                          // stop bits
         jComboBox5.setEnabled(true);                          // port (Windows and Linux)
         jTextField1.setEnabled(true);                         // port (OS X)
      }  

   }//GEN-LAST:event_AWS_OMC_ethernet_connected_itemStateChanged

   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/   
   private void AWS_OMC_serial_connected_itemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_AWS_OMC_serial_connected_itemStateChanged
   {//GEN-HEADEREND:event_AWS_OMC_serial_connected_itemStateChanged
      // TODO add your handling code here:
         // TODO add your handling code here:
      if (jRadioButton12.isSelected() == true)                // OMC-140 serial AWS
      {
         //JOptionPane.showMessageDialog(null, "test radiobutton AWS was selected",  main.APPLICATION_NAME + " test", JOptionPane.INFORMATION_MESSAGE);

         //jComboBox2.setSelectedItem(4800);                    // bits per seconde
         jComboBox3.setSelectedItem(8);                       // data bits
         jComboBox4.setSelectedItem("none");                  // parity none
         jComboBox1.setSelectedItem(1);                       // stop bits
         jComboBox5.setSelectedIndex(1);                      // port (Windows and Linux)    -1 indicates no selection; 0 = blanco; 1 = "AUTOMATICALLY"
         jTextField1.setText("AUTOMATICALLY");                // port (OS X) 

         //jComboBox2.setEnabled(false);                        // bits per seconde
         jComboBox3.setEnabled(false);                        // data bits
         jComboBox4.setEnabled(false);                        // parity none
         jComboBox1.setEnabled(false);                        // stop bits
         jComboBox5.setEnabled(true);                         // port (Windows and Linux)
         jTextField1.setEnabled(true);                        // port (OS X)

      } // if (jRadioButton12.isSelected() == true)
      else if (jRadioButton12.isSelected() == false)           // EUCAWS AWS
      {
         //JOptionPane.showMessageDialog(null, "test radiobutton AWS was deselected",  main.APPLICATION_NAME + " test", JOptionPane.INFORMATION_MESSAGE);

         jComboBox2.setSelectedIndex(-1);                     // bits per seconde         -1 indicates no selection
         jComboBox3.setSelectedIndex(-1);                     // data bits                -1 indicates no selection
         jComboBox4.setSelectedIndex(-1);                     // parity none              -1 indicates no selection
         jComboBox1.setSelectedIndex(-1);                     // stop bits                -1 indicates no selection
         jComboBox5.setSelectedIndex(-1);                     // port (Windows and Linux) -1 indicates no selection
         jTextField1.setText("");                             // port (OS X) 

         jComboBox2.setEnabled(true);                         // bits per seconde
         jComboBox3.setEnabled(true);                         // data bits
         jComboBox4.setEnabled(true);                         // parity none
         jComboBox1.setEnabled(true);                         // stop bits
         jComboBox5.setEnabled(true);                         // port (Windows and Linux)
         jTextField1.setEnabled(true);                        // port (OS X)

      } // else if (jRadioButton12.isSelected() == false)

   }//GEN-LAST:event_AWS_OMC_serial_connected_itemStateChanged
   
   
   /************************************************************************************************/
   /*                                                                                              */
   /*                                                                                              */
   /*                                                                                              */
   /************************************************************************************************/
   private void initComponents2() {
      // NB open the GUI form, select JList component, go to Code
      //    properties and set "Type Parameters" property to <Integer>   (or <String> etc)
      //    (https://netbeans.org/bugzilla/show_bug.cgi?id=227943)

      // initialise
      // NB public JRadioButton(): Creates an initially unselected radio button with the specified image but no text.
      // NB public JComboBox(): Creates a JComboBox with a default data model. The default data model is an empty list of objects. Use addItem to add items. By default the first item in the data model becomes selected.
      // NB public JTextField(): Constructs a new TextField. A default model is created, the initial string is null, and the number of columns is set to 0.
      //jRadioButton1.setSelected(false);
      //jRadioButton2.setSelected(false);
      //jRadioButton3.setSelected(false);
      //jRadioButton4.setSelected(false);
      //jRadioButton5.setSelected(false);
      //jRadioButton6.setSelected(false);
      //jRadioButton7.setSelected(false);
      //jRadioButton8.setSelected(false);           // GPS sentence (RMC)
      //jRadioButton9.setSelected(false);           // GPS sentence (GGA)
      buttonGroup1.clearSelection();             //  !!!!!!! instead off individual radio buttons deselecting !!!
      buttonGroup2.clearSelection();             //  !!!!!!! instead off individual radio buttons deselecting !!!
      buttonGroup3.clearSelection();             //  !!!!!!! instead off individual radio buttons deselecting !!!
      jComboBox1.setSelectedItem(-1);
      jComboBox2.setSelectedItem(-1);
      jComboBox3.setSelectedItem(-1);
      jComboBox4.setSelectedItem(-1);
      jComboBox5.setSelectedItem(-1);
      jComboBox6.setSelectedItem(-1);
      jComboBox7.setSelectedItem(-1);
      jTextField1.setText("");
      jTextField2.setText("");

      //
      //////////////////// data model instrument bits per second /////////////////
      //
      //
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <Integer>.
      ComboBoxModel<Integer> bps_model = new DefaultComboBoxModel<Integer>() {
         int[] bps_array = {
            150,
            300,
            600,
            1200,
            2400,
            4800,
            9600,
            19200,
            38400,
            57600,
            115200,
            230400,};

         @Override
         public int getSize() {
            return bps_array.length;
         }

         @Override
         public Integer getElementAt(int i) {
            return bps_array[i];
         }
      };

      jComboBox2.setModel(bps_model);

      //
      //////////////////// data model instrument data bits /////////////////
      //
      //
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <Integer>.
      ComboBoxModel<Integer> data_bits_model = new DefaultComboBoxModel<Integer>() {
         int[] data_bits_array = {
            7,
            8,};

         @Override
         public int getSize() {
            return data_bits_array.length;
         }

         @Override
         public Integer getElementAt(int i) {
            return data_bits_array[i];
         }
      };

      jComboBox3.setModel(data_bits_model);

      //
      //////////////////// data model instrument parity /////////////////
      //
      //
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <String>.
      ComboBoxModel<String> parity_model = new DefaultComboBoxModel<String>() {
         String[] parity_array = {
            "none",
            "even",
            "odd",};

         @Override
         public int getSize() {
            return parity_array.length;
         }

         @Override
         public String getElementAt(int i) {
            return parity_array[i];
         }
      };

      jComboBox4.setModel(parity_model);

      //
      //////////////////// data model instrument stop bits per second /////////////////
      //
      //
      /* --------------------- JAVA 7 --------------- */
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <Integer>.
      ComboBoxModel<Integer> model_stop_bits = new DefaultComboBoxModel<Integer>() {
         int[] stop_bits_array = {
            1,
            2,};

         @Override
         public int getSize() {
            return stop_bits_array.length;
         }

         @Override
         public Integer getElementAt(int i) {
            return stop_bits_array[i];
         }
      };

      jComboBox1.setModel(model_stop_bits);

      //////////////////// data model instrument (prefered) COM port number /////////////////
      //
      //
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <String>.
      ComboBoxModel<String> com_port_model = new DefaultComboBoxModel<String>() {
         String[] com_port_array = {
            "",
            "AUTOMATICALLY",
            "COM1",
            "COM2",
            "COM3",
            "COM4",
            "COM5",
            "COM6",
            "COM7",
            "COM8",
            "COM9",
            "COM10",
            "COM11",
            "COM12",
            "COM13",
            "COM14",
            "COM15",
            "COM16",
            "COM17",
            "COM18",
            "COM19",
            "COM20",
            "/dev/ttyAMA0",
            "/dev/ttyAMA1",
            "/dev/ttyS99",
            "/dev/ttyUSB0",
            "/dev/ttyUSB1",
            "/dev/ttyUSB2",
            "/dev/ttyUSB3",
            "/dev/ttyUSB4",
            "/dev/ttyUSB5",
            "/dev/ttyUSB6",
            "/dev/ttyUSB7",
            "/dev/ttyUSB8",
            "/dev/ttyUSB9",
            "/dev/ttyUSB10",
            "/dev/ttyUSB11",
            "/dev/ttyUSB12",
            "/dev/ttyUSB13",
            "/dev/ttyUSB14",
            "/dev/ttyUSB15",
            "/dev/ttyUSB16",
            "/dev/ttyUSB17",
            "/dev/ttyUSB18",
            "/dev/ttyUSB19",
            "/dev/ttyUSB20"
         };

         @Override
         public int getSize() {
            return com_port_array.length;
         }

         @Override
         public String getElementAt(int i) {
            return com_port_array[i];
         }
      };

      jComboBox5.setModel(com_port_model);

      // set (previous) selected values instrument
      //
      if (main.RS232_connection_mode == 0) // NONE
      {
         jRadioButton4.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 1) // PTB220 connected
      {
         jRadioButton1.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 2) // PTB330 connected
      {
         jRadioButton2.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 3) // EUCOS AWS connected
      {
         jRadioButton3.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 4) // Mintaka Duo connected
      {
         jRadioButton5.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 5) // Mintaka Star USB connected
      {
         jRadioButton10.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 6) // Mintaka Star WiFi LAN connected
      {
         jRadioButton11.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 7) // Mintaka Star + Star X USB connected
      {
         jRadioButton13.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 8) // Mintaka Star + Star X WiFi connected
      {
         jRadioButton14.setSelected(true);
      }
      else if (main.RS232_connection_mode == 9) // OMC-140 AWS serial connected
      {
         jRadioButton12.setSelected(true);
      } 
      else if (main.RS232_connection_mode == 10) // OMC-140 AWS ethernet LAN connected
      {
         jRadioButton15.setSelected(true);
      } 
      else 
      {
         jRadioButton4.setSelected(true);         // NONE
      }
      //System.out.println("+++ initComponents2()= ");

      jComboBox2.setSelectedItem(main.bits_per_second);
      jComboBox3.setSelectedItem(main.data_bits);
      jComboBox1.setSelectedItem(main.stop_bits);

      switch (main.parity) 
      {
         case SerialPort.NO_PARITY://SerialPort.PARITY_NONE:
            jComboBox4.setSelectedItem("none");
            break;
         case SerialPort.ODD_PARITY://SerialPort.PARITY_ODD:
            jComboBox4.setSelectedItem("odd");
            break;
         case SerialPort.EVEN_PARITY://SerialPort.PARITY_EVEN:
            jComboBox4.setSelectedItem("even");
            break;
         default: //jComboBox4.setSelectedItem("");
            jComboBox4.setSelectedItem(-1);        // -1 indicates no selection
            break;
      } // switch (main.parity) 
      //System.out.println("+++ initComponents2() parity; (String)jComboBox4.getSelectedItem() = " + (String)jComboBox4.getSelectedItem());

      //System.out.println("+++ prefered_COM_port_number = " + main.prefered_COM_port_number);
      //System.out.println("+++ prefered_COM_port_name = " + main.prefered_COM_port_name);
      // set (previous) selected values instrument COM port number for Windows and Linux
      //
      if (main.prefered_COM_port_number.equals("")) 
      {
         if (main.RS232_connection_mode == 0) // NONE connected
         {
            jComboBox5.setSelectedIndex(-1);                      // -1 indicates no selection  0 = blanco; 1 = AUTOMATICALLY
         } 
         else if (main.prefered_COM_port_name.equals("") == false)// something available for OS X com port name field
         {
            jComboBox5.setSelectedIndex(-1);                      // -1 indicates no selection  0 = blanco; 1 = AUTOMATICALLY
         } 
         else 
         {
            jComboBox5.setSelectedIndex(1);                       // -1 indicates no selection  0 = blanco; 1 = AUTOMATICALLY
         }
      } else 
      {
         jComboBox5.setSelectedItem(main.prefered_COM_port_number);
      }
      //System.out.println("+++ initComponents2() COM port number; (String)jComboBox5.getSelectedItem() = " + (String)jComboBox5.getSelectedItem());

      // set (previous) selected values instrument COM port name for OS X
      //
      if (main.prefered_COM_port_name.equals("")) 
      {
         if (main.RS232_connection_mode == 0) // NONE connected
         {
            jTextField1.setText("");
         } 
         else if (main.prefered_COM_port_number.equals("") == false) 
         {
            jTextField1.setText("");
         } 
         else 
         {
            jTextField1.setText("AUTOMATICALLY");
         }
      } 
      else 
      {
         jTextField1.setText(main.prefered_COM_port_name);
      }

      //
      //////////////////// data model GPS bits per second /////////////////
      //
      //
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <Integer>.
      ComboBoxModel<Integer> GPS_bps_model = new DefaultComboBoxModel<Integer>() {
         int[] GPS_bps_array = {
            150,
            300,
            600,
            1200,
            2400,
            4800,
            9600,
            19200,
            38400,
            57600,
            115200,
            230400,};

         @Override
         public int getSize() {
            return GPS_bps_array.length;
         }

         @Override
         public Integer getElementAt(int i) {
            return GPS_bps_array[i];
         }
      };

      jComboBox6.setModel(GPS_bps_model);

      //////////////////// data model GPS (prefered) COM port number /////////////////
      //
      //
      // NB open the GUI form, select the JComboBox component, go to Properties -> Code and set "Type Parameters" property to <String>.
      ComboBoxModel<String> GPS_com_port_model = new DefaultComboBoxModel<String>() {
         String[] GPS_com_port_array = {
            "",
            "AUTOMATICALLY",
            "COM1",
            "COM2",
            "COM3",
            "COM4",
            "COM5",
            "COM6",
            "COM7",
            "COM8",
            "COM9",
            "COM10",
            "COM11",
            "COM12",
            "COM13",
            "COM14",
            "COM15",
            "COM16",
            "COM17",
            "COM18",
            "COM19",
            "COM20",
            "/dev/ttyAMA0",
            "/dev/ttyAMA1",
            "/dev/ttyS99",
            "/dev/ttyUSB0",
            "/dev/ttyUSB1",
            "/dev/ttyUSB2",
            "/dev/ttyUSB3",
            "/dev/ttyUSB4",
            "/dev/ttyUSB5",
            "/dev/ttyUSB6",
            "/dev/ttyUSB7",
            "/dev/ttyUSB8",
            "/dev/ttyUSB9",
            "/dev/ttyUSB10",
            "/dev/ttyUSB11",
            "/dev/ttyUSB12",
            "/dev/ttyUSB13",
            "/dev/ttyUSB14",
            "/dev/ttyUSB15",
            "/dev/ttyUSB16",
            "/dev/ttyUSB17",
            "/dev/ttyUSB18",
            "/dev/ttyUSB19",
            "/dev/ttyUSB20"
         };

         @Override
         public int getSize() {
            return GPS_com_port_array.length;
         }

         @Override
         public String getElementAt(int i) {
            return GPS_com_port_array[i];
         }
      };

      jComboBox7.setModel(GPS_com_port_model);

      // set (previous) selected values GPS type
      //
      if (main.RS232_GPS_connection_mode == 0)                       // NONE
      {
         jRadioButton7.setSelected(true);
      } 
      else if (main.RS232_GPS_connection_mode == 1)                  // GPS NMEA 0183
      {
         jRadioButton6.setSelected(true);
      } 
      else 
      {
         jRadioButton7.setSelected(true);                             // NONE
      }

      // GPS bits per second (NB mostly 4800)
      //
      jComboBox6.setSelectedItem(main.GPS_bits_per_second);

      // set (previous) selected values GPS com port number for Windows and Linux
      //
      if (main.prefered_GPS_COM_port_number.equals("")) 
      {
         if (main.RS232_GPS_connection_mode == 0)                     // NONE connected
         {
            jComboBox7.setSelectedIndex(-1);                          // -1 indicates no selection  0 = blanco; 1 = AUTOMATICALLY
         } 
         else if (main.prefered_GPS_COM_port_name.equals("") == false)// something available for OS X com port name field
         {
            jComboBox7.setSelectedIndex(-1);                          // -1 indicates no selection  0 = blanco; 1 = AUTOMATICALLY
         } 
         else 
         {
            jComboBox7.setSelectedIndex(1);                           // -1 indicates no selection  0 = blanco; 1 = AUTOMATICALLY
         }
      } 
      else 
      {
         jComboBox7.setSelectedItem(main.prefered_GPS_COM_port_number);
      }

      // set (previous) selected values GPS com port name for OS X
      //
      if (main.prefered_GPS_COM_port_name.equals("")) 
      {
         if (main.RS232_GPS_connection_mode == 0) // NONE connected
         {
            jTextField2.setText("");
         } 
         else if (main.prefered_GPS_COM_port_number.equals("") == false) 
         {
            jTextField2.setText("");
         } else 
         {
            jTextField2.setText("AUTOMATICALLY");
         }
      } else {
         jTextField2.setText(main.prefered_GPS_COM_port_name);
      }

      // set (previous) selected values GPS sentence
      //
      if (main.RS232_GPS_sentence == 1) // RMC
      {
         jRadioButton8.setSelected(true);                                           // RMC button
      } 
      else if (main.RS232_GPS_sentence == 2)                                        // GGA
      {
         jRadioButton9.setSelected(true);                                           // GGA button
      }

      // reset (something eg there is still "AUTOMATICALLY" visible if none was selected, to be sure reset in none case this)
      // 
      if (main.RS232_connection_mode == 0)                                          // none instrument (no barometer and no EUCAWS)
      {
         none_connected_itemStateChanged(null);
         //jButton3.setEnabled(false);                                                // test button (pop-up with date/time last received instrument data)
      }
      else if (main.RS232_connection_mode == 6)                                      // Mintaka Star WiFi
      {
         Mintaka_Star_WiFi_connected_itenStateChanged(null);       
      }
      
      if (main.RS232_GPS_connection_mode == 0 || main.RS232_GPS_connection_mode == 3 || main.RS232_GPS_connection_mode == 4) // none seperated GPS or an integrated Mintaka Star or StarX GPS
      {
         none_GPS_NMEA_0183_itemStateChanged(null);
      }
   }

   
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /*
       // Set the Nimbus look and feel 
       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
       // If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       // For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       //
       try {
       for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
       if ("Nimbus".equals(info.getName())) {
       javax.swing.UIManager.setLookAndFeel(info.getClassName());
       break;
       }
       }
       } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
       java.util.logging.Logger.getLogger(RS232_settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
       //</editor-fold>
       */
      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new RS232_settings().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JComboBox<Integer> jComboBox1;
   private javax.swing.JComboBox<Integer> jComboBox2;
   private javax.swing.JComboBox<Integer> jComboBox3;
   private javax.swing.JComboBox<String> jComboBox4;
   private javax.swing.JComboBox<String> jComboBox5;
   private javax.swing.JComboBox<Integer> jComboBox6;
   private javax.swing.JComboBox<String> jComboBox7;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton10;
   private javax.swing.JRadioButton jRadioButton11;
   private javax.swing.JRadioButton jRadioButton12;
   private javax.swing.JRadioButton jRadioButton13;
   private javax.swing.JRadioButton jRadioButton14;
   private javax.swing.JRadioButton jRadioButton15;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JRadioButton jRadioButton7;
   private javax.swing.JRadioButton jRadioButton8;
   private javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField2;
   // End of variables declaration//GEN-END:variables
}
