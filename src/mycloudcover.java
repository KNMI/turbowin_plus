package turbowin;

import javax.swing.JOptionPane;
/*
 * mycloudcover.java
 *
 * Created on 8 augustus 2007, 15:18
 */

/**
 *
 * @author  Martin
 */
final public class mycloudcover extends javax.swing.JFrame {
    
    /** Creates new form mycloudcover */
    public mycloudcover() {
        initComponents();
        initComponents2();
        initSynopparameters();
        setLocation(main.x_pos_frame, main.y_pos_frame);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel1 = new javax.swing.JPanel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      jLabel14 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jRadioButton34 = new javax.swing.JRadioButton();
      jRadioButton33 = new javax.swing.JRadioButton();
      jRadioButton32 = new javax.swing.JRadioButton();
      jRadioButton31 = new javax.swing.JRadioButton();
      jRadioButton30 = new javax.swing.JRadioButton();
      jRadioButton29 = new javax.swing.JRadioButton();
      jRadioButton28 = new javax.swing.JRadioButton();
      jRadioButton27 = new javax.swing.JRadioButton();
      jRadioButton26 = new javax.swing.JRadioButton();
      jRadioButton25 = new javax.swing.JRadioButton();
      jRadioButton24 = new javax.swing.JRadioButton();
      jRadioButton23 = new javax.swing.JRadioButton();
      jPanel2 = new javax.swing.JPanel();
      jRadioButton12 = new javax.swing.JRadioButton();
      jRadioButton13 = new javax.swing.JRadioButton();
      jRadioButton14 = new javax.swing.JRadioButton();
      jRadioButton15 = new javax.swing.JRadioButton();
      jRadioButton16 = new javax.swing.JRadioButton();
      jRadioButton17 = new javax.swing.JRadioButton();
      jRadioButton18 = new javax.swing.JRadioButton();
      jRadioButton19 = new javax.swing.JRadioButton();
      jRadioButton20 = new javax.swing.JRadioButton();
      jRadioButton21 = new javax.swing.JRadioButton();
      jRadioButton22 = new javax.swing.JRadioButton();
      jPanel3 = new javax.swing.JPanel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jRadioButton8 = new javax.swing.JRadioButton();
      jRadioButton9 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jRadioButton11 = new javax.swing.JRadioButton();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jButton4 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();
      jLabel13 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Total cloud cover, amount of Cl (Cm) and height of base of lowest cloud");
      setMinimumSize(new java.awt.Dimension(800, 600));
      setResizable(false);

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jButton3.setText("Internet");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_actionPerformed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel4.setText("cloudless");

      jLabel5.setText("0 - 50 m");

      jLabel6.setText("50 - 100 m");

      jLabel7.setText("100 - 200 m");

      jLabel8.setText("200 - 300 m");

      jLabel9.setText("300 - 600 m");

      jLabel10.setText("600 - 1000 m");

      jLabel11.setText("1000 - 1500 m");

      jLabel12.setText("1500 - 2000 m");

      jLabel14.setText("2000 - 2500 m");

      jLabel15.setText(">= 2500 m");

      jLabel16.setText("not determined");

      buttonGroup3.add(jRadioButton34);
      jRadioButton34.setText("not determined");
      jRadioButton34.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton34.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton33);
      jRadioButton33.setText(">= 8000 ft");
      jRadioButton33.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton33.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton32);
      jRadioButton32.setText("6500 - 8000 ft");
      jRadioButton32.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton32.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton31);
      jRadioButton31.setText("5000 - 6500 ft");
      jRadioButton31.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton31.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton30);
      jRadioButton30.setText("3000 - 5000 ft");
      jRadioButton30.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton30.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton29);
      jRadioButton29.setText("2000 - 3000 ft");
      jRadioButton29.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton29.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton28);
      jRadioButton28.setText("1000 - 2000 ft");
      jRadioButton28.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton28.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton27);
      jRadioButton27.setText("600 - 1000 ft");
      jRadioButton27.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton27.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton26);
      jRadioButton26.setText("300 - 600 ft");
      jRadioButton26.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton26.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton25);
      jRadioButton25.setText("150 - 300 ft");
      jRadioButton25.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton25.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton24);
      jRadioButton24.setText(" 0 - 150 ft");
      jRadioButton24.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton24.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup3.add(jRadioButton23);
      jRadioButton23.setText("cloudless");
      jRadioButton23.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton23.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(25, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jLabel16)
               .addComponent(jLabel11)
               .addComponent(jLabel10)
               .addComponent(jLabel12)
               .addComponent(jLabel14)
               .addComponent(jLabel15)
               .addComponent(jLabel9)
               .addComponent(jLabel8)
               .addComponent(jLabel6)
               .addComponent(jLabel5)
               .addComponent(jLabel4)
               .addComponent(jLabel7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton24)
               .addComponent(jRadioButton34)
               .addComponent(jRadioButton23)
               .addComponent(jRadioButton26)
               .addComponent(jRadioButton27)
               .addComponent(jRadioButton28)
               .addComponent(jRadioButton30)
               .addComponent(jRadioButton31)
               .addComponent(jRadioButton32)
               .addComponent(jRadioButton33)
               .addComponent(jRadioButton29)
               .addComponent(jRadioButton25))
            .addGap(23, 23, 23))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton23)
               .addComponent(jLabel4))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton24)
               .addComponent(jLabel5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton25)
               .addComponent(jLabel6))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton26)
               .addComponent(jLabel7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton27)
               .addComponent(jLabel8))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton28)
               .addComponent(jLabel9))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel10))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton30)
               .addComponent(jLabel11))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton31)
               .addComponent(jLabel12))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton32)
               .addComponent(jLabel14))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton33)
               .addComponent(jLabel15))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton34)
               .addComponent(jLabel16))
            .addContainerGap(66, Short.MAX_VALUE))
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel2.setPreferredSize(new java.awt.Dimension(220, 302));

      buttonGroup2.add(jRadioButton12);
      jRadioButton12.setText("0/8");
      jRadioButton12.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton12.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton13);
      jRadioButton13.setText("1/8");
      jRadioButton13.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton13.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton14);
      jRadioButton14.setText("2/8");
      jRadioButton14.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton14.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton15);
      jRadioButton15.setText("3/8");
      jRadioButton15.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton15.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton16);
      jRadioButton16.setText("4/8");
      jRadioButton16.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton16.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton17);
      jRadioButton17.setText("5/8");
      jRadioButton17.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton17.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton18);
      jRadioButton18.setText("6/8");
      jRadioButton18.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton18.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton19);
      jRadioButton19.setText("7/8");
      jRadioButton19.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton19.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton20);
      jRadioButton20.setText("8/8");
      jRadioButton20.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton20.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton21);
      jRadioButton21.setText("obscured");
      jRadioButton21.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton21.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup2.add(jRadioButton22);
      jRadioButton22.setText("not determined");
      jRadioButton22.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton22.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton12)
               .addComponent(jRadioButton15)
               .addComponent(jRadioButton14)
               .addComponent(jRadioButton13)
               .addComponent(jRadioButton22)
               .addComponent(jRadioButton21)
               .addComponent(jRadioButton20)
               .addComponent(jRadioButton19)
               .addComponent(jRadioButton18)
               .addComponent(jRadioButton17)
               .addComponent(jRadioButton16))
            .addContainerGap(107, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton12)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton13)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton14)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton15)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton16)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton17)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton18)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton19)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton20)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton21)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton22)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel3.setPreferredSize(new java.awt.Dimension(220, 302));

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("cloudless");
      jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("1/8");
      jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton3);
      jRadioButton3.setText("2/8");
      jRadioButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton4);
      jRadioButton4.setText("3/8");
      jRadioButton4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton4.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton5);
      jRadioButton5.setText("4/8");
      jRadioButton5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton5.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton6);
      jRadioButton6.setText("5/8");
      jRadioButton6.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton6.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton7);
      jRadioButton7.setText("6/8");
      jRadioButton7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton7.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton8);
      jRadioButton8.setText("7/8");
      jRadioButton8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton8.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton9);
      jRadioButton9.setText("8/8 (compl. overcast)");
      jRadioButton9.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton9.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton10);
      jRadioButton10.setText("obscured");
      jRadioButton10.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton10.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton11);
      jRadioButton11.setText("not determined");
      jRadioButton11.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton11.setMargin(new java.awt.Insets(0, 0, 0, 0));

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton7)
               .addComponent(jRadioButton8)
               .addComponent(jRadioButton9)
               .addComponent(jRadioButton10)
               .addComponent(jRadioButton11)
               .addComponent(jRadioButton1)
               .addComponent(jRadioButton2)
               .addComponent(jRadioButton3)
               .addComponent(jRadioButton4)
               .addComponent(jRadioButton5)
               .addComponent(jRadioButton6))
            .addContainerGap(77, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton11)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel1.setText("total cloud cover");

      jLabel2.setText("amount of Cl (or Cm if Cl not present)");

      jLabel3.setText("height of base of lowest cloud");

      jButton4.setText("Back");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton5.setText("Stop");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionPerformed(evt);
         }
      });

      jLabel13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      jLabel13.setForeground(new java.awt.Color(0, 0, 255));
      jLabel13.setText("This program computes a 'height of base of lowest cloud' advice if cloud classification, latitude, air temp, wet bulb temp and present weather are available");

      jLabel17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      jLabel17.setForeground(new java.awt.Color(0, 0, 255));
      jLabel17.setText("This advice can always be over ruled by checking another button");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                           .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(jLabel1)
                                 .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGap(20, 20, 20)
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(jLabel2)
                                 .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGap(20, 20, 20)
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                 .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                 .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                  .addGap(0, 27, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(60, 60, 60)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jLabel2)
               .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
               .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
               .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
            .addGap(18, 44, Short.MAX_VALUE)
            .addComponent(jLabel13)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel17)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {
      // hide Back/Stop buttons if not in next_screen_mode
      if (main.in_next_sequence == false)
      {
         jButton4.setEnabled(false);                         // back button
         jButton5.setEnabled(false);                         // stop button
      }


      if (main.offline_mode == true)
      {
         jButton3.setText("Help");
      }
   }



    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
// TODO add your handling code here:
        setVisible(false);
        dispose();

        /* next screen in in next sequence mode */
        if (main.in_next_sequence == true)
        {
           next_screen();
        }
    }//GEN-LAST:event_Cancel_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Reset_All_Cloudcover_Vars()
    {
       // scope this module + myturbowin.java main module (all of type: static)
       N                  = "";
       Nh                 = "";
       h                  = "";
       N_code             = "";
       Nh_code            = "";
       h_code             = "";
     
       // local var's with initialisation
       checks_ok         = false;

       /* cloud cover and cloud height fields update on main screen */
       main.cloud_cover_fields_update();
     
    }
   
    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
       // TODO add your handling code here:
   
       // initialisatie
       Reset_All_Cloudcover_Vars();
        
       // total cloud cover 
       if (jRadioButton1.isSelected() == true)
          N = N_CLOUDLESS;
       else if (jRadioButton2.isSelected() == true)
          N = N_1_8;
       else if (jRadioButton3.isSelected() == true)
          N = N_2_8;
       else if (jRadioButton4.isSelected() == true)
          N = N_3_8;
       else if (jRadioButton5.isSelected() == true)
          N = N_4_8;
       else if (jRadioButton6.isSelected() == true)
          N = N_5_8;
       else if (jRadioButton7.isSelected() == true)
          N = N_6_8;
       else if (jRadioButton8.isSelected() == true)
          N = N_7_8;
       else if (jRadioButton9.isSelected() == true)
          N = N_COMPLETELY_OVERCAST;
       else if (jRadioButton10.isSelected() == true)
          N = N_OBSCURED;
       else if (jRadioButton11.isSelected() == true)
          N = N_NOT_DETERMINED;
       else N = "";
       
       
       // amount of Cl (or Cm)
       if (jRadioButton12.isSelected() == true)
          Nh = NH_0_8;
       else if (jRadioButton13.isSelected() == true)
          Nh = NH_1_8;
       else if (jRadioButton14.isSelected() == true)
          Nh = NH_2_8;
       else if (jRadioButton15.isSelected() == true)
          Nh = NH_3_8;
       else if (jRadioButton16.isSelected() == true)
          Nh = NH_4_8;
       else if (jRadioButton17.isSelected() == true)
          Nh = NH_5_8;
       else if (jRadioButton18.isSelected() == true)
          Nh = NH_6_8;
       else if (jRadioButton19.isSelected() == true)
          Nh = NH_7_8;
       else if (jRadioButton20.isSelected() == true)
          Nh = NH_8_8;
       else if (jRadioButton21.isSelected() == true)
          Nh = NH_OBSCURED;
       else if (jRadioButton22.isSelected() == true)
          Nh = NH_NOT_DETERMINED;
       else
          Nh = ""; 
        
       
       // height lowest clouds in the sky
       if (jRadioButton23.isSelected() == true)
          h = H_CLOUDLESS;
       else if (jRadioButton24.isSelected() == true)
          h = H_0_50;
       else if (jRadioButton25.isSelected() == true)
          h = H_50_100;
       else if (jRadioButton26.isSelected() == true)
          h = H_100_200;
       else if (jRadioButton27.isSelected() == true)
          h = H_200_300;
       else if (jRadioButton28.isSelected() == true)
          h = H_300_600;
       else if (jRadioButton29.isSelected() == true)
          h = H_600_1000;
       else if (jRadioButton30.isSelected() == true)
          h = H_1000_1500;
       else if (jRadioButton31.isSelected() == true)
          h = H_1500_2000;
       else if (jRadioButton32.isSelected() == true)
          h = H_2000_2500;
       else if (jRadioButton33.isSelected() == true)
          h = H_GROTER_2500;
       else if (jRadioButton34.isSelected() == true)
          h = H_NOT_DETERMINED;
       else
          h = "";
      
       
       /* 
       //////////////// checks
       */
      
       //
       // checks N, Nh, h
       //
       // Er wordt er van uitgegaan dat als h in[1..9] ook N ingevuld moet zijn
       // als N in[1..8] dan mag wel h niet ingevuld zijn
       //
       //
       
       
       //if ((num_N == 0) && (num_Nh != 0))
       if ((N.equals(N_CLOUDLESS) == true) && (Nh.compareTo(NH_0_8) != 0))    
       {                                         // check 1200
          JOptionPane.showMessageDialog(null, "If 'total cloud cover' = 'cloudless' then 'amount of Cl' must be '0/8'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Cloudcover_Vars();
       }
       
       //else if ((num_N == 0) && (obs_h != h_0))
       else if ((N.equals(N_CLOUDLESS) == true) && (h.compareTo(H_CLOUDLESS) != 0))
       {                                         // check 1200b
          //MessageBox("If 'total cloud cover' = 'cloudless' then 'height of base of lowest cloud in the sky' must be 'cloudless'", "TurboWin error", MB_OK | MB_ICONWARNING);
          JOptionPane.showMessageDialog(null, "If 'total cloud cover' = 'cloudless' then 'height of base of lowest cloud' must be 'cloudless'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Cloudcover_Vars();
       }
       
       //else if ((num_N != 0) && (obs_h == h_0))
       else if ((N.compareTo(N_CLOUDLESS) != 0) && (h.equals(H_CLOUDLESS) == true))
       {                                         // check -
          //MessageBox("If 'height of base of lowest cloud in the sky' = 'cloudless' then 'total cloud cover' must be 'cloudless'", "TurboWin error", MB_OK | MB_ICONWARNING);
          JOptionPane.showMessageDialog(null, "If 'height of base of lowest cloud' = 'cloudless' then 'total cloud cover' must be 'cloudless'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Cloudcover_Vars();
       }
       
       //else if ((obs_N == N_obscured) && (obs_h != h_not_determined) && (obs_h != "\0"))
       else if ((N.equals(N_OBSCURED) == true) && (h.compareTo(H_NOT_DETERMINED) != 0) && (h.compareTo("") != 0)) 
       {                                          // check 1205
           JOptionPane.showMessageDialog(null, "If 'total cloud cover' = 'obscured' then 'height of base of lowest cloud' must be 'not determined'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
           Reset_All_Cloudcover_Vars();
       }
       
       //else if ((obs_N == N_obscured) && (obs_Nh != Nh_obscured) && (obs_Nh != Nh_not_determined) && (obs_Nh != "\0"))
       else if  ((N.equals(N_OBSCURED) == true) &&  (Nh.compareTo(NH_OBSCURED) != 0) && (Nh.compareTo(NH_NOT_DETERMINED) != 0) && (Nh.compareTo("") != 0))
       {                                          // check 1206
           JOptionPane.showMessageDialog(null, "If 'total cloud cover' = 'obscured' then 'amount of Cl (or Cm)' must be 'obscured' or 'not determined'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
           Reset_All_Cloudcover_Vars();
       }
       
       //else if ( ((obs_N == N_not_determined) || (obs_N == "\0")) && (obs_h != h_not_determined) && (obs_h != "\0") )
       else if ( ((N.equals(N_NOT_DETERMINED) == true) || (N.equals("") == true)) && (h.compareTo(H_NOT_DETERMINED) != 0) && (h.compareTo("") != 0) )
       {                                          // check 1210
           JOptionPane.showMessageDialog(null, "If 'total cloud cover' = 'not determined' then 'height of base of lowest cloud in the sky' must be 'not determined'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
           Reset_All_Cloudcover_Vars();
       }
       
       //else if ((obs_N == N_not_determined) && (obs_Nh != Nh_not_determined) && (obs_Nh != "\0"))
       else if ((N.equals(N_NOT_DETERMINED) == true) && (Nh.compareTo(NH_NOT_DETERMINED) != 0) && (Nh.compareTo("") != 0))
       {                                          // check 1211
           JOptionPane.showMessageDialog(null, "If 'total cloud cover' = 'not determined' then 'amount of Cl (or Cm)' must be 'not determined'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
           Reset_All_Cloudcover_Vars();
       }
       
       
       //else if ( (num_N == 1 || num_N == 2 || num_N == 3 || num_N == 4 || num_N == 5 || num_N == 6 || num_N == 7 || num_N == 8) &&
       //          (num_Nh == 1 || num_Nh == 2 || num_Nh == 3 || num_Nh == 4 || num_Nh == 5 || num_Nh == 6 || num_Nh == 7 || num_Nh == 8) &&
       //          (num_Nh > num_N) )
       else if ( ((N.equals(N_1_8) == true) || (N.equals(N_2_8) == true) || (N.equals(N_3_8) == true) || (N.equals(N_4_8) == true) ||
                  (N.equals(N_5_8) == true) || (N.equals(N_6_8) == true) || (N.equals(N_7_8) == true) || (N.equals(N_COMPLETELY_OVERCAST) == true)) &&
               
                 ((Nh.equals(NH_1_8) == true) || (Nh.equals(NH_2_8) == true) || (Nh.equals(NH_3_8) == true) || (Nh.equals(NH_4_8) == true) ||
                  (Nh.equals(NH_5_8) == true) || (Nh.equals(NH_6_8) == true) || (Nh.equals(NH_7_8) == true) || (Nh.equals(NH_8_8) == true)) &&
           (Integer.parseInt(Nh.substring(0,1)) > Integer.parseInt(N.substring(0,1))) ) // truck to compare num values 
       {                                          // check -
          //MessageBox("'total cloud cover' must be >= 'amount of Cl (or Cm if Cl is not present)'", "TurboWin error", MB_OK | MB_ICONWARNING);
          JOptionPane.showMessageDialog(null, "'total cloud cover' must be >= 'amount of Cl (or Cm)'",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Cloudcover_Vars();
       }
       else
       {
           checks_ok = true;
       }
       
       
       
       if (checks_ok == true)
       {    
          // determine code figure N
          //
          if (N.equals(N_CLOUDLESS))
             N_code = "0";
          else if (N.equals(N_1_8))
             N_code = "1";
          else if (N.equals(N_2_8))
             N_code = "2";
          else if (N.equals(N_3_8))
             N_code = "3";
          else if (N.equals(N_4_8))
             N_code = "4";
          else if (N.equals(N_5_8))
             N_code = "5";
          else if (N.equals(N_6_8))
             N_code = "6";
          else if (N.equals(N_7_8))
             N_code = "7";
          else if (N.equals(N_COMPLETELY_OVERCAST))
             N_code = "8";
          else if (N.equals(N_OBSCURED))
             N_code = "9";
          else if (N.equals(N_NOT_DETERMINED))
             N_code = "/";
          else
             N_code = "/"; 

           
          // determine code figure Nh
          //
          if (Nh.equals(NH_0_8))
             Nh_code = "0";
          else if (Nh.equals(NH_1_8))
             Nh_code = "1";
          else if (Nh.equals(NH_2_8))
             Nh_code = "2";
          else if (Nh.equals(NH_3_8))
             Nh_code = "3";
          else if (Nh.equals(NH_4_8))
             Nh_code = "4";
          else if (Nh.equals(NH_5_8))
             Nh_code = "5";
          else if (Nh.equals(NH_6_8))
             Nh_code = "6";
          else if (Nh.equals(NH_7_8))
             Nh_code = "7";
          else if (Nh.equals(NH_8_8))
             Nh_code = "8";
          else if (Nh.equals(NH_OBSCURED))
             Nh_code = "9";
          else if (Nh.equals(NH_NOT_DETERMINED))
             Nh_code = "/";
          else
             Nh_code = "/"; 
          
          
          // determine code figure h
          //
          if (h.equals(H_CLOUDLESS))
             h_code = "9";
          else if (h.equals(H_0_50))
             h_code = "0";
          else if (h.equals(H_50_100))
             h_code = "1";
          else if (h.equals(H_100_200))
             h_code = "2";
          else if (h.equals(H_200_300))
             h_code = "3";
          else if (h.equals(H_300_600))
             h_code = "4";
          else if (h.equals(H_600_1000))
             h_code = "5";
          else if (h.equals(H_1000_1500))
             h_code = "6";
          else if (h.equals(H_1500_2000))
             h_code = "7";
          else if (h.equals(H_2000_2500))
             h_code = "8";
          else if (h.equals(H_GROTER_2500))
             h_code = "9";
          else
             h_code = "/"; 
         
          /* cloud cover, cloud height  velden op hoofdscherm overzicht updaten */
          main.cloud_cover_fields_update();
           
          /* close this input page */
          setVisible(false);
          dispose();

          /* next screen if in_next_screen mode */
          if (main.in_next_sequence == true)
          {
             next_screen();
          }
          
       } // if (checks_ok == true)
    }//GEN-LAST:event_OK_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Internet_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_actionPerformed
       // TODO add your handling code here:
       main.internet_mouseClicked(CLOUDCOVER_HELP_DIR);
    }//GEN-LAST:event_Internet_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       previous_screen();
    }//GEN-LAST:event_Back_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Stop_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       main.in_next_sequence = false;
    }//GEN-LAST:event_Stop_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void previous_screen()
    {
       mych form = new mych();
       form.setSize(800, 600);
       form.setVisible(true);
    }


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void next_screen()
    {
       myobserver form = new myobserver();
       form.setSize(800, 600);
       form.setVisible(true);
    }

    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void initSynopparameters() 
    {
 

       // put back earlier inserted values (if applicable)
       //
      
       // total cloud cover (N)
       if (N.compareTo("") != 0)
       {
          if (N.equals(N_CLOUDLESS))
             jRadioButton1.setSelected(true);
          else if (N.equals(N_1_8))
             jRadioButton2.setSelected(true);
          else if (N.equals(N_2_8))
             jRadioButton3.setSelected(true);
          else if (N.equals(N_3_8))
             jRadioButton4.setSelected(true);
          else if (N.equals(N_4_8))
             jRadioButton5.setSelected(true);
          else if (N.equals(N_5_8))
             jRadioButton6.setSelected(true);
          else if (N.equals(N_6_8))
             jRadioButton7.setSelected(true);
          else if (N.equals(N_7_8))
             jRadioButton8.setSelected(true);
          else if (N.equals(N_COMPLETELY_OVERCAST))
             jRadioButton9.setSelected(true);
          else if (N.equals(N_OBSCURED))
             jRadioButton10.setSelected(true);
          else if (N.equals(N_NOT_DETERMINED))
             jRadioButton11.setSelected(true);
          else
             jRadioButton11.setSelected(true);               // not determined
       } // if (N.compareTo("") != 0)
       else
          jRadioButton11.setSelected(true);                  // not determined
       

       // amount of Cl/Cm (Nh)
       if (Nh.compareTo("") != 0)
       {
          if (Nh.equals(NH_0_8))
             jRadioButton12.setSelected(true);
          else if (Nh.equals(NH_1_8))
             jRadioButton13.setSelected(true);
          else if (Nh.equals(NH_2_8))
             jRadioButton14.setSelected(true);
          else if (Nh.equals(NH_3_8))
             jRadioButton15.setSelected(true);
          else if (Nh.equals(NH_4_8))
             jRadioButton16.setSelected(true);
          else if (Nh.equals(NH_5_8))
             jRadioButton17.setSelected(true);
          else if (Nh.equals(NH_6_8))
             jRadioButton18.setSelected(true);
          else if (Nh.equals(NH_7_8))
             jRadioButton19.setSelected(true);
          else if (Nh.equals(NH_8_8))
             jRadioButton20.setSelected(true);
          else if (Nh.equals(NH_OBSCURED))
             jRadioButton21.setSelected(true);
          else if (Nh.equals(NH_NOT_DETERMINED))
             jRadioButton22.setSelected(true);
          else
             jRadioButton22.setSelected(true);               // not determined
       } // if (N.compareTo("") != 0)
       else
          jRadioButton22.setSelected(true);                  // not determined

       
       // height lowest clouds in the sky

       // compute h advice
       int h_advies = Compute_h_advice();

       if (h_advies == -9)                                    // cloudless
          jRadioButton23.setSelected(true);
       else if (h_advies == 0)
          jRadioButton24.setSelected(true);
       else if (h_advies == 1)
          jRadioButton25.setSelected(true);
       else if (h_advies == 2)
          jRadioButton26.setSelected(true);
       else if (h_advies == 3)
          jRadioButton27.setSelected(true);
       else if (h_advies == 4)
          jRadioButton28.setSelected(true);
       else if (h_advies == 5)
          jRadioButton29.setSelected(true);
       else if (h_advies == 6)
          jRadioButton30.setSelected(true);
       else if (h_advies == 7)
          jRadioButton31.setSelected(true);
       else if (h_advies == 8)
          jRadioButton32.setSelected(true);
       else if (h_advies == 9)
          jRadioButton33.setSelected(true);
       else
          jRadioButton34.setSelected(true);                      // not determined
    }




    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private int Compute_h_advice()
    {
       int h_advies = main.INVALID;
       int local_int_Cl;
       int local_int_Cm;
       int local_int_Ch;
       int local_int_ww_code;
       int local_int_latitude_degrees;
       double local_double_air_temp;
       double local_double_dew_point;


       // Cl_code to int (code)
       //
       if (mycl.cl_code.trim().length() == 0)
       {
          local_int_Cl = main.INVALID;
       }
       else
       {
          try
          {
             local_int_Cl = Integer.parseInt(mycl.cl_code.trim());
          }
          catch (NumberFormatException e)
          {
             local_int_Cl = main.INVALID;
          }
       } // else


       // Cm_code to int (code)
       //
       if (mycm.cm_code.trim().length() == 0)
       {
          local_int_Cm = main.INVALID;
       }
       else
       {
          try
          {
             local_int_Cm = Integer.parseInt(mycm.cm_code.trim());
          }
          catch (NumberFormatException e)
          {
             local_int_Cm = main.INVALID;
          }
       } // else


       // Ch_code to int (code)
       //
       if (mych.ch_code.trim().length() == 0)
       {
          local_int_Ch = main.INVALID;
       }
       else
       {
          try
          {
             local_int_Ch = Integer.parseInt(mych.ch_code.trim());
          }
          catch (NumberFormatException e)
          {
             local_int_Ch = main.INVALID;
          }
       } // else


       // air temp to double (degrees en tenths)
       //
       if (mytemp.air_temp.trim().length() == 0)
       {
          local_double_air_temp = main.INVALID;
       }
       else
       {
          try
          {
             local_double_air_temp = Double.parseDouble(mytemp.air_temp.trim());
          }
          catch (NumberFormatException e)
          {
             local_double_air_temp = main.INVALID;
          }
       } // else


       // dew point (degrees en tenths)
       //
       local_double_dew_point = mytemp.double_dew_point;            // kan INVALID zijn

       // latitude (whole degrees)
       local_int_latitude_degrees = myposition.int_latitude_degrees;

       // ww
       try
       {
          local_int_ww_code = Integer.parseInt(mypresentweather.ww_code.trim());
       }
       catch (NumberFormatException e)
       {
         local_int_ww_code = main.INVALID;
       }


       switch (local_int_Cl)
       {
           case 1: case 2: if (local_double_air_temp != main.INVALID && local_double_dew_point != main.INVALID)
                           {
                              double hoogte = (local_double_air_temp - local_double_dew_point) * 125;

                              if (hoogte < 50.0)
                                 h_advies = 0;                      // 0 - 50 meter
                              else if (hoogte >= 50.0 && hoogte < 100.0)
                                 h_advies = 1;
                              else if (hoogte >= 100.0 && hoogte < 200.0)
                                 h_advies = 2;
                              else if (hoogte >= 200.0 && hoogte < 300.0)
                                 h_advies = 3;
                              else if (hoogte >= 300.0 && hoogte < 600.0)
                                 h_advies = 4;
                              else if (hoogte >= 600.0 && hoogte < 1000.0)
                                 h_advies = 5;
                              else if (hoogte >= 1000.0 && hoogte < 1500.0)
                                 h_advies = 6;
                              else if (hoogte >= 1500.0 && hoogte < 2000.0)
                                 h_advies = 7;
                              else if (hoogte >= 2000.0 && hoogte < 2500.0)
                                 h_advies = 8;
                              // NB ort wolken dus dan geen advies verder 
                           } // if (local_tdry != MAXINT && local_tdew != MAXINT)
                           break;
       case 3: case 4: case 5 : if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                                   h_advies = 4;
                                else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                                   h_advies = 5;
                                else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                                   h_advies = 6;
                                break;
       case 6 : case 7 : if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                            h_advies = 1;
                         else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                            h_advies = 2;
                         else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                            h_advies = 3;
                         break;
       case 8  : if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                    h_advies = 4;
                 else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                    h_advies = 5;
                 else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                    h_advies = 5;
                 break;
       case 9  : if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                    h_advies = 4;
                 else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                    h_advies = 5;
                 else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                    h_advies = 6;
                 break;
       default : break;
   } // switch (local_Cl)


   // geen Cl aanwezig dan kijken naar Cm /
   if (local_int_Cl == 0)
   {
      switch (local_int_Cm)
      {
         case 1        : if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                            h_advies = 8;
                         else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                            h_advies = 9;
                         else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                            h_advies = 9;
                         break;
         case 2        : // (continious) neerslag (rain, snow , ice pellets (zie bij main differences Nimbostratus and similar clouds of other genera) /
                         if (local_int_ww_code == 61 || local_int_ww_code == 63 || local_int_ww_code == 65 ||
                             local_int_ww_code == 66 || local_int_ww_code == 67 || local_int_ww_code == 68 || local_int_ww_code == 69 ||
                             local_int_ww_code == 71 || local_int_ww_code == 73 || local_int_ww_code == 75 || local_int_ww_code == 79)
                         {
                            if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                               h_advies = 2;
                            else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                               h_advies = 3;
                            else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                               h_advies = 4;
                         } // if (local_ww == 61 || local_ww == 63 || etc.
                         else // dus geen (continous neerslag etc.) /
                         {
                            if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                               h_advies = 6;
                            else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                               h_advies = 7;
                            else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                                h_advies = 8;
                         } // else (geen cont neerslag etc.)
                         break;
         case 3: case 4: case 5: case 6: if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                                            h_advies = 8;
                                         else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                                            h_advies = 9;
                                         else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                                            h_advies = 9;
                                         break;
         case 7        : if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                            h_advies = 6;
                         else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                            h_advies = 7;
                         else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                            h_advies = 8;
                         break;
         case 8: case 9: if (local_int_latitude_degrees >= 70 && local_int_latitude_degrees <= 90)
                            h_advies = 8;
                         else if (local_int_latitude_degrees > 20 && local_int_latitude_degrees < 70)
                            h_advies = 9;
                         else if (local_int_latitude_degrees <= 20 && local_int_latitude_degrees >= 0)
                            h_advies = 9;
                         break;
         default       : break;
      } // switch (local_int_Cm)
   } // if (local_int_Cl == 0)


   // N.B. WMO code h=9 (h_advies) geld voor cloudless EN wolken basis >= 2500 meter /
   // even hier als trucje bij cloudless h_advies = -9                               /

   // geen Cl en geen Cm aanwezig 
   if (local_int_Cl == 0 && local_int_Cm == 0)
   {
      if (local_int_Ch >= 1 && local_int_Ch <= 9)        // geldige Ch type
         h_advies = 9;                                   // hoogte >= 2500 meter
   } // if (local_Cl == MAXINT && local_Cm == MAXINT)


   // cloudless 
   if (local_int_Cl == 0 && local_int_Cm == 0 && local_int_Ch == 0)
      h_advies = -9;                                     // cloudless (fictief codecijfer om cloudless even aan te geven


   return h_advies;
}








         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mycloudcover().setVisible(true);
            }
        });
    }

    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton10;
   private javax.swing.JRadioButton jRadioButton11;
   private javax.swing.JRadioButton jRadioButton12;
   private javax.swing.JRadioButton jRadioButton13;
   private javax.swing.JRadioButton jRadioButton14;
   private javax.swing.JRadioButton jRadioButton15;
   private javax.swing.JRadioButton jRadioButton16;
   private javax.swing.JRadioButton jRadioButton17;
   private javax.swing.JRadioButton jRadioButton18;
   private javax.swing.JRadioButton jRadioButton19;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton20;
   private javax.swing.JRadioButton jRadioButton21;
   private javax.swing.JRadioButton jRadioButton22;
   private javax.swing.JRadioButton jRadioButton23;
   private javax.swing.JRadioButton jRadioButton24;
   private javax.swing.JRadioButton jRadioButton25;
   private javax.swing.JRadioButton jRadioButton26;
   private javax.swing.JRadioButton jRadioButton27;
   private javax.swing.JRadioButton jRadioButton28;
   private javax.swing.JRadioButton jRadioButton29;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JRadioButton jRadioButton30;
   private javax.swing.JRadioButton jRadioButton31;
   private javax.swing.JRadioButton jRadioButton32;
   private javax.swing.JRadioButton jRadioButton33;
   private javax.swing.JRadioButton jRadioButton34;
   private javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JRadioButton jRadioButton7;
   private javax.swing.JRadioButton jRadioButton8;
   private javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JSeparator jSeparator1;
   // End of variables declaration//GEN-END:variables

    
    // public constants
    public static final String N_CLOUDLESS           = "cloudless";
    public static final String N_1_8                 = "1/8"; 
    public static final String N_2_8                 = "2/8";    
    public static final String N_3_8                 = "3/8";    
    public static final String N_4_8                 = "4/8";    
    public static final String N_5_8                 = "5/8";    
    public static final String N_6_8                 = "6/8";    
    public static final String N_7_8                 = "7/8";    
    public static final String N_COMPLETELY_OVERCAST = "8/8 (compl. overcast)";    
    public static final String N_OBSCURED            = "obscured";    
    public static final String N_NOT_DETERMINED      = "not determined";
    
    public static final String NH_0_8                = "0/8";
    public static final String NH_1_8                = "1/8"; 
    public static final String NH_2_8                = "2/8";    
    public static final String NH_3_8                = "3/8";    
    public static final String NH_4_8                = "4/8";    
    public static final String NH_5_8                = "5/8";    
    public static final String NH_6_8                = "6/8";    
    public static final String NH_7_8                = "7/8";    
    public static final String NH_8_8                = "8/8";    
    public static final String NH_OBSCURED           = "obscured";    
    public static final String NH_NOT_DETERMINED     = "not determined";
    
    public static final String H_CLOUDLESS            = "cloudless";
    public static final String H_0_50                 = "0 - 50 m (0 - 150 ft)";
    public static final String H_50_100               = "50 - 100 m (150 - 300 ft)";
    public static final String H_100_200              = "100 - 200 m (300 - 600 ft)";
    public static final String H_200_300              = "200 - 300 m (600 - 1000 ft)";
    public static final String H_300_600              = "300 - 600 m (1000 - 2000 ft)";
    public static final String H_600_1000             = "600 - 1000 m (2000 - 3000 ft)";
    public static final String H_1000_1500            = "1000 - 1500 m (3000 - 5000 ft)";   
    public static final String H_1500_2000            = "1500 - 2000 m (5000 - 6500 ft)"; 
    public static final String H_2000_2500            = "2000 - 2500 m (6500 - 8000 ft)"; 
    public static final String H_GROTER_2500          = ">= 2500 m (>= 8000 ft)"; 
    public static final String H_NOT_DETERMINED       = "not determined"; 

    // private constants
    private final String CLOUDCOVER_HELP_DIR          = "cloudcover.html";
    //private final int INVALID                         = 9999999;

    // scope this module + main module
    public static String N                            = "";
    public static String Nh                           = "";
    public static String h                            = "";
    public static String N_code                       = "";                             // always 1 char
    public static String Nh_code                      = "";                             // always 1 char
    public static String h_code                       = "";                             // always 1 char

    // scope only this module (no static)
    boolean checks_ok = false;


}
