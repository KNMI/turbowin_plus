package turbowin;


import java.awt.Cursor;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Martin
 */
final public class WOW_APR_settings extends javax.swing.JFrame {

   /**
    * Creates new form WOW_settings
    */
   public WOW_APR_settings() {
      initComponents();
      initComponents2();
      setLocation(main.x_pos_main_frame, main.y_pos_main_frame);
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
    * Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel1 = new javax.swing.JPanel();
      jLabel5 = new javax.swing.JLabel();
      jCheckBox1 = new javax.swing.JCheckBox();
      jTextField1 = new javax.swing.JTextField();
      jTextField2 = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jRadioButton5 = new javax.swing.JRadioButton();
      jPanel3 = new javax.swing.JPanel();
      jCheckBox2 = new javax.swing.JCheckBox();
      jPanel4 = new javax.swing.JPanel();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jRadioButton8 = new javax.swing.JRadioButton();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jPanel5 = new javax.swing.JPanel();
      jLabel8 = new javax.swing.JLabel();
      jTextField4 = new javax.swing.JTextField();
      jLabel13 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jTextField5 = new javax.swing.JTextField();
      jLabel12 = new javax.swing.JLabel();
      jLabel14 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jPanel6 = new javax.swing.JPanel();
      jPanel7 = new javax.swing.JPanel();
      jRadioButton9 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jRadioButton11 = new javax.swing.JRadioButton();
      jCheckBox3 = new javax.swing.JCheckBox();
      jLabel7 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("WOW and APR and AWSR settings");
      setMinimumSize(new java.awt.Dimension(1000, 700));
      setResizable(false);

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel1.setPreferredSize(new java.awt.Dimension(400, 344));

      jLabel5.setForeground(java.awt.Color.blue);
      jLabel5.setText("<html><u>wow.metoffice.gov.uk</u></html>");
      jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            WOW_link_mouseClicked(evt);
         }
         public void mouseEntered(java.awt.event.MouseEvent evt) {
            WOW_link_mouseEntered(evt);
         }
         public void mouseExited(java.awt.event.MouseEvent evt) {
            WOW_link_mouseExited(evt);
         }
      });

      jCheckBox1.setText("publish on WOW, see:");
      jCheckBox1.setActionCommand("publish on WOW");

      jLabel1.setText("WOW site ID");

      jLabel2.setText("WOW pin");

      jLabel6.setText("reporting interval");

      jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("5 minutes (barometer connected)");

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("10 minutes (barometer connected)");

      buttonGroup1.add(jRadioButton3);
      jRadioButton3.setText("15 minutes (barometer connected)");

      buttonGroup1.add(jRadioButton4);
      jRadioButton4.setText("60 minutes (barometer connected)");

      buttonGroup1.add(jRadioButton5);
      jRadioButton5.setText("if the obs is send (manual observations)");
      jRadioButton5.setEnabled(false);

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jRadioButton2)
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton1)
                     .addComponent(jRadioButton3)
                     .addComponent(jRadioButton4)
                     .addComponent(jRadioButton5))
                  .addGap(0, 131, Short.MAX_VALUE))))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
      );

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel6)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addGap(63, 63, 63)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jCheckBox1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(jLabel2)
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(42, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jCheckBox1)
               .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(37, 37, 37)
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel2.getAccessibleContext().setAccessibleName("");

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel3.setPreferredSize(new java.awt.Dimension(400, 383));

      jCheckBox2.setText("report pressure automatically (barometer* + GPS)");
      jCheckBox2.setActionCommand("");

      jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
      jPanel4.setPreferredSize(new java.awt.Dimension(340, 93));

      buttonGroup2.add(jRadioButton6);
      jRadioButton6.setText("1 hour");

      buttonGroup2.add(jRadioButton7);
      jRadioButton7.setText("3 hours (intermediate and main hours)");

      buttonGroup2.add(jRadioButton8);
      jRadioButton8.setText("6 hours (main hours)");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton6)
               .addComponent(jRadioButton7)
               .addComponent(jRadioButton8))
            .addContainerGap(121, Short.MAX_VALUE))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton8)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(47, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jCheckBox2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel10.setText("WOW (Weather Observation Website)");

      jLabel11.setText("APR (Automated Pressure Reports)");

      jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel8.setText("average draught* (metres, e.g. 12.6)");

      jLabel13.setText("[0.0 - 50.0]");

      jLabel9.setText("barometer instrument correction** (hPa, e.g. -0.1)");

      jLabel12.setText("[-4.0 - 4.0]");

      jLabel14.setText("* average draught over the years ");

      jLabel15.setText("** average over the whole calibration range (this is NOT the height corr)");

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel9)
               .addComponent(jLabel8))
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel12)
               .addComponent(jLabel13))
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel8)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel13)
               .addComponent(jLabel14))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel9)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel12)
               .addComponent(jLabel15))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel16.setText("For WOW, APR and AWSR");

      jLabel3.setForeground(java.awt.Color.blue);
      jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel3.setText("--- minimise TurboWin+ after WOW or APR or AWSR settings are set ---");

      jLabel4.setForeground(java.awt.Color.blue);
      jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel4.setText("--- after a restart of this computer you have to restart TurboWin+ to continue automatic reporting ---");

      jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

      buttonGroup3.add(jRadioButton9);
      jRadioButton9.setText("1 hour");

      buttonGroup3.add(jRadioButton10);
      jRadioButton10.setText("3 hours (intermediate and main hours)");

      buttonGroup3.add(jRadioButton11);
      jRadioButton11.setText("6 hours (main hours)");

      javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
      jPanel7.setLayout(jPanel7Layout);
      jPanel7Layout.setHorizontalGroup(
         jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel7Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addComponent(jRadioButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jRadioButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
               .addComponent(jRadioButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(26, Short.MAX_VALUE))
      );
      jPanel7Layout.setVerticalGroup(
         jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel7Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jRadioButton11)
            .addContainerGap())
      );

      jCheckBox3.setText("report all measured data automatically (AWS connected)");

      javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
      jPanel6.setLayout(jPanel6Layout);
      jPanel6Layout.setHorizontalGroup(
         jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel6Layout.setVerticalGroup(
         jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jCheckBox3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      jLabel7.setText("AWSR (Automatic Weather Station Reports)");

      jLabel17.setText("* recommended: static head or flexible tube to measure outside pressure");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jSeparator1)
                     .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addGroup(layout.createSequentialGroup()
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGap(52, 52, 52)
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                 .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                                 .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                 .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                           .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))
                  .addGap(0, 51, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel10)
               .addComponent(jLabel11))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel17)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                  .addComponent(jLabel7)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
            .addGap(23, 23, 23)
            .addComponent(jLabel16)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(26, 26, 26)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel4)
            .addGap(18, 18, 18)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {
      // initialise
      jCheckBox1.setSelected(false);
      jCheckBox2.setSelected(false);
      jCheckBox3.setSelected(false);
      jRadioButton1.setSelected(false);
      jRadioButton2.setSelected(false);
      jRadioButton3.setSelected(false);
      jRadioButton4.setSelected(false);
      jRadioButton5.setSelected(false);
      jRadioButton6.setSelected(false);
      jRadioButton7.setSelected(false);
      jRadioButton8.setSelected(false);
      jRadioButton9.setSelected(false);
      jRadioButton10.setSelected(false);
      jRadioButton11.setSelected(false);
      jTextField1.setText("");
      jTextField2.setText("");
      jTextField4.setText("");
      jTextField5.setText("");
      
      
      // put back earlier inserted values (if applicable)
      //
      
      // publish on WOW
      if (main.WOW == true) 
      {
         jCheckBox1.setSelected(true);
      } 
       
      // WOW site ID
      jTextField1.setText(main.WOW_site_id);
       
      // WOW pin
      jTextField2.setText(main.WOW_site_pin); 
       
      // WOW reporting(upload)interval
      if (main.WOW_reporting_interval.equals("5"))
      {
         jRadioButton1.setSelected(true);
      }
      else if (main.WOW_reporting_interval.equals("10"))
      {
         jRadioButton2.setSelected(true);
      }
      if (main.WOW_reporting_interval.equals("15"))
      {
         jRadioButton3.setSelected(true);
      }
      if (main.WOW_reporting_interval.equals("60"))
      {
         jRadioButton4.setSelected(true);
      }
      if (main.WOW_reporting_interval.equals(main.WOW_REPORTING_INTERVAL_MANUAL))
      {
         jRadioButton5.setSelected(true);
      }       
      
      // average height barometer above sea level
      //jTextField3.setText(main.WOW_average_height_barometer);
      
      
      // APR (Automated Pressure Reports)
      if (main.APR == true) 
      {
         jCheckBox2.setSelected(true);
      } 
      
      // APR reporting(upload)interval
      if (main.APR_reporting_interval.equals("1"))
      {
         jRadioButton6.setSelected(true);
      }
      else if (main.APR_reporting_interval.equals("3"))
      {
         jRadioButton7.setSelected(true);
      }
      if (main.APR_reporting_interval.equals("6"))
      {
         jRadioButton8.setSelected(true);
      }
      

      // AWSR (Automatic Weather Station Reports)
      if (main.AWSR == true) 
      {
         jCheckBox3.setSelected(true);
      } 

      // AWSR reporting(upload)interval
      if (main.AWSR_reporting_interval.equals("1"))
      {
         jRadioButton9.setSelected(true);
      }
      else if (main.AWSR_reporting_interval.equals("3"))
      {
         jRadioButton10.setSelected(true);
      }
      if (main.AWSR_reporting_interval.equals("6"))
      {
         jRadioButton11.setSelected(true);
      }
   
      
      // common WOW and APR and AWSR average draught
      jTextField4.setText(main.WOW_APR_average_draught);
      
      // common WOW and APR and AWSR barometer instrument correction (note: can also be set in the barometer reading input screen)
      jTextField5.setText(main.barometer_instrument_correction);
      
      
      // disable AWSR in case of EUCAWS connected
      if (main.RS232_connection_mode == 3)         // EUCAWS connected
      {
         // reset
         jCheckBox3.setSelected(false);
         jRadioButton9.setSelected(false);
         jRadioButton10.setSelected(false);
         jRadioButton11.setSelected(false);

         // disable
         jCheckBox3.setEnabled(false);
         jRadioButton9.setEnabled(false);
         jRadioButton10.setEnabled(false);
         jRadioButton11.setEnabled(false);
         jLabel7.setEnabled(false);
      } // if (main.RS232_connection_mode == 3)
      
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void WOW_link_mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WOW_link_mouseClicked
      // TODO add your handling code here:
      new SwingWorker<Void, Void>()
      {
         @Override
         protected Void doInBackground() throws Exception
         {
            Desktop desktop = null;

            // Before more Desktop API is used, first check
            // whether the API is supported by this particular
            // virtual machine (VM) on this particular host.
            if (Desktop.isDesktopSupported())
            {
               desktop = Desktop.getDesktop();
               URI uri = null;
               try
               {
                  String http_adres = "http://wow.metoffice.gov.uk";  
                  uri = new URI(http_adres);
                  desktop.browse(uri);
               }
               catch(IOException | URISyntaxException ioe) { }
            } // if (Desktop.isDesktopSupported())
            else
            {
               JOptionPane.showMessageDialog(null, "Error invoking default web browser (-Desktop-method not supported on this computer system)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            } // else

            return null;

         } // protected Void doInBackground() throws Exception
      }.execute(); // new SwingWorker<Void, Void>()      
   }//GEN-LAST:event_WOW_link_mouseClicked

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
      // TODO add your handling code here:
      
      // initialisation
      checks_ok = true;
      
      
      ////////////// reading the inserted/checked values ////////////
      //
      
      // WOW publish? (boolean true/false
      main.WOW = jCheckBox1.isSelected() == true;
      
      // WOW site ID
      main.WOW_site_id  = jTextField1.getText().trim();
      
      // WOW pin
      main.WOW_site_pin = jTextField2.getText().trim();
      
      // WOW upload interval
      if (jRadioButton1.isSelected())
      {
         main.WOW_reporting_interval = "5";
      }
      else if (jRadioButton2.isSelected())
      {
         main.WOW_reporting_interval = "10";
      }   
      else if (jRadioButton3.isSelected())
      {
         main.WOW_reporting_interval = "15";
      }        
      else if (jRadioButton4.isSelected())
      {
         main.WOW_reporting_interval = "60";
      }        
      else if (jRadioButton5.isSelected())     // if manual obs is send
      {
         main.WOW_reporting_interval = main.WOW_REPORTING_INTERVAL_MANUAL;   // manual
      } 
      else
      {
         main.WOW_reporting_interval = "";
      }   
         
      // WOW average height barometer above sea level
      //main.WOW_average_height_barometer = jTextField3.getText().trim();  
      
      
      // APR reporting
      main.APR = jCheckBox2.isSelected() == true;
              
      // APR upload interval
      if (jRadioButton6.isSelected())
      {
         main.APR_reporting_interval = "1";
      }
      else if (jRadioButton7.isSelected())
      {
         main.APR_reporting_interval = "3";
      }   
      else if (jRadioButton8.isSelected())
      {
         main.APR_reporting_interval = "6";
      }   
      

      // AWSR reporting
      main.AWSR = jCheckBox3.isSelected() == true;
              
      // AWSR upload interval
      if (jRadioButton9.isSelected())
      {
         main.AWSR_reporting_interval = "1";
      }
      else if (jRadioButton10.isSelected())
      {
         main.AWSR_reporting_interval = "3";
      }   
      else if (jRadioButton11.isSelected())
      {
         main.AWSR_reporting_interval = "6";
      }   

      
      // common WOW and APR and AWSR average draught
      main.WOW_APR_average_draught = jTextField4.getText().trim(); 
      
      // common WOW and APR and AWSR barometeter instrument correction (note this can also be set in the barometer reading input page)
      main.barometer_instrument_correction = jTextField5.getText().trim(); 
      
      
      ///////////// checking WOW inserted data, but only if WOW publication is requested /////////
      //
      if (main.WOW == true)          // so WOW publication requested
      {
         // WOW site ID
         if (checks_ok && (main.WOW_site_id.length() < 2 || main.WOW_site_id.length() > 20))
         {
            JOptionPane.showMessageDialog(null, "WOW site ID not valid", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_WOW_Vars();     // checks_ok will be set in this function also                           
         }
         
         // WOW site PIN
         if (checks_ok && (main.WOW_site_pin.length() < 2 || main.WOW_site_pin.length() > 20))
         {
            JOptionPane.showMessageDialog(null, "WOW site pin not valid", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_WOW_Vars();     // checks_ok will be set in this function also                           
         }
         
         // WOW reporting interval
         if (checks_ok && main.WOW_reporting_interval.equals(""))
         {
            JOptionPane.showMessageDialog(null, "WOW reporting interval not selected", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_WOW_Vars();     // checks_ok will be set in this function also                           
         }
         
        
      } // if (main.WOW == true)
      
      
      ///////////////// checking APR inserted data ////////////
      //
      if ((main.APR == true) && checks_ok)          // so APR reporting requested
      {
         // APR reporting interval
         if (checks_ok && main.APR_reporting_interval.equals(""))
         {
            JOptionPane.showMessageDialog(null, "APR reporting interval not selected", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_APR_Vars();     // checks_ok will be set in this function also                           
         }
      } // if ((main.APR == true) && checks_ok)  
      

      ///////////////// checking AWSR inserted data ////////////
      //
      if ((main.AWSR == true) && checks_ok)          // so AWS reporting requested
      {
         // AWSR reporting interval
         if (checks_ok && main.AWSR_reporting_interval.equals(""))
         {
            JOptionPane.showMessageDialog(null, "AWSR reporting interval not selected", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_AWSR_Vars();                     // checks_ok will be set in this function also                           
         }
      } // if ((main.APR == true) && checks_ok)  

      
      /////////////// APR and AWSR can't be checked both at the same time ////////
      if ((main.APR == true && main.AWSR == true) && checks_ok) 
      {
         JOptionPane.showMessageDialog(null, "APR AND AWSR reporting can't be checked both at one time", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         Reset_All_APR_Vars();                      // checks_ok will be set in this function also      
         Reset_All_AWSR_Vars();                     // checks_ok will be set in this function also
      }
      
      
      //////////// checking common WOW-APR-AWSR inserted data //////////////
      //
      if ((main.WOW || main.APR) && checks_ok)
      {
         // WOW and APR and AWSR draught
         try
         {
            double double_WOW_APR_average_draught = Double.parseDouble(main.WOW_APR_average_draught);
               
            if (main.WOW_APR_average_draught.equals("") || !(double_WOW_APR_average_draught >= 0 && double_WOW_APR_average_draught <= 50))
            {
               JOptionPane.showMessageDialog(null, "average draught not in range 0.0 - 50.0", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               Reset_All_common_WOW_APR_AWSR_Vars();     // checks_ok will be set in this function also 
            }
         }
         catch (NumberFormatException e) 
         {
            JOptionPane.showMessageDialog(null, "average draught not in range 0.0 - 50.0", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            Reset_All_common_WOW_APR_AWSR_Vars();     // checks_ok will be set in this function also  
         }    
         
         ////////// WOW and APR and AWSR barometer ic /////////
         if (checks_ok)
         {
            try
            {
               double double_barometer_instrument_correction = Double.parseDouble(main.barometer_instrument_correction.trim());
             
               if (main.barometer_instrument_correction.equals("") || !(double_barometer_instrument_correction >= -4.0 || double_barometer_instrument_correction <= 4.0))
               {
                  JOptionPane.showMessageDialog(null, "barometer instrument correction not in range -4.0 - 4.0", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  Reset_All_common_WOW_APR_AWSR_Vars();     // checks_ok will be set in this function also  
               }             
            }
            catch (NumberFormatException e) 
            { 
               JOptionPane.showMessageDialog(null, "barometer_instrument_correction not in range -4.0 - 4.0", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               Reset_All_common_WOW_APR_AWSR_Vars();     // checks_ok will be set in this function also  
            }  
         } // if (checks_ok)
      } // if ((main.WOW || main.APR) && checks_ok)
      
      
      //////////// checking upload (APR)URL (can't be set on this page but useful to remind the observer //////////////
      //
      if (checks_ok)
      {
         if (main.APR && main.upload_URL.equals(""))
         {
            // it's only a reminder, so never resetting var's
            JOptionPane.showMessageDialog(null, "Do not forget to insert the upload URL (select: Maintenance -> Server settings)", main.APPLICATION_NAME + " reminder", JOptionPane.INFORMATION_MESSAGE);
         }
      } // if (checks_ok)
      
      
      ///////////// save the new settings and close the input screen /////////////
      //
      if (checks_ok)
      {
         if (main.offline_mode_via_cmd == true)     // after installation as standalone program this will always be the case
         {
            main.schrijf_configuratie_regels();          
         }
         else // so offline_via_jnlp mode or online (webstart) mode
         {
            main.set_muffin();
            main.schrijf_configuratie_regels();
         }   

         // message 
         String info = "Changes will take effect inmediatelly. Not necessary to restart";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);            
            
         // close this WOW/APR settings input page 
         setVisible(false);
         dispose();         
         
         // extra message boxes!!
         if (main.WOW)
         {
            WOW_additional_requirements_checks();
         }
         if (main.APR)
         {
            APR_additional_requirements_checks();
         }
         if (main.AWSR)
         {
            AWSR_additional_requirements_checks();
         }         
      } // if (checks_ok)
      
   }//GEN-LAST:event_OK_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void WOW_additional_requirements_checks()
   {
      // called from: OK_button_actionPerformed() [WOW_APR_settings.java]
      //
      // NB see also: RS232_check_WOW_settings() [main_RS232_RS422.java]
      
      String info = "";
   
      
      // PTB220 or PTB330 or MintakeDuo connected?
      if (main.RS232_connection_mode == 0 || main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9)   // 0 = no instrument connected, 3 or 9 = AWS connected
      {
         info = "[WOW] Barometer connection unknown (select: Maintenance -> Serial/USB/LAN connection settings)"; 
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void APR_additional_requirements_checks()
   {
      // called from: OK_button_actionPerformed() [WOW_APR_settings.java]
      //
      // NB see also: RS232_check_APR_settings() [main_RS232_RS422.java]
      
      String info = "";
      
      
      // Barometer connected?
      if (main.RS232_connection_mode == 0 || main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9)   // 0 = no instrument connected, 3 or 9 = AWS connected
      {
         info = "[APR] Barometer connection unknown (select: Maintenance -> Serial/USB/LAN connection settings)"; 
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }        
           
      // GPS connected?      
      if (main.RS232_GPS_connection_mode == 0)                                  // 0 no GPS connected
      {
         info = "[APR] GPS connection unknown (select: Maintenance -> Serial/USB/LAN connection settings)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
   
      // call sign
      if (main.call_sign.trim().equals("") == true || main.call_sign.trim().length() < 2)
      {
         info = "[APR] Call sign unknown (select: Maintenance -> Station data)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
   
      // height barometer
      if (main.barometer_above_sll.trim().equals("") == true || main.barometer_above_sll.trim().length() < 1)
      {
         info = "[APR] Height of the barometer above SLL unknown (select: Maintenance -> Station data)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
      if (main.keel_sll.trim().equals("") == true || main.keel_sll.trim().length() < 1)
      {
         info = "[APR] Distance of bottom of the keel to SLL unknown (select: Maintenance -> Station data)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }

      // logs folder        
      if (main.logs_dir.trim().equals("") == true || main.logs_dir.trim().length() < 2)
      {
         info = "[APR] Logs folder unknown (select: Maintenance -> Log files settings)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
   
      // obs format
      if (main.obs_format.equals(main.FORMAT_101) == false)
      {
         info = "[APR] In APR mode the obs format must be '101' (select: Maintenance -> Obs format setting)"; 
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }            
   
   }
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void AWSR_additional_requirements_checks()
   {
      // called from: OK_button_actionPerformed() [WOW_APR_settings.java]
      //
      // NB see also: RS422_check_AWSR_settings() [main_RS232_RS422.java]
      
      String info = "";
      
      
      // AWS connected? (not for EUCAWS)
      if (main.RS232_connection_mode != 9 && main.RS232_connection_mode != 10)   // 9 or 10 = OMC 140 AWS connected
      {
         info = "[AWSR] AWS connection unknown (select: Maintenance -> Serial/USB/LAN connection settings)"; 
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }        
           
      // GPS connected?      
      //if (main.RS232_GPS_connection_mode == 0)                                  // 0 no GPS connected
      //{
      //   info = "[AWSR] GPS connection unknown (select: Maintenance -> Serial/USB/LAN connection settings)";
      //   JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      //}
   
      // call sign
      if (main.call_sign.trim().equals("") == true || main.call_sign.trim().length() < 2)
      {
         info = "[AWSR] Call sign unknown (select: Maintenance -> Station data)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
   
      // height barometer
      if (main.barometer_above_sll.trim().equals("") == true || main.barometer_above_sll.trim().length() < 1)
      {
         info = "[AWSR] Height of the barometer above SLL unknown (select: Maintenance -> Station data)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
      if (main.keel_sll.trim().equals("") == true || main.keel_sll.trim().length() < 1)
      {
         info = "[AWSR] Distance of bottom of the keel to SLL unknown (select: Maintenance -> Station data)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }

      // logs folder        
      if (main.logs_dir.trim().equals("") == true || main.logs_dir.trim().length() < 2)
      {
         info = "[AWSR] Logs folder unknown (select: Maintenance -> Log files settings)";
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }
   
      // obs format
      //if (main.obs_format.equals(main.FORMAT_101) == false)
      //{
      //   info = "[AWSR] In AWSR mode the obs format must be '101' (select: Maintenance -> Obs format setting)"; 
      //   JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      //}            
      if (main.obs_format.equals(main.FORMAT_AWS) == false)
      {
         // NB AWS mode is always rporting with format101
         info = "[AWSR] In AWSR mode the obs format must be \"AWS connected\" (select: Maintenance -> Obs format setting)"; 
         JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " please do not forget", JOptionPane.INFORMATION_MESSAGE);
      }            
   
   
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void Reset_All_WOW_Vars()
   {
      checks_ok                           = false;
      
      main.WOW                            = false;      // yes or no publish on WOW (WeatherObservationsWebsite)
      main.WOW_site_id                    = "";
      main.WOW_site_pin                   = "";
      main.WOW_reporting_interval         = "";
      //main.WOW_average_height_barometer   = "";   
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void Reset_All_APR_Vars()
   {
      checks_ok                           = false;
      
      main.APR                            = false;      // yes or no send automated pressure reports
      main.APR_reporting_interval         = "";
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void Reset_All_AWSR_Vars()
   {
      checks_ok                            = false;
      
      main.AWSR                            = false;      // yes or no send automated AWS reports (not for EuCAWS)
      main.AWSR_reporting_interval         = "";
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void Reset_All_common_WOW_APR_AWSR_Vars()
   {
      checks_ok                            = false;
      
      main.WOW_APR_average_draught         = "";         // NB also used by AWSR  
      main.barometer_instrument_correction = "";
   }
 
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void WOW_link_mouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WOW_link_mouseEntered
      // TODO add your handling code here:
      
      setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
   }//GEN-LAST:event_WOW_link_mouseEntered

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void WOW_link_mouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WOW_link_mouseExited
      // TODO add your handling code here:
      
      setCursor(Cursor.getDefaultCursor());
   }//GEN-LAST:event_WOW_link_mouseExited

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
      // TODO add your handling code here:
      
      setVisible(false);
      dispose();      
   }//GEN-LAST:event_Cancel_button_actionPerformed

   
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(WOW_APR_settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>
      //</editor-fold>
      
        //</editor-fold>
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new WOW_APR_settings().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JCheckBox jCheckBox1;
   private javax.swing.JCheckBox jCheckBox2;
   private javax.swing.JCheckBox jCheckBox3;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   private javax.swing.JPanel jPanel6;
   private javax.swing.JPanel jPanel7;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton10;
   private javax.swing.JRadioButton jRadioButton11;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JRadioButton jRadioButton7;
   private javax.swing.JRadioButton jRadioButton8;
   private javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField4;
   private javax.swing.JTextField jTextField5;
   // End of variables declaration//GEN-END:variables


   private boolean checks_ok                                   = true;
}
