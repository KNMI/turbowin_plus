
import java.awt.Color;
import javax.swing.JOptionPane;

/*
 * mytemp.java
 *
 * Created on 4 juni 2008, 6:46
 */



/**
 *
 * @author  Martin
 */
public class mytemp extends javax.swing.JFrame {
    
    /** Creates new form mytemp */
    public mytemp() {
        initComponents();
        initComponents2();
        initSynopparameters();
        setLocation(main.x_pos_frame, main.y_pos_frame);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel1 = new javax.swing.JPanel();
      jPanel2 = new javax.swing.JPanel();
      jLabel4 = new javax.swing.JLabel();
      jTextField2 = new javax.swing.JTextField();
      jLabel5 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jPanel4 = new javax.swing.JPanel();
      jLabel3 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jLabel1 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      jPanel3 = new javax.swing.JPanel();
      jLabel6 = new javax.swing.JLabel();
      jTextField3 = new javax.swing.JTextField();
      jLabel7 = new javax.swing.JLabel();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jRadioButton8 = new javax.swing.JRadioButton();
      jLabel8 = new javax.swing.JLabel();
      jRadioButton9 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jRadioButton11 = new javax.swing.JRadioButton();
      jRadioButton12 = new javax.swing.JRadioButton();
      jButton3 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Temperatures");
      setMinimumSize(new java.awt.Dimension(800, 600));
      setResizable(false);

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionperformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

      jLabel4.setText("wet-bulb (°C)");

      jLabel5.setText("[-50.0 - 50.0]");

      jLabel9.setText("state");

      buttonGroup2.add(jRadioButton3);
      jRadioButton3.setText("wet-bulb not frozen");
      jRadioButton3.setFocusable(false);

      buttonGroup2.add(jRadioButton4);
      jRadioButton4.setText("frozen wet-bulb");
      jRadioButton4.setFocusable(false);

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jLabel4)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel5))
               .addComponent(jLabel9)
               .addComponent(jRadioButton4)
               .addComponent(jRadioButton3))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
            .addComponent(jLabel9)
            .addGap(5, 5, 5)
            .addComponent(jRadioButton3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton4)
            .addContainerGap())
      );

      jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

      jLabel3.setText("exposure (Maint. --> Station data)");
      jLabel3.setEnabled(false);

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("sling psychrometer");
      jRadioButton1.setEnabled(false);

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("marine screen");
      jRadioButton2.setEnabled(false);

      jLabel1.setText("air (°C)");

      jLabel2.setText("[-50.0 - 60.0]");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel4Layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel2))
               .addComponent(jRadioButton1)
               .addComponent(jRadioButton2)
               .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton2)
            .addContainerGap())
      );

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel6.setText("sea water (°C)");

      jLabel7.setText("[-2.0 - 50.0]");

      buttonGroup3.add(jRadioButton5);
      jRadioButton5.setText("intake");
      jRadioButton5.setEnabled(false);

      buttonGroup3.add(jRadioButton6);
      jRadioButton6.setText("bucket");
      jRadioButton6.setEnabled(false);

      buttonGroup3.add(jRadioButton7);
      jRadioButton7.setText("hull contact sensor");
      jRadioButton7.setEnabled(false);

      buttonGroup3.add(jRadioButton8);
      jRadioButton8.setText("other");
      jRadioButton8.setEnabled(false);

      jLabel8.setText("exposure (Maint. --> Station data)");
      jLabel8.setEnabled(false);

      buttonGroup3.add(jRadioButton9);
      jRadioButton9.setText("trailing thermistor");
      jRadioButton9.setEnabled(false);

      buttonGroup3.add(jRadioButton10);
      jRadioButton10.setText("\"through hull\" sensor");
      jRadioButton10.setEnabled(false);

      buttonGroup3.add(jRadioButton11);
      jRadioButton11.setText("radiation thermometer");
      jRadioButton11.setEnabled(false);

      buttonGroup3.add(jRadioButton12);
      jRadioButton12.setText("bait tanks thermometer");
      jRadioButton12.setEnabled(false);

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton5)
               .addComponent(jRadioButton6)
               .addComponent(jRadioButton7)
               .addComponent(jRadioButton9)
               .addComponent(jRadioButton10)
               .addComponent(jRadioButton11)
               .addComponent(jRadioButton12)
               .addComponent(jRadioButton8)
               .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addComponent(jLabel6)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel7)))
            .addContainerGap())
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel6)
               .addComponent(jLabel7)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton11)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton12)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton8)
            .addContainerGap())
      );

      jButton3.setText("Internet");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_actionPerformed(evt);
         }
      });

      jButton4.setText("Back");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton5.setText("Stop");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(38, 38, 38)
                  .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1)))
            .addContainerGap())
         .addGroup(layout.createSequentialGroup()
            .addGap(160, 160, 160)
            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(108, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(112, 112, 112)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents



/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private void initComponents2()
{
   // hide Back/Stop buttons if not in next_screen_mode
   if (main.in_next_sequence == false)
   {
      jButton4.setEnabled(false);                         // back button
      jButton5.setEnabled(false);                         // stop button
   }


   if (main.offline_mode == true)
   {
      jButton3.setText("Help");
   }

   
   // if in AWS collecting data mode the air temp was measured by AWS then disable the option to insert the air temp manually
   if (main.air_temp_from_AWS_present == true)
   {
      jTextField1.setForeground(main.input_color_from_aws);
      jTextField1.setEditable(false);
   }
   else
   {
      jTextField1.setForeground(main.input_color_from_observer);
      jTextField1.setEditable(true);
   }
   
   
   // if in AWS collecting data mode the relative humidity was measured by AWS then disable the option to insert the wet bulb temp manually
   if (main.rh_from_AWS_present == true)
   {
      jTextField2.setText("");                   // wet bulb input field always blank if rh is present via AWS measurements
      jTextField2.setForeground(main.input_color_from_aws);
      jTextField2.setEditable(false);
   }
   else
   {
      jTextField2.setForeground(main.input_color_from_observer);
      jTextField2.setEditable(true);
   }
   
   
   // if in AWS collecting data mode the SST was measured by AWS then disable the option to insert the SST manually
   if (main.SST_from_AWS_present == true)
   {
      jTextField3.setForeground(main.input_color_from_aws);
      jTextField3.setEditable(false);
   }
   else
   {
      jTextField3.setForeground(main.input_color_from_observer);
      jTextField3.setEditable(true);
   }
   
}




/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private double SVP(double temp)
{
   //double f_p = 1.0016 + 0.00000315 * SP - 0.074 / SP;
   //JOptionPane.showMessageDialog(null, "f_p zonder haakjes = " + f_p, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
   //
   //f_p = 1.0016 + (0.00000315 * SP) - (0.074 / SP);
   //JOptionPane.showMessageDialog(null, "f_p met haakjes = " + f_p, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
   //
   // NB answer for both above: 1.0047187
   
   double ew = f_p * c1 * Math.exp(c2 * temp / (c3 + temp));
   
   
   return ew;
}


/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private double SVP_ijs(double temp)
{
   double ei = f_p * c1_ijs * Math.exp(c2_ijs * temp / (c3_ijs + temp));
   
   
   return ei;
}


/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private void Bereken_Dauwpunt_en_RV()
{
   double A_water;
   double A_ice;


   /* uk marine screens werken voor het berekenen van dew point niet met ijs ja dan nee aan natte bol      */
   /* als Twet < 0 dan moet bij Marine Screens altijd de boven ijs formule gebruikt worden,                */
   /* ongeacht ze al of niet bevroren natte bol hebben gemeld (zie: tabellen in Marine Observers Handbook) */
   
   /* translation: */
   /* UK Marine Screens do not use the info yes or no ice on wet bulb to calculate dew point      */
   /* If Twet < 0 then always above the ice formula must be used                                  */
   /* whether or not they have reported frozen wet bulb (see tables in Marine Observers Handbook) */
  
   if ( (main.air_temp_exposure.equals(main.MARINE_SCREEN) == true) && (double_wet_bulb_temp < 0.0) )
      wet_bulb_frozen = true;                     // artificial/trick; to become the right formula


   /* voor sling psychrometers wordt er wel van uitgegaan dat een Twet < 0 wel met ijs maar ook */
   /* zonder ijs aan de natte bol kan voorkomen; ingang is melding van de waarnemer             */
   /* al dan niet bevroren natte bol (zie: Handleiding voor het verrichten van meteorologische  */
   /* waarnemingen op zee)                                                                      */
   
   /* translation: */
   /* for sling psychrometers it is assumed that if Twet < 0 this is either with ice  */
   /* or no ice on the wet bulb, as has been reported by the observer                 */
   /* whether or not frozen wet bulb (see: Guide for the provision of meteorological  */
   /* observations at sea)                                                            */
   
   
   /* air pressure  */                                                                             
   // NB if available (earlier inserted bt the observer) use the actual inserted MSL air pressure otherwise the standard pressure (SP)
   
   // initialisation
   pressure = SP;
   f_p      = PRESSURE_DEPENDENCY;
   
   if (mybarometer.pressure_msl_corrected.equals("") == false && mybarometer.pressure_msl_corrected != null)
   {
      hulp_double_pressure_msl_corrected = Double.parseDouble(mybarometer.pressure_msl_corrected);
      if (hulp_double_pressure_msl_corrected > 900.0 && hulp_double_pressure_msl_corrected < 1100.0)
      {
         pressure = hulp_double_pressure_msl_corrected;
         f_p = 1.0016 + 0.00000315 * pressure - 0.074 / pressure;
      }
   }
   

   /* ABOVE WATER */
   if (wet_bulb_frozen == false)
   {
      // determine psychrometric coefficient (A)
      if (main.air_temp_exposure.equals(main.MARINE_SCREEN) == true)               // num_Twet_total is hier dus altijd >= 0 !!
         A_water = A_SCREEN_WATER;
      else
         A_water = 0.000653 * (1 + 0.000944 * double_wet_bulb_temp);


      double_rv = (SVP(double_wet_bulb_temp) - A_water * pressure * (double_air_temp - double_wet_bulb_temp)) / SVP(double_air_temp);
      // rh not in in %, to achieve this * 100

      // relative humity must be between 1 - 100 %
      if (double_rv >= 0.01 && double_rv <= 1.0)
      {
	      double term = Math.log(double_rv) + (c2 * double_air_temp / (c3 + double_air_temp));
	      double_dew_point = c3 * term / (c2 - term);
      }
      else // so (num_rv < 0.01 or num_rv > 1.0)
      {
	      double_dew_point = main.INVALID;                             // make invalid
	      double_rv        = main.INVALID;                             // make invalid
      }
   } //if (wet_bulb_frozen == false)

   /* ABOVE ICE */
   else if (wet_bulb_frozen = true)
   {
      // determine psychrometric coefficient (A)
      if (main.air_temp_exposure.equals(main.MARINE_SCREEN) == true)
         A_ice = A_SCREEN_ICE;
      else
         A_ice = A_SLING_ICE;


      double_rv = (SVP_ijs(double_wet_bulb_temp) - A_ice * pressure * (double_air_temp - double_wet_bulb_temp)) / SVP(double_air_temp);

      if (double_rv >= 0.01 && double_rv <= 1.0)
      {
	      double term = Math.log(double_rv) + (c2 * double_air_temp / (c3 + double_air_temp));
	      double_dew_point = c3 * term / (c2 - term);
      }
      else // so (num_rv < 0.01 of num_rv > 1.0)
      {
         double_dew_point = main.INVALID;                           // make invalid
	      double_rv        = main.INVALID;                           // make invalid
      }
   } // else (dus ijs aan de nattebol)
}
    

    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void OK_button_actionperformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionperformed
       // TODO add your handling code here:
       
       
       if ( (main.air_temp_from_AWS_present == false) || (main.rh_from_AWS_present == false) || (main.SST_from_AWS_present == false) )
       {
       /* initialisation  */
       Reset_All_Temperatures_Vars();                          // in this function: checks_ok = false
       
       /* initialisation  */
       checks_ok = true;                                       // NB was set to false in Reset_All_Temperatures_Vars();
       
       /*
       ////// get text from inserted fields and retrieve other inserted/checked values
       */
       air_temp       = jTextField1.getText().trim(); 
       wet_bulb_temp  = jTextField2.getText().trim();
       sea_water_temp = jTextField3.getText().trim();
       
       
       // NB So wet-bulb state if nothing checked/ticked assume wet-bulb not frozen
       if (jRadioButton4.isSelected() == true)
       {
          wet_bulb_frozen = true;
       }
       else 
       {
          wet_bulb_frozen = false;
       }
       
       
       try 
       {
          double_air_temp = Double.parseDouble(air_temp.trim());
       }
       catch (NumberFormatException e){/* ... */}

       try 
       {
          double_wet_bulb_temp = Double.parseDouble(wet_bulb_temp.trim());
       }
       catch (NumberFormatException e){/* ... */}
       
       try 
       {
          double_sea_water_temp = Double.parseDouble(sea_water_temp.trim());
       }
       catch (NumberFormatException e){/* ... */}
      
       
       /*
       //////////// stand-alone checks
       */
       
       // air-temp limits
       if ((air_temp.trim().length() > 0) && 
           (double_air_temp < -50.0 || double_air_temp > 60.0))
       {
          JOptionPane.showMessageDialog(null, "Air temperature must be in range -50.0 - 60.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Temperatures_Vars();
       }

       // wet-bulb limits
       else if ((wet_bulb_temp.trim().length() > 0) && 
           (double_wet_bulb_temp < -50.0 || double_wet_bulb_temp > 50.0))
       {
          JOptionPane.showMessageDialog(null, "Wet-bulb temperature must be in range -50.0 - 50.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Temperatures_Vars();
       }
       
       // sea water temp limits
       else if ((sea_water_temp.trim().length() > 0) && 
           (double_sea_water_temp < -50.0 || double_sea_water_temp > 50.0))
       {
          JOptionPane.showMessageDialog(null, "Sea water temperature must be in range -2.0 - 50.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Temperatures_Vars();
       }
        
       
       /*
       //////////// consistency checks
       */
       if (checks_ok == true)
       {    
          // air temp versus wet-bulb temp
          if ((air_temp.trim().length() > 0) && (wet_bulb_temp.trim().length() > 0) &&
              (double_air_temp < double_wet_bulb_temp))
          {
             JOptionPane.showMessageDialog(null, "Air temperature must be >= wet-bulb temperature", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Temperatures_Vars();
          }
          
          // exposure air temp
          else if ((air_temp.trim().length() > 0) && 
                   (jRadioButton1.isSelected() == false) && (jRadioButton2.isSelected() == false))
          {
             JOptionPane.showMessageDialog(null, "Air temperature exposure not available (Maintenance -> Station data)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Temperatures_Vars();
          }
       
          // exposure sea temp
          else if ( (sea_water_temp.trim().length() > 0) &&
                    (jRadioButton5.isSelected() == false) && (jRadioButton6.isSelected() == false) &&
                    (jRadioButton7.isSelected() == false) && (jRadioButton8.isSelected() == false) &&
                    (jRadioButton9.isSelected() == false) && (jRadioButton10.isSelected() == false) &&
                    (jRadioButton11.isSelected() == false) && (jRadioButton12.isSelected() == false) )
          {
             JOptionPane.showMessageDialog(null, "Sea water temperature exposure not available (Maintenance -> Station data)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Temperatures_Vars();
          }
          
          // wet bulb value versus frozen wet bulb indication
          if ( (wet_bulb_temp.trim().length() > 0) && (double_wet_bulb_temp > 0) && (wet_bulb_frozen == true) )
          {
             JOptionPane.showMessageDialog(null, "Combination wet-bulb temp > 0 and state wet-bulb frozen not possible", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Temperatures_Vars();
          }
                  
       } // if (checks_ok == true)
       
       
       /*
       //////////// compute dew point
       */
       if (checks_ok == true)
       {    
          if ((checks_ok == true) && (air_temp.trim().length() > 0) && (wet_bulb_temp.trim().length() > 0) &&
              (double_air_temp >= double_wet_bulb_temp))
          {
             Bereken_Dauwpunt_en_RV();
          }
       } // if (checks_ok == true)
       
       
       /*
       ///////////// determine meteorological code figures
       */
       if (checks_ok == true)
       {   
          // air temp
          //      
          if (double_air_temp != main.INVALID)
          {
             // Sn of TTT
             if (double_air_temp < 0)
                 sn_TTT_code = "1";
              else
                 sn_TTT_code = "0";
           
              // TTT
              int num_TTT_code = (int)Math.floor(Math.abs(double_air_temp) * 10 + 0.5);
              TTT_code = Integer.toString(num_TTT_code);     // convert to string      // or (alternative): Hw_code = String.valueOf(num_Hw_code);

              // NB TTT_code always 3 characters width e.g. 027 (accomplished via construction below)
              int len = 3;
              if (TTT_code.length() < len)                                            // pad on left with zeros
                 TTT_code = "0000000000".substring(0, len - TTT_code.length()) + TTT_code;
  
              //JOptionPane.showMessageDialog(null, TTT_code, main.APPLICATION_NAME + " TTT code", JOptionPane.WARNING_MESSAGE);
          } // if (float_air_temp != INVALID)   

          
          // wet-bulb temp
          //      
          if (double_wet_bulb_temp != main.INVALID)
          {
              // sn of wet-bulb (TbTbTb)
              if (double_wet_bulb_temp < 0.0)
              {
                  if (wet_bulb_frozen == true)
                  { 
                      sn_TbTbTb_code = "2";                     // measured; iced wet bulb
                  }
                  else
                  {
                      sn_TbTbTb_code = "1";                     // measured; negative
                  }
              } // if (double_wet_bulb_temp < 0.0)
              else
              {
                  sn_TbTbTb_code = "0";                         // measured; positive or zero
              } // else
              
              // TbTbTb
              int num_TbTbTb_code = (int)Math.floor(Math.abs(double_wet_bulb_temp) * 10 + 0.5);
              TbTbTb_code = Integer.toString(num_TbTbTb_code);     // convert to string      // or (alternative): Hw_code = String.valueOf(num_Hw_code);
              
              // NB TbTbTb_code always 3 characters width e.g. 127 (accomplish via construction below)
              int len = 3;
              if (TbTbTb_code.length() < len)                                            // pad on left with zeros
                 TbTbTb_code = "0000000000".substring(0, len - TbTbTb_code.length()) + TbTbTb_code;
          } // if (float_wet_bulb != INVALID)   
      
          
          // sea water temp
          //      
          if (double_sea_water_temp != main.INVALID)
          {
              // ss of TsTsTs
              if (double_sea_water_temp < 0.0)
              {
                 if (main.sst_exposure.equals(main.INTAKE) == true)
                 {
                     ss_TsTsTs_code = "1";                        // for obs and indirect also for immt (Sn calculation)
                     immt_sst_indicator = "1";                    // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.BUCKET) == true)
                 {
                    ss_TsTsTs_code = "3";                         // for obs and indirect also for immt
                    immt_sst_indicator = "0";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.HULL_CONTACT_SENSOR) == true)
                 {
                    ss_TsTsTs_code = "5";                         // for obs and indirect also for immt
                    immt_sst_indicator = "3";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.TRAILING_THERMISTOR) == true)
                 {
                    ss_TsTsTs_code = "7";                         // trailing thermistor not for obs but for IMMT
                    immt_sst_indicator = "2";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.THROUGH_HULL_SENSOR) == true)
                 {
                    ss_TsTsTs_code = "7";                         // through hull sensor not for obs but for IMMT
                    immt_sst_indicator = "4";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.RADIATION_THERMOMETER) == true)
                 {
                    ss_TsTsTs_code = "7";                         // radiation thermometer not for obs but for IMMT
                    immt_sst_indicator = "5";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.BAIT_TANKS_THERMOMETER) == true)
                 {
                    ss_TsTsTs_code = "7";                         // bait tanks thermometer not for obs but for IMMT
                    immt_sst_indicator = "6";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.OTHER) == true)
                 {
                    ss_TsTsTs_code = "7";                         // for obs and indirect also for immt
                    immt_sst_indicator = "7";                     // only for immt log not for operational obs
                 }
              } // if (double_sea_water_temp < 0.0
              else // sst >= 0
              {
                 if (main.sst_exposure.equals(main.INTAKE) == true)
                 {
                    ss_TsTsTs_code = "0";
                    immt_sst_indicator = "1";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.BUCKET) == true)
                 {
                    ss_TsTsTs_code = "2";
                    immt_sst_indicator = "0";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.HULL_CONTACT_SENSOR) == true)
                 {
                    ss_TsTsTs_code = "4";
                    immt_sst_indicator = "3";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.TRAILING_THERMISTOR) == true)
                 {
                    ss_TsTsTs_code = "6";                         
                    immt_sst_indicator = "2";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.THROUGH_HULL_SENSOR) == true)
                 {
                    ss_TsTsTs_code = "6";                         
                    immt_sst_indicator = "4";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.RADIATION_THERMOMETER) == true)
                 {
                    ss_TsTsTs_code = "6";                         
                    immt_sst_indicator = "5";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.BAIT_TANKS_THERMOMETER) == true)
                 {
                    ss_TsTsTs_code = "6";                         
                    immt_sst_indicator = "6";                     // only for immt log not for operational obs
                 }
                 else if (main.sst_exposure.equals(main.OTHER) == true)
                 {

                    ss_TsTsTs_code = "6";
                    immt_sst_indicator = "7";                     // only for immt log not for operational obs
                 }
              } // else (sst >= 0)
                 
              // TsTsTs
              int num_TsTsTs_code = (int)Math.floor(Math.abs(double_sea_water_temp) * 10 + 0.5);
              TsTsTs_code = Integer.toString(num_TsTsTs_code);     // convert to string      // or (alternative): Hw_code = String.valueOf(num_Hw_code);
              
              // NB TsTsTs_code always 3 characters width e.g. 127 (accomplish via construction below)
              int len = 3;
              if (TsTsTs_code.length() < len)                                            // pad on left with zeros
                 TsTsTs_code = "0000000000".substring(0, len - TsTsTs_code.length()) + TsTsTs_code;
          } // if (float_sea_water != INVALID)   

          // dew point
          //      
          if (double_dew_point != main.INVALID)
          {
              // sn van dew point (TdTdTd)
              if (double_dew_point < 0.0)
                 sn_TdTdTd_code = "1";
              else
                 sn_TdTdTd_code = "0";
              
              // TdTdTd
              int num_TdTdTd_code = (int)Math.floor(Math.abs(double_dew_point) * 10 + 0.5);
              TdTdTd_code = Integer.toString(num_TdTdTd_code);     // convert to string      // or (alternative): Hw_code = String.valueOf(num_Hw_code);
              
              // NB TdTdTd_code always 3 characters width e.g. 127 (accomplish via construction below)
              int len = 3;
              if (TdTdTd_code.length() < len)                                            // pad on left with zeros
                 TdTdTd_code = "0000000000".substring(0, len - TdTdTd_code.length()) + TdTdTd_code;
          } // if (double_dew_point != INVALID)   
       } // if (checks_ok == true) 
       } // if ( (main.air_temp_from_AWS_present == false) || etc.
       else                                     // air temp and rh and sst present in AWS measured data
       {
          checks_ok = true;
       }   
       
       
       /*
       ////////// finish
       */
       if (checks_ok == true)
       {
          /* update temperature fields on main screen */
          main.temperatures_fields_update();
 
          /* close this input page */
          setVisible(false);
          dispose();

          /* next screen if in_next_screen mode */
          if (main.in_next_sequence == true)
          {
             next_screen();
          }

       } // if (checks_ok == true) 
    }//GEN-LAST:event_OK_button_actionperformed


    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
        // TODO add your handling code here:
       setVisible(false);
       dispose();

       if (main.in_next_sequence == true)
       {
          next_screen();
       }
    }//GEN-LAST:event_Cancel_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Internet_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_actionPerformed
       // TODO add your handling code here:
       main.internet_mouseClicked(TEMPERATURE_HELP_DIR);
    }//GEN-LAST:event_Internet_button_actionPerformed

    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       previous_screen();
    }//GEN-LAST:event_Back_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Stop_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       main.in_next_sequence = false;
    }//GEN-LAST:event_Stop_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void previous_screen()
   {
      mybarograph form = new mybarograph();
      form.setVisible(true);
   }

   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void next_screen()
   {
      mywind form = new mywind();
      form.setSize(800, 600);
      form.setVisible(true);
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initSynopparameters() 
   {

      if (air_temp.compareTo("") != 0)
         jTextField1.setText(air_temp); 

      if (wet_bulb_temp.compareTo("") != 0)
         jTextField2.setText(wet_bulb_temp); 

      if (sea_water_temp.compareTo("") != 0)
         jTextField3.setText(sea_water_temp); 
       
      if (main.air_temp_exposure.equals(main.SLING_PSYCHROMETER))
         jRadioButton1.setSelected(true);       
      else if (main.air_temp_exposure.equals(main.MARINE_SCREEN))
         jRadioButton2.setSelected(true);       
       
      /* NB default is wet-bulb not frozen (dus wanneer niets bekend is dan standaard wet-bulb not frozen button checken) */ 
      if (wet_bulb_frozen == true)
         jRadioButton4.setSelected(true);       // wet-bulb frozen radio button
      else
         jRadioButton3.setSelected(true);       // wet-bulb not frozen radio button
      
      if (main.sst_exposure.equals(main.INTAKE))
         jRadioButton5.setSelected(true);       
      else if (main.sst_exposure.equals(main.BUCKET))
         jRadioButton6.setSelected(true);       
      else if (main.sst_exposure.equals(main.HULL_CONTACT_SENSOR))
         jRadioButton7.setSelected(true);       
      else if (main.sst_exposure.equals(main.OTHER))
         jRadioButton8.setSelected(true);
      else if (main.sst_exposure.equals(main.TRAILING_THERMISTOR))
         jRadioButton9.setSelected(true);
      else if (main.sst_exposure.equals(main.THROUGH_HULL_SENSOR))
         jRadioButton10.setSelected(true);
      else if (main.sst_exposure.equals(main.RADIATION_THERMOMETER))
         jRadioButton11.setSelected(true);
      else if (main.sst_exposure.equals(main.BAIT_TANKS_THERMOMETER))
         jRadioButton12.setSelected(true);

   } 


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Reset_All_Temperatures_Vars()
   {
      // scope this module + myturbowin.java main module (all of type: static)
      //
      //if (main.air_temp_from_AWS_present == false)
      //{
         air_temp                      = "";   // if not ="" -> null pointer exception if update button clicked on main page
      //}
      
      wet_bulb_temp                    = "";
      
      //if (main.SST_from_AWS_present == false)
      //{   
         sea_water_temp                = "";
      //}
      
      sn_TTT_code                      = "";
      TTT_code                         = "";       
      sn_TbTbTb_code                   = "";
      TbTbTb_code                      = "";     
      ss_TsTsTs_code                   = "";
      TsTsTs_code                      = "";     
      sn_TdTdTd_code                   = "";
      TdTdTd_code                      = "";
      immt_sst_indicator               = "";
      double_dew_point                 = main.INVALID;
      
      //if (main.rh_from_AWS_present == false)
      //{
         double_rv                     = main.INVALID;
      //}  
      
      wet_bulb_frozen                  = false;
   
      // scope only this module (no static) 
      //
      double_air_temp                  = main.INVALID;
      double_wet_bulb_temp             = main.INVALID;
      double_sea_water_temp            = main.INVALID;
      checks_ok                        = false;

      /* update temperature fields on main screen */
      main.temperatures_fields_update();
   }
   
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
            public void run() {
                new mytemp().setVisible(true);
            }
        });
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton10;
   private javax.swing.JRadioButton jRadioButton11;
   private javax.swing.JRadioButton jRadioButton12;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JRadioButton jRadioButton7;
   private javax.swing.JRadioButton jRadioButton8;
   private javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField3;
   // End of variables declaration//GEN-END:variables
    
    
   // public constants
   //public static final int INVALID               = 9999999;
   
   // private constants
   private final double c1                           = 6.112;        // voor vochtigheid
   private final double c2                           = 17.62;        // voor vochtigheid
   private final double c3                           = 243.12;       // voor vochtigheid
   private final double c1_ijs                       = 6.112;        // voor vochtigheid
   private final double c2_ijs                       = 22.46;        // voor vochtigheid
   private final double c3_ijs                       = 272.62;       // voor vochtigheid
   private final double SP                           = 1013.25;      // voor vochtigheid
   private final double A_SLING_ICE                  = 0.000575;     // voor vochtigheid
   private final double A_SCREEN_ICE                 = 0.000711;     // (0.720 / 1013.25) voor vochtigheid
   private final double A_SCREEN_WATER               = 0.000789;     // (0.799 / 1013.25) voor vochtigheid
   private final double PRESSURE_DEPENDENCY          = 1.0047187;    // see "recommended algorithms for the computation of marine meteorological variables" (JCOMM TR No. 63)
   private final String TEMPERATURE_HELP_DIR         = "temperatures.html";
   
   // scope this module + myturbowin.java main module (all of type: static)
   public static String air_temp                     = "";           // if not ="" -> nullpointerexception if update button clicked on main page
   public static String wet_bulb_temp                = "";
   public static String sea_water_temp               = "";
   public static String sn_TTT_code                  = "";
   public static String TTT_code                     = "";     
   public static String sn_TbTbTb_code               = "";           // Tb = Twet
   public static String TbTbTb_code                  = "";     
   public static String ss_TsTsTs_code               = "";           // Ts = Tsea
   public static String TsTsTs_code                  = "";     
   public static String sn_TdTdTd_code               = "";
   public static String TdTdTd_code                  = "";
   public static String immt_sst_indicator           = "";
   public static double double_dew_point             = main.INVALID;
   public static double double_rv                    = main.INVALID;
   public static boolean wet_bulb_frozen             = false;
   
   // scope only this module (no static) 
   private double pressure;
   private double f_p;
   private double hulp_double_pressure_msl_corrected = main.INVALID;
   private double double_air_temp                    = main.INVALID;
   private double double_wet_bulb_temp               = main.INVALID;
   private double double_sea_water_temp              = main.INVALID;
   private boolean checks_ok                         = false;        
}
