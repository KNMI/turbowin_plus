import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;



/*
 * mybarograph.java
 *
 * Created on 27 augustus 2008, 7:55
 */



/**
 *
 * @author  Martin
 */
public class mybarograph extends javax.swing.JFrame {
    
    /** Creates new form mybarograph */
    public mybarograph() {
        initComponents();
        initComponents2();
        initSynopparameters(); 
        setLocation(main.x_pos_frame, main.y_pos_frame);
        initImages();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel1 = new javax.swing.JPanel();
      jTextField1 = new javax.swing.JTextField();
      jLabel12 = new javax.swing.JLabel();
      jLabel13 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jPanel3 = new javax.swing.JPanel();
      jLabel5 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jRadioButton8 = new javax.swing.JRadioButton();
      jPanel4 = new javax.swing.JPanel();
      jLabel9 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jRadioButton9 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jRadioButton11 = new javax.swing.JRadioButton();
      jRadioButton12 = new javax.swing.JRadioButton();
      jLabel14 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jButton3 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("barograph reading");
      setMinimumSize(new java.awt.Dimension(800, 600));
      setResizable(false);

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPermed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel12.setText("pressure tendency, during last 3 hrs (hPa)");

      jLabel13.setText("[0.0 - 50.0]");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel12)
            .addGap(18, 18, 18)
            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel12)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel13))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel1.setText("jLabel1");
      jLabel1.setDoubleBuffered(true);
      jLabel1.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel2.setText("jLabel2");
      jLabel2.setDoubleBuffered(true);
      jLabel2.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel3.setText("jLabel3");
      jLabel3.setDoubleBuffered(true);
      jLabel3.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel4.setText("jLabel4");
      jLabel4.setDoubleBuffered(true);
      jLabel4.setPreferredSize(new java.awt.Dimension(100, 100));

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("(a = 0)");

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("(a = 1)");

      buttonGroup1.add(jRadioButton3);
      jRadioButton3.setText("(a = 2)");

      buttonGroup1.add(jRadioButton4);
      jRadioButton4.setText("(a = 3)");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton2)
                     .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jRadioButton3))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton4)
                     .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton2)
               .addComponent(jRadioButton1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton4)
               .addComponent(jRadioButton3)))
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel5.setText("jLabel5");
      jLabel5.setDoubleBuffered(true);
      jLabel5.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel6.setText("jLabel6");
      jLabel6.setDoubleBuffered(true);
      jLabel6.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel7.setText("jLabel7");
      jLabel7.setDoubleBuffered(true);
      jLabel7.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel8.setText("jLabel8");
      jLabel8.setDoubleBuffered(true);
      jLabel8.setPreferredSize(new java.awt.Dimension(100, 100));

      buttonGroup1.add(jRadioButton5);
      jRadioButton5.setText("(a = 5)");

      buttonGroup1.add(jRadioButton6);
      jRadioButton6.setText("(a = 6)");

      buttonGroup1.add(jRadioButton7);
      jRadioButton7.setText("(a = 7)");

      buttonGroup1.add(jRadioButton8);
      jRadioButton8.setText("(a = 8)");

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(jRadioButton5)
               .addComponent(jRadioButton7))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton8)
               .addComponent(jRadioButton6)
               .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton6)
               .addComponent(jRadioButton5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton8)
               .addComponent(jRadioButton7)))
      );

      jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel9.setText("jLabel9");
      jLabel9.setDoubleBuffered(true);
      jLabel9.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel10.setText("jLabel10");
      jLabel10.setDoubleBuffered(true);
      jLabel10.setPreferredSize(new java.awt.Dimension(100, 100));

      jLabel11.setText("jLabel11");
      jLabel11.setDoubleBuffered(true);
      jLabel11.setPreferredSize(new java.awt.Dimension(100, 100));

      buttonGroup1.add(jRadioButton9);
      jRadioButton9.setText("(a = 0)");

      buttonGroup1.add(jRadioButton10);
      jRadioButton10.setText("(a = 4)");

      buttonGroup1.add(jRadioButton11);
      jRadioButton11.setText("(a = 5)");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel4Layout.createSequentialGroup()
                  .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton10)
                     .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addComponent(jRadioButton11)
               .addComponent(jRadioButton9))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton10)
               .addComponent(jRadioButton9))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(3, 3, 3)
            .addComponent(jRadioButton11))
      );

      buttonGroup1.add(jRadioButton12);
      jRadioButton12.setText("not determined");

      jLabel14.setText("pressure higher than 3 hrs ago");

      jLabel15.setText("pressure lower than 3 hrs ago");

      jLabel16.setText("pressure the same as 3 hrs ago");

      jButton3.setText("Internet");
      jButton3.setActionCommand("Info (internet)");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_mouseClicked(evt);
         }
      });

      jButton4.setText("Back");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton5.setText("Stop");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jRadioButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 0, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(layout.createSequentialGroup()
                              .addGap(21, 21, 21)
                              .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGroup(layout.createSequentialGroup()
                              .addGap(18, 18, 18)
                              .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                     .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(39, 39, 39)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel14)
               .addComponent(jLabel16)
               .addComponent(jLabel15))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton12)
            .addGap(13, 13, 13)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2() 
   {
      // FOR ACTUAL SITUATION: see main.java
      // global var: RS232_connection_mode: 0 = no instrument; serial connection or WiFi (default) 
      //        (instrument type)      1 = barometer PTB220 serial
      //                               2 = barometer PTB330 serial
      //                               3 = EUCOS AWS (EUCAWS) serial
      //                               4 = barometer Mintaka Duo USB
      //                               5 = barometer Mintaka Star (USB)
      //                               6 = barometer Mintaka Star (WiFi; access point mode or station mode)
      //                               7 = barometer + temp/vocht Mintaka Star + StarX (USBl)
      //                               8 = barometer + temp/vocht Mintaka Star + StarX (WiFi; access point mode or station mode)
      //                               9 = OMC-140 AWS (Observator) serial
      //                               10= OMC-140 AWS (Observator) ethernet LAN

      
      // AWS connected?
      if (main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9|| main.RS232_connection_mode == 10)
      {
         local_AWS_connected = true;
      }
      else
      {
         local_AWS_connected = false; 
      }
      
      // barometer connected?
      if (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2 || main.RS232_connection_mode == 4 || main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6 || main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8)
      {
         local_barometer_connected = true;
      }
      else
      {
         local_barometer_connected = false;
      }   
      
      
      // hide Back/Stop buttons if not in next_screen_mode
      if (main.in_next_sequence == false)
      {
         jButton4.setEnabled(false);                         // back button
         jButton5.setEnabled(false);                         // stop button
      }


      if (main.offline_mode == true)
      {   
         jButton3.setText("Help");
      }           
      
      
      // amount pressure tendency
      //
      if (local_AWS_connected)                                   // AWS connected mode
      {
         jTextField1.setForeground(main.input_color_from_aws);    // amount of pressure tendency 
         jTextField1.setEditable(false);
      }
      
      
      // characteristic tendency
      //
      if (local_AWS_connected)                                    // AWS connected mode
      {
         jLabel14.setForeground(main.input_color_from_aws);        // characteristic label
         jLabel15.setForeground(main.input_color_from_aws);        // characteristic label
         jLabel16.setForeground(main.input_color_from_aws);        // characteristic label
         
         jRadioButton1.setEnabled(false);                          // characteristic
         jRadioButton2.setEnabled(false); 
         jRadioButton3.setEnabled(false); 
         jRadioButton4.setEnabled(false); 
         jRadioButton5.setEnabled(false);   
         jRadioButton6.setEnabled(false); 
         jRadioButton7.setEnabled(false); 
         jRadioButton8.setEnabled(false);
         jRadioButton9.setEnabled(false);   
         jRadioButton10.setEnabled(false); 
         jRadioButton11.setEnabled(false);
         jRadioButton12.setEnabled(false);
      } 
      
   }



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Reset_All_Barograph_Vars() 
   {
       // scope only this module
       checks_ok                       = false;
       double_pressure_amount_tendency = main.INVALID;
       
       // scope this module + main module
       //a                               = "";             // characteristic in words
       a_code                          = "";             // characteristic in code
       ppp_code                        = "";
       pressure_amount_tendency        = "";

       /* update progress fields on main screen */
       main.barograph_fields_update();
   }
    

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   public ImageIcon createImageIcon(String path_and_file)
   {
      URL url = null;

      try
      {
         url = getClass().getResource(path_and_file);
      }
      catch (Exception e) { /* ... */}

      ImageIcon icon_glyph = new javax.swing.ImageIcon(url);

      return icon_glyph;
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initImages()
   {
      loadImage(main.ICONS_DIRECTORY + "A_0.jpg"); // nummers alleen omdat een string comment door loadimage en verder aangegeven is, heeft hier verder geen nut
      loadImage(main.ICONS_DIRECTORY + "A_0_same.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_1.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_2.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_3.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_4.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_5.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_5_same.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_6.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_7.jpg");
      loadImage(main.ICONS_DIRECTORY + "A_8.jpg");
   } // protected void initImages()   
   

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   
   // The doInBackground method, which creates the image icon for the photograph, is invoked by the background thread. 
   // After the image icon is fully loaded, the done method is invoked on the event-dispatching thread. 
   // This updates the GUI to display the photograph
   
   // SwingWorker is only designed to be executed once. Executing a SwingWorker more than once will not result in invoking the doInBackground method twice.
   // see: http://java.sun.com/javase/6/docs/api/javax/swing/SwingWorker.html
   private void loadImage(final String imagePath) 
   {
      new SwingWorker<ImageIcon, Object>() 
      {
         @Override
         public ImageIcon doInBackground() 
         {
             return createImageIcon(imagePath);
         }

         @Override
         public void done()
         {
            try
            {        
               // pressure higher than 3hrs ago
               // 
               if (imagePath.equals(main.ICONS_DIRECTORY + "A_0.jpg"))
               {
                  ImageIcon img_a_0 = get();
                  jLabel1.setIcon(img_a_0); 
               }   
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_1.jpg"))
               {    
                  ImageIcon img_a_1 = get();
                  jLabel2.setIcon(img_a_1); 
               }   
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_2.jpg"))
               {    
                  ImageIcon img_a_2 = get();
                  jLabel3.setIcon(img_a_2); 
               }   
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_3.jpg"))
               {
                  ImageIcon img_a_3 = get();
                  jLabel4.setIcon(img_a_3); 
               }   
               
               // pressure lower than 3 hrs ago
               //
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_5.jpg"))
               {    
                  ImageIcon img_a_5 = get();
                  jLabel5.setIcon(img_a_5); 
               }   
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_6.jpg"))
               {    
                  ImageIcon img_a_6 = get();
                  jLabel6.setIcon(img_a_6); 
               }   
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_7.jpg"))
               {
                  ImageIcon img_a_7 = get();
                  jLabel7.setIcon(img_a_7); 
               }   
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_8.jpg"))
               {    
                  ImageIcon img_a_8 = get();
                  jLabel8.setIcon(img_a_8); 
               }  
               
               // pressure the same as 3hrs ago
               //
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_0_same.jpg"))
               {    
                  ImageIcon img_a_0_same = get();
                  jLabel9.setIcon(img_a_0_same); 
               } 
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_4.jpg"))
               {    
                  ImageIcon img_a_4 = get();
                  jLabel10.setIcon(img_a_4); 
               } 
               else if (imagePath.equals(main.ICONS_DIRECTORY + "A_5_same.jpg"))
               {    
                  ImageIcon img_a_5_same = get();
                  jLabel11.setIcon(img_a_5_same); 
               } 
            } // try
            catch (InterruptedException ignore) { }
            catch (java.util.concurrent.ExecutionException e) 
            {
                String why = null;
                Throwable cause = e.getCause();
                if (cause != null) 
                {
                   why = cause.getMessage();
                } 
                else 
                {
                   why = e.getMessage();
                }
                //System.err.println("Error retrieving file: " + why);
                JOptionPane.showMessageDialog(null, "Error retrieving file: " + why, main.APPLICATION_NAME, JOptionPane.ERROR_MESSAGE);
            } // catch         
         } //  public void done()
      }.execute();
   } // private void loadImage(final String imagePath, final int index)

   

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initSynopparameters() 
   {
      // RS232/WiFi (barometer connected)
      //
      if (main.RS232_connection_mode == 4)                                                  // Mintaka Duo connected
      {
         main_RS232_RS422.RS232_Mintaka_Duo_Read_Sensor_Data_a_ppp_Data_Files_For_Obs();    // this function will set 'pressure_amount_tendency' and 'a_code'
      }
      else if (main.RS232_connection_mode == 5 ||main.RS232_connection_mode == 6)           // Mintaka Star USB or Mintaka Sar WiFi connected
      {
         boolean StarX = false;
         main_RS232_RS422.RS232_Mintaka_Star_And_StarX_Read_Sensor_Data_a_ppp_Data_Files_For_Obs(StarX);   // this function will set 'pressure_amount_tendency' and 'a_code'
      }
      else if (main.RS232_connection_mode == 7 ||main.RS232_connection_mode == 8)           // Mintaka StarX USB or Mintaka StarX WiFi connected
      {
         boolean StarX = true;
         main_RS232_RS422.RS232_Mintaka_Star_And_StarX_Read_Sensor_Data_a_ppp_Data_Files_For_Obs(StarX);   // this function will set 'pressure_amount_tendency' and 'a_code'
      }
      else if (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2)          // PTB220 or PTB330 connected
      {
         main_RS232_RS422.RS232_Read_Sensor_Data_a_ppp_For_Obs();                           // this function will set 'pressure_amount_tendency' and 'a_code'
      }

      
      // amount of pressure tendency (if no barometer connected, because then RS232 applicable)
      //
      if ( (pressure_amount_tendency.compareTo("") != 0) && (local_barometer_connected == false) )
      {
         jTextField1.setText(pressure_amount_tendency); 
      }
      
      
      // characteristic of pressure tendency (if no barometer connected, because then RS232 applicable))
      //
      if ( (a_code.compareTo("") != 0) && (local_barometer_connected == false) )
      {
         // pressure the same as 3hrs ago?
         //
         // NB neccessary in the case of a = 0 or a = 5 (they could be lower/ higher or the same; see graphs a =  0 has 2 selection options and a = 5 has 2 selection options)
         //
         boolean hulp_pressure_tendency_0_0 = false;
         if (pressure_amount_tendency.compareTo("") != 0) 
         {
            double hulp_pressure_amount_tendency = Double.valueOf(pressure_amount_tendency); 
            if (hulp_pressure_amount_tendency < 0.01)
            {
               hulp_pressure_tendency_0_0 = true;
               //System.out.println("hulp_pressure_tendency_0_0 = " + hulp_pressure_tendency_0_0);
            }
         } // if (pressure_amount_tendency.compareTo("") != 0) 
         
         
         // pressure higher than 3hrs ago (or the same in case of a = 0)
         if (a_code.equals(A_0) || a_code.equals(A_0_SAME))                      // NB A_0 and A_0_SAME have the same value (0); so you need boolean hulp_pressure_tendency_0_0
         {   
            if (hulp_pressure_tendency_0_0)
            {
               jRadioButton9.setSelected(true); // the same
            }
            else
            {
               jRadioButton1.setSelected(true); // higher
            }
         }   
         else if (a_code.equals(A_1))
         {
            jRadioButton2.setSelected(true);
         }   
         else if (a_code.equals(A_2))
         {
            jRadioButton3.setSelected(true);
         }   
         else if (a_code.equals(A_3))
         {   
            jRadioButton4.setSelected(true);
         }
         
         // pressure lower than 3hrs ago (or the same in case of a = 5)
         else if (a_code.equals(A_5) || a_code.equals(A_5_SAME))                 // NB A_5 and A_5_SAME have the same value (5); so you need boolean hulp_pressure_tendency_0_0
         {
            if (hulp_pressure_tendency_0_0)
            {
               jRadioButton11.setSelected(true);  // the same
            }
            else
            {   
               jRadioButton5.setSelected(true);   // lower
            }
         }
         else if (a_code.equals(A_6))
         {
            jRadioButton6.setSelected(true);
         }
         else if (a_code.equals(A_7))
         {
            jRadioButton7.setSelected(true);
         }
         else if (a_code.equals(A_8))
         {   
            jRadioButton8.setSelected(true);
         }
         
         // pressure the same as 3hrs ago  
         else if (a_code.equals(A_4)) 
         {   
            jRadioButton10.setSelected(true);
         }   
      } // if (a_code.compareTo("") != 0)
      else
      {   
         jRadioButton12.setSelected(true);                      // not determined   
      }   
   } // private void initSynopparameters() 

    
    

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
        // TODO add your handling code here:
       
       
       if (local_AWS_connected == false)                        // not AWS
       {
       
       // initialisation
       Reset_All_Barograph_Vars();
       
       // initialisation (will be set to false in function Reset_All_Barometer_Vars())
       checks_ok = true;
        
         
       // read inserted values
       pressure_amount_tendency = jTextField1.getText().trim();
       
     
       if (jRadioButton1.isSelected() == true)
       {
          //a      = text_A_0;
          a_code = A_0;
       }
       else if (jRadioButton2.isSelected() == true)
       {
          //a      = text_A_1;
          a_code = A_1;
       }
       else if (jRadioButton3.isSelected() == true)
       {
          //a      = text_A_2;
          a_code = A_2;
       }
       else if (jRadioButton4.isSelected() == true)
       {
          //a      = text_A_3;
          a_code = A_3;
       }
       else if (jRadioButton5.isSelected() == true)
       {
          //a      = text_A_5;
          a_code = A_5;
       }
       else if (jRadioButton6.isSelected() == true)
       {
          //a      = text_A_6;
          a_code = A_6;
       }
       else if (jRadioButton7.isSelected() == true)
       {
          //a      = text_A_7;
          a_code = A_7;
       }
       else if (jRadioButton8.isSelected() == true)
       {
          //a      = text_A_8;
          a_code = A_8;
       }
       else if (jRadioButton9.isSelected() == true)
       {
          //a      = text_A_0_SAME;
          a_code = A_0_SAME;
       }
       else if (jRadioButton10.isSelected() == true)
       {
          //a      = text_A_4;
          a_code = A_4;
       }
       else if (jRadioButton11.isSelected() == true)
       {
          //a      = text_A_5_SAME;
          a_code = A_5_SAME;
       }
       else if (jRadioButton12.isSelected() == true)            // not determined
       {
           //a      = "";
           a_code = "";
       }
       else                                                     // for security
       {
           //a      = "";
           a_code = "";
       } 
       
      
       /*
       // convert collected (string) values to floats
       */ 
       if (checks_ok == true)
       {
          // amount of air pressure tendency
          try 
          {
             double_pressure_amount_tendency = Double.parseDouble(pressure_amount_tendency.trim());
          } 
          catch (NumberFormatException e) {}
       } // if (checks_ok == true)
       
       
       /* 
       //////////////// checks on limits
       */
       if (checks_ok == true)
       {
          // amount of air pressure tendency limits
          if ((pressure_amount_tendency.trim().length() > 0) && 
              (double_pressure_amount_tendency < 0.0 || double_pressure_amount_tendency > 50.0))
          {
             JOptionPane.showMessageDialog(null, "amount of pressure tendency must be in range 0.0 - 50.0 or blank", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_Barograph_Vars();                   // hier wordt ook "checks_ok" op false gezet
          }
       } // if (checks_ok == true)
       
        
       /* 
       //////////////// check concistency "amount of tendency" and "characteristic of tendency" (a)
       */
       if (a_code.equals(A_4) && double_pressure_amount_tendency != 0)
       {
          JOptionPane.showMessageDialog(null, "if characteristic of pressure tendency = 'steady' (a = 4) then amount of pressure tendency must be 0.0", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
          Reset_All_Barograph_Vars();                   // hier wordt ook "checks_ok" op false gezet
       }
       
       /*
       ///////////// determine meteorological code figures
       */
       if (checks_ok == true)
       {   
          if (double_pressure_amount_tendency != main.INVALID)
          {
             int num_ppp_code = (int)Math.floor(double_pressure_amount_tendency * 10 + 0.5);
             
             ppp_code = Integer.toString(num_ppp_code);     // convert to string
             
             // NB PPPP_code always 3 characters width e.g. 017 (accomplish via construction below)
             int len = 3;
             if (ppp_code.length() < len)                                            // pad on left with zeros
                 ppp_code = "0000000000".substring(0, len - ppp_code.length()) + ppp_code;
          
          } // if (double_pressure_amount_tendency != INVALID)

          // NOTE for a_code see above

       } // if (checks_ok == true)    
       
       } // if (local_AWS_connected == false)                      
       else      // AWS connected mode
       {
          checks_ok = true;
       }
       
       
       /*
       ///////// finish
       */ 
       if (checks_ok == true)
       {
          /* update progress fields on main screen */
          main.barograph_fields_update();

          /* close this input page */
          setVisible(false);
          dispose();

          /* next screen if in_next_screen mode */
          if (main.in_next_sequence == true)
          {
             next_screen();
          }

       } // if (checks_ok == true)
    }//GEN-LAST:event_OK_button_actionPerformed


    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Cancel_button_actionPermed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPermed
        // TODO add your handling code here:
    
       /* close input page */
       setVisible(false);
       dispose();

       if (main.in_next_sequence == true)
       {
          next_screen();
       }
    }//GEN-LAST:event_Cancel_button_actionPermed


    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Internet_button_mouseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_mouseClicked
       // TODO add your handling code here:
       main.internet_mouseClicked(BAROGRAAF_HELP_DIR);
    }//GEN-LAST:event_Internet_button_mouseClicked

    
    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       previous_screen();
    }//GEN-LAST:event_Back_button_actionPerformed

    

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Stop_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       main.in_next_sequence = false;
    }//GEN-LAST:event_Stop_button_actionPerformed
    


/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private void previous_screen()
{
   mybarometer form = new mybarometer();
   form.setSize(800, 600);
   form.setVisible(true);
}



/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private void next_screen()
{
   mytemp form = new mytemp();
   form.setSize(800, 600);
   form.setVisible(true);
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
            public void run() {
                new mybarograph().setVisible(true);
            }
        });
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   public static javax.swing.JRadioButton jRadioButton1;
   public static javax.swing.JRadioButton jRadioButton10;
   public static javax.swing.JRadioButton jRadioButton11;
   public static javax.swing.JRadioButton jRadioButton12;
   public static javax.swing.JRadioButton jRadioButton2;
   public static javax.swing.JRadioButton jRadioButton3;
   public static javax.swing.JRadioButton jRadioButton4;
   public static javax.swing.JRadioButton jRadioButton5;
   public static javax.swing.JRadioButton jRadioButton6;
   public static javax.swing.JRadioButton jRadioButton7;
   public static javax.swing.JRadioButton jRadioButton8;
   public static javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JSeparator jSeparator1;
   public static javax.swing.JTextField jTextField1;
   // End of variables declaration//GEN-END:variables
    
   // constants
   //private final int INVALID                      = 9999999;
   public final static String A_0                       = "0";     //"rising, then falling (a = 0)";
   public final static String A_0_SAME                  = "0";     //"rising, then falling (a = 0)";
   public final static String A_1                       = "1";     //"rising, then steady; or rising, then rising more slowly (a = 1)";
   public final static String A_2                       = "2";     //"rising (steadily or unsteadily) (a = 2)";
   public final static String A_3                       = "3";     //"falling, then rising; or steady, then rising; or rising, then rising more quickly  (a = 3)";
   public final static String A_4                       = "4";     //"steady (a = 4)";
   public final static String A_5                       = "5";     //"falling, then rising (a = 5)";
   public final static String A_5_SAME                  = "5";     //"falling, then rising (a = 5)";
   public final static String A_6                       = "6";     //"falling, then steady; or falling, then falling more slowly (a = 6)";
   public final static String A_7                       = "7";     //"falling (steadily or unsteadily)  (a = 7)";
   public final static String A_8                       = "8";     //"rising, then falling; or steady, then falling; or falling, then falling more quickly (a = 8) ";
   public final static String BAROGRAAF_HELP_DIR        = "barograph.html";
   
   // scope this module + myturbowin.java main module (all of type: static)
   public static String a_code                          = "";       // static !! else runtime exception
   public static String ppp_code                        = "";
   public static String pressure_amount_tendency        = "";
   
   // scope only this module
   private boolean checks_ok                            = false; 
   private double double_pressure_amount_tendency       = main.INVALID;
   private boolean local_AWS_connected;
   private boolean local_barometer_connected;
}
