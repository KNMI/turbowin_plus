
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.regex.Pattern;
import javax.swing.AbstractListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;

/*
 * mystationdata.java
 *
 * Created on 2 juli 2008, 12:30
 */


/* NB max height deck cargo and diff. sll-wl can be set on this input page but also on the wind input page!  */


/**
 *
 * @author  Martin
 */
public class mystationdata extends javax.swing.JFrame {
    
    /** Creates new form mystationdata */
    public mystationdata() {
        initComponents();
        initStationComponents();
        setLocation(main.x_pos_main_frame, main.y_pos_main_frame);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      buttonGroup5 = new javax.swing.ButtonGroup();
      buttonGroup6 = new javax.swing.ButtonGroup();
      buttonGroup4 = new javax.swing.ButtonGroup();
      jSeparator1 = new javax.swing.JSeparator();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jTextField1 = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jTextField2 = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      jTextField3 = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      jTextField4 = new javax.swing.JTextField();
      jLabel5 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      jList2 = new javax.swing.JList<String>();
      jPanel3 = new javax.swing.JPanel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton17 = new javax.swing.JRadioButton();
      jLabel11 = new javax.swing.JLabel();
      jLabel19 = new javax.swing.JLabel();
      jTextField7 = new javax.swing.JTextField();
      jTextField8 = new javax.swing.JTextField();
      jLabel6 = new javax.swing.JLabel();
      jRadioButton9 = new javax.swing.JRadioButton();
      jRadioButton10 = new javax.swing.JRadioButton();
      jLabel23 = new javax.swing.JLabel();
      jRadioButton18 = new javax.swing.JRadioButton();
      jRadioButton19 = new javax.swing.JRadioButton();
      jPanel4 = new javax.swing.JPanel();
      jLabel12 = new javax.swing.JLabel();
      jTextField5 = new javax.swing.JTextField();
      jLabel13 = new javax.swing.JLabel();
      jTextField6 = new javax.swing.JTextField();
      jLabel21 = new javax.swing.JLabel();
      jRadioButton11 = new javax.swing.JRadioButton();
      jRadioButton12 = new javax.swing.JRadioButton();
      jLabel7 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      jPanel5 = new javax.swing.JPanel();
      jLabel14 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList<String>();
      jLabel9 = new javax.swing.JLabel();
      jPanel6 = new javax.swing.JPanel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton6 = new javax.swing.JRadioButton();
      jRadioButton7 = new javax.swing.JRadioButton();
      jRadioButton8 = new javax.swing.JRadioButton();
      jRadioButton13 = new javax.swing.JRadioButton();
      jRadioButton14 = new javax.swing.JRadioButton();
      jRadioButton15 = new javax.swing.JRadioButton();
      jRadioButton16 = new javax.swing.JRadioButton();
      jLabel10 = new javax.swing.JLabel();
      jLabel20 = new javax.swing.JLabel();
      jLabel18 = new javax.swing.JLabel();
      jButton3 = new javax.swing.JButton();
      jLabel17 = new javax.swing.JLabel();
      jLabel22 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Station data");
      setMinimumSize(new java.awt.Dimension(1000, 700));
      setResizable(false);

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            Cancel_button_actionPerformed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel1.setText("ship name:");

      jLabel2.setText("IMO number:");

      jLabel3.setText("call sign:");

      jLabel4.setText("masked call sign*:");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel1)
               .addComponent(jLabel2)
               .addComponent(jLabel3)
               .addComponent(jLabel4))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
               .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
               .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
               .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(8, 8, 8)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel5.setText("ship data");

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jScrollPane2.setViewportView(jList2);

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
            .addContainerGap())
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel3.setPreferredSize(new java.awt.Dimension(387, 152));

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("estimated; true speed and true direction");

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("measured; apparent speed + app. dir. (OFF THE BOW, clockwise)*");

      buttonGroup1.add(jRadioButton17);
      jRadioButton17.setText("measured; true speed and true direction");

      jLabel11.setText("max. height deck cargo above SLL (metres, [0 - 100], rounded):");

      jLabel19.setText("difference SLL** and water line (metres, [-10 - 50]***, rounded):");

      jLabel6.setText("wind speed units estimated/measured:");

      buttonGroup6.add(jRadioButton9);
      jRadioButton9.setText("knots");

      buttonGroup6.add(jRadioButton10);
      jRadioButton10.setText("m/s*");

      jLabel23.setText("wind speed units graphs/dashboards:");

      buttonGroup4.add(jRadioButton18);
      jRadioButton18.setText("knots");

      buttonGroup4.add(jRadioButton19);
      jRadioButton19.setText("m/s");

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel19)
                     .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton17)
                     .addComponent(jRadioButton1)
                     .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton9, javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jRadioButton18))
                  .addGap(10, 10, 10)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton19)
                     .addComponent(jRadioButton10))))
            .addContainerGap())
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jRadioButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton17)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel11)
               .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel19)
               .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel6)
               .addComponent(jRadioButton9)
               .addComponent(jRadioButton10))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel23)
               .addComponent(jRadioButton18)
               .addComponent(jRadioButton19))
            .addContainerGap(24, Short.MAX_VALUE))
      );

      jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel4.setPreferredSize(new java.awt.Dimension(387, 107));

      jLabel12.setText("height of the barometer above SLL (metres, e.g. 20.8):");

      jLabel13.setText("distance of bottom of the keel to SLL (metres, e.g. 9.1): ");

      jLabel21.setText("does the reading indicate MSL pressure*:");

      buttonGroup5.add(jRadioButton11);
      jRadioButton11.setText("yes");

      buttonGroup5.add(jRadioButton12);
      jRadioButton12.setText("no*");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(jPanel4Layout.createSequentialGroup()
                  .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jRadioButton11)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel4Layout.createSequentialGroup()
                  .addGap(10, 10, 10)
                  .addComponent(jRadioButton12))
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel12))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel21)
               .addComponent(jRadioButton12)
               .addComponent(jRadioButton11))
            .addGap(30, 30, 30))
      );

      jLabel7.setText("wind meta data");

      jLabel8.setText("air pressure meta data");

      jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel5.setPreferredSize(new java.awt.Dimension(304, 98));

      jLabel14.setText("method for determing waves:");

      jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jScrollPane1.setViewportView(jList1);

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
               .addComponent(jLabel14))
            .addContainerGap())
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel14)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(30, 30, 30))
      );

      jLabel9.setText("waves meta data");

      jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel6.setPreferredSize(new java.awt.Dimension(387, 123));

      jLabel15.setText("air temp exposure:");

      jLabel16.setText("sea water temp exposure:");

      buttonGroup2.add(jRadioButton3);
      jRadioButton3.setText("intake");

      buttonGroup2.add(jRadioButton4);
      jRadioButton4.setText("bucket");

      buttonGroup2.add(jRadioButton5);
      jRadioButton5.setText("hull contact sens.");

      buttonGroup2.add(jRadioButton6);
      jRadioButton6.setText("other");

      buttonGroup3.add(jRadioButton7);
      jRadioButton7.setText("sling psychrometer");

      buttonGroup3.add(jRadioButton8);
      jRadioButton8.setText("marine screen");

      buttonGroup2.add(jRadioButton13);
      jRadioButton13.setText("trailing thermistor");

      buttonGroup2.add(jRadioButton14);
      jRadioButton14.setText("\"through hull\"sensor");

      buttonGroup2.add(jRadioButton15);
      jRadioButton15.setText("radiation therm.");

      buttonGroup2.add(jRadioButton16);
      jRadioButton16.setText("bait tanks therm.");

      javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
      jPanel6.setLayout(jPanel6Layout);
      jPanel6Layout.setHorizontalGroup(
         jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel15)
               .addComponent(jRadioButton7)
               .addComponent(jRadioButton8))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel6Layout.createSequentialGroup()
                  .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton3)
                     .addComponent(jRadioButton4)
                     .addComponent(jRadioButton5)
                     .addComponent(jRadioButton13))
                  .addGap(9, 9, 9)
                  .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton16)
                     .addComponent(jRadioButton6)
                     .addComponent(jRadioButton15)
                     .addComponent(jRadioButton14)))
               .addGroup(jPanel6Layout.createSequentialGroup()
                  .addGap(63, 63, 63)
                  .addComponent(jLabel16)))
            .addContainerGap())
      );
      jPanel6Layout.setVerticalGroup(
         jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel15)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton8)
            .addGap(53, 53, 53))
         .addGroup(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel16)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton3)
               .addComponent(jRadioButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton4)
               .addComponent(jRadioButton15))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton5)
               .addComponent(jRadioButton16))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton6)
               .addComponent(jRadioButton13))
            .addGap(30, 30, 30))
      );

      jLabel10.setText("temperatures meta data");

      jLabel20.setText("*i.a. AWS            **Summer Load Line            ***negative if SLL is below WL");

      jLabel18.setText("recruiting country");

      jButton3.setText("import");
      jButton3.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            import_button_actionPerformed(evt);
         }
      });

      jLabel17.setText("* only to be used with the agreement of your Met. Service");

      jLabel22.setText("* always \"no\" if a barometer or AWS is connected");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(360, 360, 360)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel9))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 865, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addGap(42, 42, 42)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
                        .addGap(54, 54, 54))
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel8)
                        .addComponent(jLabel7)
                        .addComponent(jLabel10)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
                     .addComponent(jLabel22))
                  .addGap(42, 42, 42)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel7)
               .addComponent(jLabel5))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel17))
               .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(2, 2, 2)
                  .addComponent(jLabel18)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addGap(6, 6, 6)
                  .addComponent(jLabel20)
                  .addGap(9, 9, 9)
                  .addComponent(jLabel8)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel22)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel9)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel10)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(25, 25, 25)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    
    

   private void lees_iso_landen_codes()
   {
      /* NB input/output GUI always via a SwingWorker (Core Java Volume 1 bld 795 e.v.; Volume 2 bld 37, 215) */

      new SwingWorker<Void, Void>()
      {
         @Override
         protected Void doInBackground() throws Exception
         {
            // NB e.g. configuratie_regels[2]  = "wind source        : estimated; true speed and true direction"
            int teller_iso_landen_regels;
            String file_line;

            for (teller_iso_landen_regels = 0; teller_iso_landen_regels < MAX_AANTAL_ISO_LANDEN_REGELS; teller_iso_landen_regels++)
            {
               iso_landen_regels[teller_iso_landen_regels] = "";
            }


            /* read all lines from iso land codes file */
            try
            {
               // reading file ISO_landen_codes.txt from the JAR file
               InputStream is = getClass().getResourceAsStream(main.ICONS_DIRECTORY + "ISO_landen_codes.txt");
               BufferedReader in = new BufferedReader(new InputStreamReader(is));

               teller_iso_landen_regels = 0;
               while((file_line = in.readLine()) != null)
               {
                  if (file_line.length() > 3)
                  {
                     // remove tab's
                     file_line = file_line.replaceAll("\t", "");

                     iso_landen_regels[teller_iso_landen_regels] = file_line;
                     teller_iso_landen_regels++;
                     //JOptionPane.showMessageDialog(null, file_line, main.APPLICATION_NAME + " TEST", JOptionPane.WARNING_MESSAGE);
                  }

                  /* safety */
                  if (teller_iso_landen_regels >= MAX_AANTAL_ISO_LANDEN_REGELS)
                  {
                     break;
                  }
               } // while((file_line = in.readLine()) != null)
               in.close();

            } // try
            catch (Exception e)
            {
               JOptionPane.showMessageDialog(null, "Reading error 'ISO country codes' file", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            } // catch

            return null;
         } // protected Void doInBackground() throws Exception

         @Override
         protected void done()
         {
            // NB open the GUI form, select the JList component, go to Properties -> Code and set "Type Parameters" property to <String>.
            
            //jList2.setModel(new javax.swing.AbstractListModel()
            ListModel<String> iso_landen_model = new AbstractListModel<String>()   
            {
               String[] strings = {
                                   iso_landen_regels[0],
                                   iso_landen_regels[1],
                                   iso_landen_regels[2],
                                   iso_landen_regels[3],
                                   iso_landen_regels[4],
                                   iso_landen_regels[5],
                                   iso_landen_regels[6],
                                   iso_landen_regels[7],
                                   iso_landen_regels[8],
                                   iso_landen_regels[9],
                                   iso_landen_regels[10],
                                   iso_landen_regels[11],
                                   iso_landen_regels[12],
                                   iso_landen_regels[13],
                                   iso_landen_regels[14],
                                   iso_landen_regels[15],
                                   iso_landen_regels[16],
                                   iso_landen_regels[17],
                                   iso_landen_regels[18],
                                   iso_landen_regels[19],
                                   iso_landen_regels[20],
                                   iso_landen_regels[21],
                                   iso_landen_regels[22],
                                   iso_landen_regels[23],
                                   iso_landen_regels[24],
                                   iso_landen_regels[25],
                                   iso_landen_regels[26],
                                   iso_landen_regels[27],
                                   iso_landen_regels[28],
                                   iso_landen_regels[29],
                                   iso_landen_regels[30],
                                   iso_landen_regels[31],
                                   iso_landen_regels[32],
                                   iso_landen_regels[33],
                                   iso_landen_regels[34],
                                   iso_landen_regels[35],
                                   iso_landen_regels[36],
                                   iso_landen_regels[37],
                                   iso_landen_regels[38],
                                   iso_landen_regels[39],
                                   iso_landen_regels[40],
                                   iso_landen_regels[41],
                                   iso_landen_regels[42],
                                   iso_landen_regels[43],
                                   iso_landen_regels[44],
                                   iso_landen_regels[45],
                                   iso_landen_regels[46],
                                   iso_landen_regels[47],
                                   iso_landen_regels[48],
                                   iso_landen_regels[49],
                                   iso_landen_regels[50],
                                   iso_landen_regels[51],
                                   iso_landen_regels[52],
                                   iso_landen_regels[53],
                                   iso_landen_regels[54],
                                   iso_landen_regels[55],
                                   iso_landen_regels[56],
                                   iso_landen_regels[57],
                                   iso_landen_regels[58],
                                   iso_landen_regels[59],
                                   iso_landen_regels[60],
                                   iso_landen_regels[61],
                                   iso_landen_regels[62],
                                   iso_landen_regels[63],
                                   iso_landen_regels[64],
                                   iso_landen_regels[65],
                                   iso_landen_regels[66],
                                   iso_landen_regels[67],
                                   iso_landen_regels[68],
                                   iso_landen_regels[69],
                                   iso_landen_regels[70],
                                   iso_landen_regels[71],
                                   iso_landen_regels[72],
                                   iso_landen_regels[73],
                                   iso_landen_regels[74],
                                   iso_landen_regels[75],
                                   iso_landen_regels[76],
                                   iso_landen_regels[77],
                                   iso_landen_regels[78],
                                   iso_landen_regels[79],
                                   iso_landen_regels[80],
                                   iso_landen_regels[81],
                                   iso_landen_regels[82],
                                   iso_landen_regels[83],
                                   iso_landen_regels[84],
                                   iso_landen_regels[85],
                                   iso_landen_regels[86],
                                   iso_landen_regels[87],
                                   iso_landen_regels[88],
                                   iso_landen_regels[89],
                                   iso_landen_regels[90],
                                   iso_landen_regels[91],
                                   iso_landen_regels[92],
                                   iso_landen_regels[93],
                                   iso_landen_regels[94],
                                   iso_landen_regels[95],
                                   iso_landen_regels[96],
                                   iso_landen_regels[97],
                                   iso_landen_regels[98],
                                   iso_landen_regels[99],

                                   iso_landen_regels[100],
                                   iso_landen_regels[101],
                                   iso_landen_regels[102],
                                   iso_landen_regels[103],
                                   iso_landen_regels[104],
                                   iso_landen_regels[105],
                                   iso_landen_regels[106],
                                   iso_landen_regels[107],
                                   iso_landen_regels[108],
                                   iso_landen_regels[109],
                                   iso_landen_regels[110],
                                   iso_landen_regels[111],
                                   iso_landen_regels[112],
                                   iso_landen_regels[113],
                                   iso_landen_regels[114],
                                   iso_landen_regels[115],
                                   iso_landen_regels[116],
                                   iso_landen_regels[117],
                                   iso_landen_regels[118],
                                   iso_landen_regels[119],
                                   iso_landen_regels[120],
                                   iso_landen_regels[121],
                                   iso_landen_regels[122],
                                   iso_landen_regels[123],
                                   iso_landen_regels[124],
                                   iso_landen_regels[125],
                                   iso_landen_regels[126],
                                   iso_landen_regels[127],
                                   iso_landen_regels[128],
                                   iso_landen_regels[129],
                                   iso_landen_regels[130],
                                   iso_landen_regels[131],
                                   iso_landen_regels[132],
                                   iso_landen_regels[133],
                                   iso_landen_regels[134],
                                   iso_landen_regels[135],
                                   iso_landen_regels[136],
                                   iso_landen_regels[137],
                                   iso_landen_regels[138],
                                   iso_landen_regels[139],
                                   iso_landen_regels[140],
                                   iso_landen_regels[141],
                                   iso_landen_regels[142],
                                   iso_landen_regels[143],
                                   iso_landen_regels[144],
                                   iso_landen_regels[145],
                                   iso_landen_regels[146],
                                   iso_landen_regels[147],
                                   iso_landen_regels[148],
                                   iso_landen_regels[149],
                                   iso_landen_regels[150],
                                   iso_landen_regels[151],
                                   iso_landen_regels[152],
                                   iso_landen_regels[153],
                                   iso_landen_regels[154],
                                   iso_landen_regels[155],
                                   iso_landen_regels[156],
                                   iso_landen_regels[157],
                                   iso_landen_regels[158],
                                   iso_landen_regels[159],
                                   iso_landen_regels[160],
                                   iso_landen_regels[161],
                                   iso_landen_regels[162],
                                   iso_landen_regels[163],
                                   iso_landen_regels[164],
                                   iso_landen_regels[165],
                                   iso_landen_regels[166],
                                   iso_landen_regels[167],
                                   iso_landen_regels[168],
                                   iso_landen_regels[169],
                                   iso_landen_regels[170],
                                   iso_landen_regels[171],
                                   iso_landen_regels[172],
                                   iso_landen_regels[173],
                                   iso_landen_regels[174],
                                   iso_landen_regels[175],
                                   iso_landen_regels[176],
                                   iso_landen_regels[177],
                                   iso_landen_regels[178],
                                   iso_landen_regels[179],
                                   iso_landen_regels[180],
                                   iso_landen_regels[181],
                                   iso_landen_regels[182],
                                   iso_landen_regels[183],
                                   iso_landen_regels[184],
                                   iso_landen_regels[185],
                                   iso_landen_regels[186],
                                   iso_landen_regels[187],
                                   iso_landen_regels[188],
                                   iso_landen_regels[189],
                                   iso_landen_regels[190],
                                   iso_landen_regels[191],
                                   iso_landen_regels[192],
                                   iso_landen_regels[193],
                                   iso_landen_regels[194],
                                   iso_landen_regels[195],
                                   iso_landen_regels[196],
                                   iso_landen_regels[197],
                                   iso_landen_regels[198],
                                   iso_landen_regels[199],

                                   iso_landen_regels[200],
                                   iso_landen_regels[201],
                                   iso_landen_regels[202],
                                   iso_landen_regels[203],
                                   iso_landen_regels[204],
                                   iso_landen_regels[205],
                                   iso_landen_regels[206],
                                   iso_landen_regels[207],
                                   iso_landen_regels[208],
                                   iso_landen_regels[209],
                                   iso_landen_regels[210],
                                   iso_landen_regels[211],
                                   iso_landen_regels[212],
                                   iso_landen_regels[213],
                                   iso_landen_regels[214],
                                   iso_landen_regels[215],
                                   iso_landen_regels[216],
                                   iso_landen_regels[217],
                                   iso_landen_regels[218],
                                   iso_landen_regels[219],
                                   iso_landen_regels[220],
                                   iso_landen_regels[221],
                                   iso_landen_regels[222],
                                   iso_landen_regels[223],
                                   iso_landen_regels[224],
                                   iso_landen_regels[225],
                                   iso_landen_regels[226],
                                   iso_landen_regels[227],
                                   iso_landen_regels[228],
                                   iso_landen_regels[229],
                                   iso_landen_regels[230],
                                   iso_landen_regels[231],
                                   iso_landen_regels[232],
                                   iso_landen_regels[233],
                                   iso_landen_regels[234],
                                   iso_landen_regels[235],
                                   iso_landen_regels[236],
                                   iso_landen_regels[237],
                                   iso_landen_regels[238],
                                   iso_landen_regels[239],
                                   iso_landen_regels[240],
                                   iso_landen_regels[241],
                                   iso_landen_regels[242],
                                   iso_landen_regels[243],
                                   iso_landen_regels[244],
                                   iso_landen_regels[245],
                                   iso_landen_regels[246],
                                   iso_landen_regels[247],
                                   iso_landen_regels[248],
                                   iso_landen_regels[249],
                                   iso_landen_regels[250],
                                   iso_landen_regels[251],
                                   iso_landen_regels[252],
                                   iso_landen_regels[253],
                                   iso_landen_regels[254],
                                   iso_landen_regels[255],
                                   iso_landen_regels[256],
                                   iso_landen_regels[257],
                                   iso_landen_regels[258],
                                   iso_landen_regels[259],
                                   iso_landen_regels[260],
                                   iso_landen_regels[261],
                                   iso_landen_regels[262],
                                   iso_landen_regels[263],
                                   iso_landen_regels[264],
                                   iso_landen_regels[265],
                                   iso_landen_regels[266],
                                   iso_landen_regels[267],
                                   iso_landen_regels[268],
                                   iso_landen_regels[269],
                                   iso_landen_regels[270],
                                   iso_landen_regels[271],
                                   iso_landen_regels[272],
                                   iso_landen_regels[273],
                                   iso_landen_regels[274],
                                   iso_landen_regels[275],
                                   iso_landen_regels[276],
                                   iso_landen_regels[277],
                                   iso_landen_regels[278],
                                   iso_landen_regels[279],
                                   iso_landen_regels[280],
                                   iso_landen_regels[281],
                                   iso_landen_regels[282],
                                   iso_landen_regels[283],
                                   iso_landen_regels[284],
                                   iso_landen_regels[285],
                                   iso_landen_regels[286],
                                   iso_landen_regels[287],
                                   iso_landen_regels[288],
                                   iso_landen_regels[289],
                                   iso_landen_regels[290],
                                   iso_landen_regels[291],
                                   iso_landen_regels[292],
                                   iso_landen_regels[293],
                                   iso_landen_regels[294],
                                   iso_landen_regels[295],
                                   iso_landen_regels[296],
                                   iso_landen_regels[297],
                                   iso_landen_regels[298],
                                   iso_landen_regels[299],
                                  };
               @Override
               public int getSize() { return strings.length; }
               @Override
               public String getElementAt(int i) { return strings[i]; }
            };
            
            // set model
            jList2.setModel(iso_landen_model); 

            // set selected recruiting counry
            jList2.setSelectedValue(main.recruiting_country.trim(), true);

            // to be sure selected recruiting counry is visible
            int hulp_index = jList2.getSelectedIndex();
            jList2.ensureIndexIsVisible(hulp_index);

         } // protected void done()
      }.execute(); // new SwingWorker<Void, Void>()
   }

    
    
    
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
       // TODO add your handling code here:

       boolean doorgaan = true;
       String info = "";

       /* read meta data components */
       main.ship_name                = jTextField1.getText().trim(); 
       main.imo_number               = jTextField2.getText().trim();
       main.call_sign                = jTextField3.getText().trim().toUpperCase();
       main.masked_call_sign         = jTextField4.getText().trim().toUpperCase();
       main.barometer_above_sll      = jTextField5.getText().trim();
       main.keel_sll                 = jTextField6.getText().trim();
       main.max_height_deck_cargo    = jTextField7.getText().trim();
       main.diff_sll_wl              = jTextField8.getText().trim();
           
       if (jRadioButton1.isSelected() == true)
          main.wind_source = main.ESTIMATED_TRUE; 
       else if (jRadioButton2.isSelected() == true)
          main.wind_source = main.MEASURED_OFF_BOW;
       else if (jRadioButton17.isSelected() == true)
          main.wind_source = main.MEASURED_TRUE;

       // wind units observed/measured
       if (jRadioButton9.isSelected() == true)
          main.wind_units = main.KNOTS;
       else if (jRadioButton10.isSelected() == true)
          main.wind_units = main.M_S;
       
       // wind units graphs/dashboard
       if (jRadioButton18.isSelected() == true)
       {
          main.wind_units_dashboard = main.KNOTS;
       }
       else if (jRadioButton19.isSelected() == true)
       {
          main.wind_units_dashboard = main.M_S;
       }
      
       if (jRadioButton3.isSelected() == true)
          main.sst_exposure = main.INTAKE; 
       else if (jRadioButton4.isSelected() == true)
          main.sst_exposure = main.BUCKET;
       else if (jRadioButton5.isSelected() == true)
          main.sst_exposure = main.HULL_CONTACT_SENSOR; 
       else if (jRadioButton6.isSelected() == true)
          main.sst_exposure = main.OTHER;
       else if (jRadioButton13.isSelected() == true)
          main.sst_exposure = main.TRAILING_THERMISTOR;
       else if (jRadioButton14.isSelected() == true)
          main.sst_exposure = main.THROUGH_HULL_SENSOR;
       else if (jRadioButton15.isSelected() == true)
          main.sst_exposure = main.RADIATION_THERMOMETER;
       else if (jRadioButton16.isSelected() == true)
          main.sst_exposure = main.BAIT_TANKS_THERMOMETER;

       
       if (jRadioButton7.isSelected() == true)
          main.air_temp_exposure = main.SLING_PSYCHROMETER; 
       else if (jRadioButton8.isSelected() == true)
          main.air_temp_exposure = main.MARINE_SCREEN;

       // turned off, always UTC taken, if necessary after conversion from other time zone to UTC (see function check_and_set_datetime() in main.java
       //
       //if (jRadioButton9.isSelected() == true)
       //   main.time_zone_computer = main.TIME_ZONE_COMPUTER_UTC;
       //else if (jRadioButton10.isSelected() == true)
       //   main.time_zone_computer = main.TIME_ZONE_COMPUTER_OTHER;
       main.time_zone_computer = "";

       if (jRadioButton11.isSelected() == true)
          main.pressure_reading_msl_yes_no = main.PRESSURE_READING_MSL_YES; 
       else if (jRadioButton12.isSelected() == true)
          main.pressure_reading_msl_yes_no = main.PRESSURE_READING_MSL_NO;
       
       if (jList2.getSelectedValue() != null)                                 // nothing selected, returns null 
          main.recruiting_country       = (String)jList2.getSelectedValue();
       else
          main.recruiting_country       = ""; 
       
       if (jList1.getSelectedValue() != null)                                 // nothing selected, returns null  
          main.method_waves             = (String)jList1.getSelectedValue(); 
       else 
          main.method_waves             = "";
       

       /* checks */
       if (main.ship_name.trim().equals("") == true || main.ship_name.trim().length() < 2)
       {
          info = "Ship name: unknown/not valid";
       }
       else if (main.imo_number.trim().equals("") == true || main.imo_number.trim().length() < 2)
       {
          info = "IMO number: unknown/not valid";
       }
       else if (main.call_sign.trim().equals("") == true || main.call_sign.trim().length() < 2)
       {
          info = "Call sign: unknown/not valid";
       }
       //else if (main.time_zone_computer.trim().equals("") == true || main.time_zone_computer.trim().length() < 2)
       //{
       //   info = "Time zone computer: unknown/not valid";
       //}
       else if (main.recruiting_country.trim().equals("") == true || main.recruiting_country.trim().length() < 2)
       {
          info = "Recruiting country: unknown/not valid";
       }
       else if (main.wind_source.trim().equals("") == true || main.wind_source.trim().length() < 2)
       {
          info = "Wind source (measured/estimated): unknown/not valid";
       }
       else if (main.max_height_deck_cargo.trim().equals("") == true || main.max_height_deck_cargo.trim().length() < 1)
       {
          info = "Maximum height deck cargo: unknown/not valid";
       }
       else if (main.diff_sll_wl.trim().equals("") == true || main.diff_sll_wl.trim().length() < 1)
       {
          info = "Difference SLL and water line: unknown/not valid";
       }
       
       else if (main.wind_units.trim().equals("") == true || main.wind_units.trim().length() < 2)
       {
          info = "Wind speed units measured/estimated unknown/not valid";
       }
       
       // only for AWS ??
       //else if (main.wind_units_dashboard.trim().equals("") == true || main.wind_units_dashboard.trim().length() < 2)
       //{
       //   info = "Wind speed units dashboard unknown/not valid";
       //}
       
       
       else if (main.pressure_reading_msl_yes_no.trim().equals("") == true || main.pressure_reading_msl_yes_no.trim().length() < 2)
       {
          info = "Air pressure reading indication: unknown/not valid";
       }
       else if (main.barometer_above_sll.trim().equals("") == true || main.barometer_above_sll.trim().length() < 1)
       {
          info = "Height of the barometer above SLL: unknown/not valid";
       }
       else if (main.keel_sll.trim().equals("") == true || main.keel_sll.trim().length() < 1)
       {
          info = "Distance of bottom of the keel to SLL: unknown/not valid";
       }
       else if (main.air_temp_exposure.trim().equals("") == true || main.air_temp_exposure.trim().length() < 2)
       {
          info = "Air temp exposure: unknown/not valid";
       }
       else if (main.sst_exposure.trim().equals("") == true || main.sst_exposure.trim().length() < 2)
       {
          info = "Sea water temp exposure: unknown/not valid";
       }
       //else if ( (main.pressure_reading_msl_yes_no.trim().equals(main.PRESSURE_READING_MSL_YES) == true) &&
      //           (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2 || main.RS232_connection_mode == 4 ||
      //            main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6 || main.RS232_connection_mode == 7 
      //         ) )   // PTB220 or PTB330 or MintakaDuo or Mintaka Star USB or Mintaka Star WiFi AP or Mintaka Star WiFi station
      // {
      //    info = "TurboWin+ will always retrieve the pressure at instrument level (never at MSL) of the connected barometer\n";
      //    info += "If the reading indicates MSL pressure and there is no barometer connected to TurboWin+ please deselect first \n";
      //    
      //    if (main.RS232_connection_mode == 6 || main.RS232_connection_mode == 7)  // Mintaka Star WiFi AP or Mintaka Star WiFi station
      //    {
      //       info += "the instrument connected (Maintenance -> Serial/USB/LAN connection settings)";
      //    }
      //    else
      //    {
      //       info += "the instrument connected (Maintenance -> Serial/USB/LAN connection settings)";
      //    }
      // }
      // else if ( (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES) == true) &&
      //           (main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10) )            // AWS connected
      // {
      //    info = "If AWS connected please select: \"does the reading indicate MSL pressure = no\"\n";
      //    info += "If the reading indicates MSL pressure and there is no AWS connected to TurboWin+ please deselect first \n";
      //    info += "the AWS instrument connected (Maintenance -> Serial/USB/LAN connection settings)";
      // }
       
      
       else if ( (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES) == true) &&
                 (main.RS232_connection_mode != 0) )            // AWS or barometer connected
       {
          info = "If AWS or barometer connected (Maintenance -> Serial/USB/LAN connection settings) please select: \"does the reading indicate MSL pressure = no\"\n";
       }

       else if ( (main.wind_units.equals(main.M_S) == false) &&
                 (main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10) )            // AWS connected
       {
          info = "If AWS connected please select: \"wind speed units estimated/measured = m/s\"\n";
       }
      
       // extra check 'wind source' and AWS connected
       else if ((main.wind_source.equals(main.MEASURED_OFF_BOW) == false) && ((main.RS232_connection_mode == 3) || (main.RS232_connection_mode == 9) || (main.RS232_connection_mode == 10))) 
       {
          info = "If AWS connected please select: wind source = \"measured speed + app. dir. (OFF THE BOW, clockwise)\"\n";
       }
       
       
       /////// if info/warning available -> pop-up message //////
       //
       if (info.compareTo("") != 0)
       {
          doorgaan = false;
          JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
       }
       else
       {
          doorgaan = true;
       }

       
       // call sign extra check (all char in range a-z or A-Z or 0-9)
       //
       if (doorgaan == true)
       {
         badChar = Pattern.compile("[^A-Za-z0-9]");
         if (badChar.matcher(main.call_sign.trim()).find())    
         {
             info = "Call sign: invalid character(s)";
             JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             doorgaan = false;             
          }
       }

       
       if (doorgaan == true)
       {
          // max. height deck cargo
          //
          try
          {
             int int_max_height_deck_cargo = Integer.parseInt(main.max_height_deck_cargo.trim());

             if (int_max_height_deck_cargo < 0 || int_max_height_deck_cargo > 100)
             {
                info = "Max. height deck cargo above SLL must be in range 0 - 100 metres (rounded)";
                JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                doorgaan = false;
             }
          } // try
          catch (NumberFormatException e)
          {
             info = "Max. height deck cargo above SLL must be in range 0 - 100 metres (rounded)";
             JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             doorgaan = false;
          } // catch
       } // if (doorgaan == true)

       if (doorgaan == true)
       {
          // difference SLL and water line
          //
          try
          {
             int int_diff_sll_wl = Integer.parseInt(main.diff_sll_wl.trim());

             if (int_diff_sll_wl < -10 || int_diff_sll_wl > 50)
             {
                info = "Difference SLL and water line must be in range -10 - 50 metres (rounded)";
                JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                doorgaan = false;
             }
          } // try
          catch (NumberFormatException e)
          {
             info = "Difference SLL and water line must be in range -10 - 50 metres (rounded)";
             JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             doorgaan = false;
          } // catch
       } // if (doorgaan == true)

       if (doorgaan == true)
       {
          // height of the barometer above SLL
          //
          try
          {
             //int int_barometer_above_sll = Integer.parseInt(main.barometer_above_sll.trim());
             float float_barometer_above_sll = Float.parseFloat(main.barometer_above_sll.trim());

             //if (int_barometer_above_sll < 0 || int_barometer_above_sll > 50)
             if (float_barometer_above_sll < 0.0 || float_barometer_above_sll > 50.0)
             {
                info = "Height of the barometer above SLL must be in range 0.0 - 50.0 metres";
                JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                doorgaan = false;
             }
          } // try
          catch (NumberFormatException e)
          {
             info = "Height of the barometer above SLL must be in range 0.0 - 50.0 metres";
             JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             doorgaan = false;
          } // catch
       } // if (doorgaan == true)

       if (doorgaan == true)
       {
          // distance of bottom of the keel to SLL
          //
          try
          {
             //int int_keel_sll = Integer.parseInt(main.keel_sll.trim());
             float float_keel_sll = Float.parseFloat(main.keel_sll.trim());

             //if (int_keel_sll < 0 || int_keel_sll > 50)
             if (float_keel_sll < 0 || float_keel_sll > 50)
             {
                info = "Distance of bottom of the keel to SLL must be in range 0.0 - 50.0 metres";
                JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                doorgaan = false;
             }
          } // try
          catch (NumberFormatException e)
          {
             info = "Distance of bottom of the keel to SLL must be in range 0.0 - 50.0 metres";
             JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             doorgaan = false;
          } // catch
       } // if (doorgaan == true)


       if (doorgaan == true)
       {
          
          if (main.recruiting_country.indexOf("UNITED KINGDOM") != -1)
          {
             //JOptionPane.showMessageDialog(null, main.recruiting_country, main.APPLICATION_NAME + " test uk ok", JOptionPane.WARNING_MESSAGE);

             // see also myemailsettings.java
             // NB omdat na invullen van dit scherm niet direct emailsettings invul scherm geopend wordt
             //    hier direct de obs_email_subject zetten en vastleggen in configuratie file voor UK recruited ships
             main.obs_email_subject = main.UK_OBS_EMAIL_SUBJECT;
          }
          else // all other countries
          {
             main.obs_email_subject = main.GENERAL_OBS_EMAIL_SUBJECT;
          }          
          
          
       } // if (doorgaan == true)


       if (doorgaan == true)
       {
          /* write to configuration file in logs dir (backup for muffin) and user dir */
          //main.schrijf_configuratie_regels();
          //
          /* write to muffin */
          //main.set_muffin();
          //
          // write meta (station) data to muffins or configuration files
          if (main.offline_mode_via_cmd == true)
          {
             main.schrijf_configuratie_regels();          
          }
          else // so offline_via_jnlp mode or online (webstart) mode
          {
             main.set_muffin();
             main.schrijf_configuratie_regels();
          }   

          /* update call sign fields on main screen progress */
          main.call_sign_fields_update();

          /* message */
          //info = "Changes will take effect inmediatelly. Not necessary to restart";
          info = "Changes will take full effect after a TurboWin+ restart";
          JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);

          /* close input page */
          setVisible(false);
          dispose();
       } // if (doorgaan == true)
    }//GEN-LAST:event_OK_button_actionPerformed

    
    private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
        // TODO add your handling code here:
               
       /* close input page */
       setVisible(false);
       dispose();
    }//GEN-LAST:event_Cancel_button_actionPerformed

    
    private void import_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_button_actionPerformed
       // TODO add your handling code here:
       
       boolean doorgaan = true;
       //String configuration_dir;

      String info = "If this is not the first time use of this program then you can import previous (automatically) saved station data\n" ;
      info += "The location of the station data file depends on the TurboWin+ installation folder (in web mode determined by the operating system)\n";
      info += "If the location of the station data file (configuration.txt) is not known you can do, before importing, a file search on your disk outside TurboWin+";

      // ONDERSTAANDE KAN NIET OMDAT LOG DIR DAN OOK NIET BEKEND IS
      //if (main.offline_mode == true)
      //{
      //    // e.g. in offline mode: main.logs_dir = c:\meteo\turboweb\log -> dir of configuration.txt = c:\meteo\turboweb
      //   int pos = main.logs_dir.lastIndexOf(java.io.File.separator);
      //    configuration_dir = main.logs_dir.substring(0, pos);
      //}
      //else
      //{
      //   configuration_dir = main.logs_dir;
      //}
      //info += configuration_dir;
      
      int reply = JOptionPane.showConfirmDialog(null, info, main.APPLICATION_NAME, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      if (reply == JOptionPane.CANCEL_OPTION)
      {
         doorgaan = false;
      }

      if (doorgaan == true)
      {
         // pop-up the file chooser dialog box
         JFileChooser chooser = new JFileChooser();

         //Add a custom file filter and disable the default "(Accept All)" file filter.
         chooser.addChoosableFileFilter(new myfilefilter()); // zie myfilefilter.java
         chooser.setAcceptAllFileFilterUsed(false);

         int result = chooser.showOpenDialog(mystationdata.this);
         if (result == JFileChooser.APPROVE_OPTION)
         {
            import_file = chooser.getSelectedFile().getPath();

            new SwingWorker<Void, Void>()
            {
               @Override
               protected Void doInBackground() throws Exception
               {
                  // NB e.g. configuratie_regels[2]  = "wind source        : estimated; true speed and true direction"
                  int teller;
                  String file_line;

                  //String volledig_path = hulp_dir + java.io.File.separator + CONFIGURATION_FILE;
                  String volledig_path = import_file;

                  for (teller = 0; teller < main.MAX_AANTAL_CONFIGURATIEREGELS; teller++)
                  {
                     main.configuratie_regels[teller] = "";
                  }

                  /* read all lines from configuration file */
                  try
                  {
                     BufferedReader in = new BufferedReader(new FileReader(volledig_path));

                     teller = 0;
                     while((file_line = in.readLine()) != null)
                     {
                        // do not immport the log dir! (because log dir could be changed after a new install, mainly problems in standalone mode -> fixed logs dir)
                        if (((file_line.indexOf(main.LOGS_DIR_TXT) == -1) && (main.offline_mode == true)) || (main.offline_mode == false))
                        {
                           main.configuratie_regels[teller] = file_line;
                        }
                        
                        teller++;

                        /* for safety */
                        if (teller >= main.MAX_AANTAL_CONFIGURATIEREGELS)
                        {
                           break;
                        }

                     } // while((file_line = in.readLine()) != null)
                     in.close();
                  } // try
                  catch (Exception e)
                  {
                     JOptionPane.showMessageDialog(null, "Error reading file configuration.txt",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  } // catch

                  /* put collected meta data from configuration file into appropriate global vars */
                  main.meta_data_from_configuration_regels_into_global_vars();

                  /* and put global vars into this station data form */
                  initStationComponents();

                  return null;

               } // protected Void doInBackground() throws Exception

               @Override
               protected void done()
               {
                  /* niets */
               }
            }.execute(); // new SwingWorker<Void, Void>()

            /* Also muffin / configuration file writing */
            //main.set_muffin();
            //
            // write meta (station) data to muffins or configuration files
            if (main.offline_mode_via_cmd == true)
            {
               main.schrijf_configuratie_regels();          
            }
            else // so offline_via_jnlp mode or online (webstart) mode
            {
               main.set_muffin();
               main.schrijf_configuratie_regels();
            }   
            
         } // if (result == JFileChooser.APPROVE_OPTION
      } // if (doorgaan == true)
    }//GEN-LAST:event_import_button_actionPerformed

    
   private void initStationComponents() 
   {
      // method determing waves
      //jList1.setModel(new javax.swing.AbstractListModel() 
      ListModel<String> waves_model = new AbstractListModel<String>()
      {
         String[] strings = { 
                              main.SEA_AND_SWELL_ESTIMATED,//"wind sea and swell estimated",
                              
                              // NOTE
                              // SO ONLY ESTIMEATED WAVES POSSIBLE
                              // IF STATEMENTS BELOW ARE ENABLED AGAIN ALSO CHANGE CODE FOR IMMT STORAGE 
                              // (CHAR 56 etc IN IMMT-3, SEE MAIN.JAVA FUNCTION IMMT_log())
                              
                              //main.WAVES_MEASURED_SHIPBORNE,//"waves measured (shipborne wave recorder)",
                              //main.WAVES_MEASURED_BUOY,//"waves measured (buoy)",
                              //main.WAVES_MEASURED_OTHER//"waves measured (other measurement system)"
                            };
         @Override
         public int getSize() { return strings.length; }
         @Override
         public String getElementAt(int i) { return strings[i]; }
      };  

      // set model
      jList1.setModel(waves_model); 
       
       
      // recruiting country (NB in java not possible to sort directly)
      //
      lees_iso_landen_codes();  // in this function jList2 is populated, not possible to fill List2 here
                                // because swingworker not finished with reading country names and codes,
                                // so must be done in the swingworker done method
      
       
      // NB when created, arrays are automatically initialized with the default value of their type 
       
      
      
      /* put global meta data vars from configuration file into appropriate components */
      
      // ship name
      //
      jTextField1.setText(main.ship_name.trim());
      
      // IMO nummer
      //
      jTextField2.setText(main.imo_number.trim());
             
      // call sign
      //
      jTextField3.setText(main.call_sign.trim());
             
      // masked call sign
      //
      jTextField4.setText(main.masked_call_sign.trim());
            
      // time zone computer
      //
      // uitgeschakeld, wellicht in de toekomst weer gebruiken (function check_and_set_datetime() in main.java)
      //
      //if (main.time_zone_computer.trim().equals(main.TIME_ZONE_COMPUTER_UTC))
      //   jRadioButton9.setSelected(true);
      //else if (main.time_zone_computer.trim().equals(main.TIME_ZONE_COMPUTER_OTHER))
      //   jRadioButton10.setSelected(true);
            
      // recruiting country
      //
      // NB see function lees_iso_landen_codes()

      // method determining waves
      //
      jList1.setSelectedValue(main.method_waves.trim(), true);
            
      // wind meta data
      //
      if (main.wind_source.trim().indexOf("estimated") != -1)
         jRadioButton1.setSelected(true); 
      else if ((main.wind_source.trim().indexOf("measured") != -1) && (main.wind_source.trim().indexOf("apparent") != -1))
         jRadioButton2.setSelected(true);
      else if ((main.wind_source.trim().indexOf("measured") != -1) && (main.wind_source.trim().indexOf("true") != -1))
         jRadioButton17.setSelected(true);
             
      jTextField7.setText(main.max_height_deck_cargo.trim());
      jTextField8.setText(main.diff_sll_wl.trim());

      if (main.wind_units.trim().indexOf(main.KNOTS) != -1)
         jRadioButton9.setSelected(true);
      else if (main.wind_units.trim().indexOf(main.M_S) != -1)
         jRadioButton10.setSelected(true);
      else // if nothing selected before set selection to "KNOTS"
         jRadioButton9.setSelected(true);
      //JOptionPane.showMessageDialog(null, main.wind_units, main.APPLICATION_NAME + " TEST", JOptionPane.WARNING_MESSAGE);
      
      if (main.wind_units_dashboard.trim().indexOf(main.KNOTS) != -1)
      {
         jRadioButton18.setSelected(true);
      }
      else if (main.wind_units_dashboard.trim().indexOf(main.M_S) != -1)
      {
         jRadioButton19.setSelected(true);
      }
      else // if nothing selected before set selection to "KNOTS"
      {
         jRadioButton18.setSelected(true);
      }
      
      // air pressure meta data
      //
      jTextField5.setText(main.barometer_above_sll.trim());
      jTextField6.setText(main.keel_sll.trim());
      if (main.pressure_reading_msl_yes_no.trim().equals(main.PRESSURE_READING_MSL_YES))
         jRadioButton11.setSelected(true);
      else if (main.pressure_reading_msl_yes_no.trim().equals(main.PRESSURE_READING_MSL_NO))
        jRadioButton12.setSelected(true);
            
      // air temp exposure
      //
      if (main.air_temp_exposure.trim().equals(main.SLING_PSYCHROMETER))
         jRadioButton7.setSelected(true);
      else if (main.air_temp_exposure.trim().equals(main.MARINE_SCREEN))
         jRadioButton8.setSelected(true);
              
      // sst exposure
      //
      if (main.sst_exposure.trim().equals(main.INTAKE))
         jRadioButton3.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.BUCKET))
         jRadioButton4.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.HULL_CONTACT_SENSOR))
        jRadioButton5.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.OTHER))
        jRadioButton6.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.TRAILING_THERMISTOR))
        jRadioButton13.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.THROUGH_HULL_SENSOR))
        jRadioButton14.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.RADIATION_THERMOMETER))
        jRadioButton15.setSelected(true);
      else if (main.sst_exposure.trim().equals(main.BAIT_TANKS_THERMOMETER))
        jRadioButton16.setSelected(true);
      
      
      // wind units in graps/dasboard
      // NB For the tiem being always knots!!!!!
      //jRadioButton18.setSelected(true);
   }
    
   
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mystationdata().setVisible(true);
            }
        });
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.ButtonGroup buttonGroup4;
   private javax.swing.ButtonGroup buttonGroup5;
   private javax.swing.ButtonGroup buttonGroup6;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel18;
   private javax.swing.JLabel jLabel19;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel20;
   private javax.swing.JLabel jLabel21;
   private javax.swing.JLabel jLabel22;
   private javax.swing.JLabel jLabel23;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JList<String> jList1;
   private javax.swing.JList<String> jList2;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   private javax.swing.JPanel jPanel6;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton10;
   private javax.swing.JRadioButton jRadioButton11;
   private javax.swing.JRadioButton jRadioButton12;
   private javax.swing.JRadioButton jRadioButton13;
   private javax.swing.JRadioButton jRadioButton14;
   private javax.swing.JRadioButton jRadioButton15;
   private javax.swing.JRadioButton jRadioButton16;
   private javax.swing.JRadioButton jRadioButton17;
   private javax.swing.JRadioButton jRadioButton18;
   private javax.swing.JRadioButton jRadioButton19;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JRadioButton jRadioButton7;
   private javax.swing.JRadioButton jRadioButton8;
   private javax.swing.JRadioButton jRadioButton9;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField3;
   private javax.swing.JTextField jTextField4;
   private javax.swing.JTextField jTextField5;
   private javax.swing.JTextField jTextField6;
   private javax.swing.JTextField jTextField7;
   private javax.swing.JTextField jTextField8;
   // End of variables declaration//GEN-END:variables

   // constants
   private final int MAX_AANTAL_ISO_LANDEN_REGELS  = 300;
   //private final String STATION_HELP_DIR             = "station.html";

   // var's scope only this module
   private String[] iso_landen_regels              = new String[MAX_AANTAL_ISO_LANDEN_REGELS];// default values: null

   private static String import_file;
   Pattern badChar;
}

