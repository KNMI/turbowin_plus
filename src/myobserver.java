
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * myobserver.java
 *
 * Created on 26-nov-2008, 16:46:01
 */

/**
 *
 * @author Martin
 */
public class myobserver extends javax.swing.JFrame {

    /** Creates new form myobserver */
    public myobserver() {
        initComponents();
        initComponents2();
        setLocation(main.x_pos_frame, main.y_pos_frame);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jSeparator1 = new javax.swing.JSeparator();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      jTable1 = new javax.swing.JTable();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jButton3 = new javax.swing.JButton();
      jLabel4 = new javax.swing.JLabel();
      jButton4 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Observer");
      setMinimumSize(new java.awt.Dimension(800, 600));
      setResizable(false);

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jTable1.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
         },
         new String [] {
            "surname", "full initials*", "rank", "discharge book**"
         }
      ) {
         Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }
      });
      jTable1.setPreferredSize(new java.awt.Dimension(300, 322));
      jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jTable1.getTableHeader().setReorderingAllowed(false);
      jScrollPane1.setViewportView(jTable1);

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setText("*e.g. A.B.                                                   **discharge book or seaman's card number, if applicable");

      jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel2.setText("--- double click cell to insert new data ---");

      jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel3.setText("--- to clear table cells: double click appropriate cells and delete data ---");

      jButton3.setText("Internet");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_actionPerformed(evt);
         }
      });

      jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel4.setText("--- single click row to select observer ---");
      jLabel4.setMaximumSize(new java.awt.Dimension(338, 14));
      jLabel4.setMinimumSize(new java.awt.Dimension(338, 14));

      jButton4.setText("Back");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton5.setText("Stop");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionParformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                           .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 36, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jSeparator1)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(39, 39, 39)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel3)
            .addGap(18, 18, 18)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents





   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {

      if (main.offline_mode == true)
      {
         jButton3.setText("Help");
      }


      // hide Back/Stop buttons if not in next_screen_mode
      if (main.in_next_sequence == false)
      {
         jButton4.setEnabled(false);                         // back button
         jButton5.setEnabled(false);                         // stop button
      }


      /* for Germany recruited ships different column heading (christian name instead of full initials) */

      // http://forums.sun.com/thread.jspa?threadID=751059
      //
      // Creating methods getColumnNames() and setColumnNames() does nothing since the getColumnNames() method of the TableModel is not invoked again after the TableModel has been added to the table
      // You could recreate the entire TableColumnModel (and TableColumns) by doing something like:
      //
      // DefaultTableModel model = new DefaultTableModel(....);
      // table.setModel( model );

      if (main.recruiting_country.indexOf("GERMANY") != -1)
      {
         DefaultTableModel model = new DefaultTableModel
         (
            new Object [][]
            {
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null},
               {null, null, null, null}
            },
            new String []
            {
               "surname", "full christian name*", "rank", "discharge book**"
            }
         );

         jTable1.setModel(model);

         jLabel1.setText("*e.g. Heinz Andreas Dieter                                        **discharge book or seaman's card number if applicable");

      } // if (main.recruiting_country.indexOf("GERMANY") != -1)


      lees_observer_log_en_vul_table();
   }



/*
   private void initComponents3()
   {
      class MyTableModel extends AbstractTableModel
      {
         private String[] columnNames = {"First Name",
                                         "Last Name",
                                         "Sport",
                                         "# of Years",
                                         "Vegetarian"};
         private Object[][] data =
         {
            {"Mary", "Campione", "Snowboarding", new Integer(5), new Boolean(false)},
            {"Alison", "Huml", "Rowing", new Integer(3), new Boolean(true)},
            {"Kathy", "Walrath", "Knitting", new Integer(2), new Boolean(false)},
            {"Sharon", "Zakhour", "Speed reading", new Integer(20), new Boolean(true)},
            {"Philip", "Milne", "Pool", new Integer(10), new Boolean(false)},
         };

         public int getColumnCount() {
            return columnNames.length;
         }

         @Override
         public int getRowCount() {
            return data.length;
         }

         @Override
         public String getColumnName(int col) {
            return columnNames[col];
         }

         public Object getValueAt(int row, int col) {
            return data[row][col];
         }

         //
         // JTable uses this method to determine the default renderer/
         // editor for each cell.  If we didn't implement this method,
         // then the last column would contain text ("true"/"false"),
         // rather than a check box.
         //
         @Override
         public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
         }

         //
         // Don't need to implement this method unless your table's
         // editable.
         //
         @Override
         public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            if (col < 2) {
                return false;
            } else {
                return true;
            }
         }

         //
         // Don't need to implement this method unless your table's
         // data can change.
         //
         public void setValueAt(Object value, int row, int col) {
            boolean DEBUG = true;
            if (DEBUG) {
                System.out.println("Setting value at " + row + "," + col
                                   + " to " + value
                                   + " (an instance of "
                                   + value.getClass() + ")");
            }

            data[row][col] = value;
            fireTableCellUpdated(row, col);

            if (DEBUG) {
                System.out.println("New value of data:");
                printDebugData();
            }
         }

         private void printDebugData()
         {
            int numRows = getRowCount();
            int numCols = getColumnCount();

            for (int i=0; i < numRows; i++) {
                System.out.print("    row " + i + ":");
                for (int j=0; j < numCols; j++) {
                    System.out.print("  " + data[i][j]);
                }
                System.out.println();
            }
            System.out.println("--------------------------");
         }
      } // class MyTableModel extends AbstractTableModel

   } // private void initComponents3()
*/


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   public void stopCellEditing()
   {
      TableCellEditor editor = jTable1.getCellEditor();
      if (editor != null )
      {
         editor.stopCellEditing();
      }
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
        // TODO add your handling code here:


       /* initialisation */
       clear_observer_data_array();


       // NOTE: stopCellEditing() is called automatically when you hit [Enter] or [Tab] on a cell indicating the end of editing
       //       But we want it to stop if the user click the OK button, if fuction stopCellEditing() is not called
       //       it is possible that the last changes/inserts of a cell, if this cell has still the focus, are ignored
       //       when pressing the OK button
       stopCellEditing();

       // collect data from all table cells
       for (int r = 0; r < OBSERVER_ROWS; r++)
       {
          for (int c = 0; c < OBSERVER_COLUMNS; c++)
          {
             observer_data[r][c] = (String)jTable1.getValueAt(r, c);
          }
       }

       /* save observer data to file */
       schrijf_observer_log();


       // retrieve selected observer (surname + full initials + rank + discharge number)
       int selectedRow = jTable1.getSelectedRow();           // index of the firstselected row (start 0); -1 if no row was selected
       //JOptionPane.showMessageDialog(null, selectedRow);
       if (selectedRow != -1) // -1 means no observer row selected
       {
          // nu kan het zijn dat na invullen van een nieuwe naam deze direct wordt geselecteerd
          // dan was deze bv Janssen;K;;; en wordt zo geschreven in immt.log
          // maar wordt opgeslagen in observer.log als Janssen;K;-;-;
          // dan bij downloaden log files geen match !!

          if (observer_data[selectedRow][1].equals("") == true)       // full initials
          {
             observer_data[selectedRow][1] = "-";
          }
          if (observer_data[selectedRow][2].equals("") == true)       // rank
          {
             observer_data[selectedRow][2] = "-";
          }
          if (observer_data[selectedRow][3].equals("") == true)       // discharge book number
          {
             observer_data[selectedRow][3] = "-";
          }

          selected_observer = observer_data[selectedRow][0] + ";" + observer_data[selectedRow][1] + ";" + observer_data[selectedRow][2] + ";" + observer_data[selectedRow][3] + ";";
       } // if (selectedRow != -1)


       /* update observer field on main (progress) screen */
       main.observer_field_update();

       /* close input page */
       setVisible(false);
       dispose();

       /* next screen if in_next_screen mode */
       if (main.in_next_sequence == true)
       {
          // last input screen of the next_screen_mode sequence
          main.in_next_sequence = false;
       }

    }//GEN-LAST:event_OK_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void clear_observer_data_array()
   {
      for (int r = 0; r < OBSERVER_ROWS; r++)
      {
         for (int c = 0; c < OBSERVER_COLUMNS; c++)
         {
            observer_data[r][c] = "";
         }
      }
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void lees_observer_log_en_vul_table()
   {
      /* NB input/output GUI always via a SwingWorker (Core Java Volume 1 bld 795 e.v.; Volume 2 bld 37, 215) */

      new SwingWorker<Void, Void>()
      {
         @Override
         protected Void doInBackground() throws Exception
         {
            String record;
            int pos_begin;
            int pos_eind;
            int r;

            /* initialisation */
            clear_observer_data_array();


            String volledig_path = main.logs_dir + java.io.File.separator + main.OBSERVER_LOG;

            /* read all lines from observer log */
            try
            {
               BufferedReader in = new BufferedReader(new FileReader(volledig_path));

               r = 0;
               while((record = in.readLine()) != null)
               {
                  pos_begin = 0;
                  pos_eind = 0;
                  for (int c = 0; c < OBSERVER_COLUMNS; c++)
                  {
                     pos_eind = record.indexOf(";", pos_begin);                                   // Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.

                     if (pos_eind != -1)
                     {
                        observer_data[r][c] = record.substring(pos_begin, pos_eind);
                        pos_begin = pos_eind +1;
                     }
                     else
                     {
                        break;
                     }
                  } // for (int c = 0; c < OBSERVER_COLUMNS; c++)

                  r++;

                  /* safety */
                  if (r >= OBSERVER_ROWS)
                  {
                     break;
                  }
               } // while((file_line = in.readLine()) != null)
               in.close();
            } // try
            catch (Exception e)
            {
               // do nothing, possible file was never created
            } // catch

            return null;
         } // protected Void doInBackground() throws Exception

         @Override
         protected void done()
         {
            // collect data from all table cells
            for (int r = 0; r < OBSERVER_ROWS; r++)
            {
               for (int c = 0; c < OBSERVER_COLUMNS; c++)
               {
                  jTable1.setValueAt(observer_data[r][c], r, c);
               }
            } // for (int r = 0; r < OBSERVER_ROWS; r++)


            // select the row of the observer which was selected befor
            //
            for (int r = 0; r < OBSERVER_ROWS; r++)
            {
               if ( (selected_observer.compareTo("") != 0) &&
                    (observer_data[r][0].compareTo("") != 0) &&
                    (observer_data[r][1].compareTo("") != 0) )
               {
                  if ( (selected_observer.indexOf(observer_data[r][0]) != -1) &&   // [0] : surname
                       (selected_observer.indexOf(observer_data[r][1]) != -1) )    // [1] : initials
                  {
                     jTable1.setRowSelectionInterval(r ,r);
                     break;
                  }
               }
            } // for (int r = 0; r < OBSERVER_ROWS; r++)

         } // protected void done()
      }.execute(); // new SwingWorker<Void, Void>()
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void schrijf_observer_log()
   {
      /* NB input/output in a GUI always via a SwingWorker (Core Java Volume 1 bld 795 e.v.; Volume 2 bld 37, 215) */
      boolean doorgaan = true;


      // first test if logs folder was defined
      if (main.logs_dir.equals("") == true)
      {
         JOptionPane.showMessageDialog(null, "Logs folder unknown, please select: Maintenance -> Log files settings", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
         doorgaan = false;
      }

      // ok logs dir is known
      if (doorgaan == true)
      {
         new SwingWorker<Void, Void>()
         {
            @Override
            protected Void doInBackground() throws Exception
            {
               String volledig_path = main.logs_dir + java.io.File.separator + main.OBSERVER_LOG;

               try
               {
                  BufferedWriter out = new BufferedWriter(new FileWriter(volledig_path));

                  for (int r = 0; r < OBSERVER_ROWS; r++)
                  {
                     // at least surname must be present (c = 0)
                     if ((observer_data[r][0] != null) && (observer_data[r][0].compareTo("") != 0))
                     {
                        for (int c = 0; c < OBSERVER_COLUMNS; c++)
                        {
                           if ((observer_data[r][c] != null) && (observer_data[r][c].compareTo("") != 0))
                           {
                              out.write(observer_data[r][c]);
                           }
                           else // empty field/cell
                           {
                              out.write("-");
                           }
                        
                           out.write(";");                         // semi-column seperated

                        } // for (int c = 0; c < OBSERVER_COLUMNS; c++)

                        out.newLine();   // newLine(): write a line separator. The line separator string is defined by the system property line.separator, and is not necessarily a single newline ('\n') character.

                     } // if ((observer_data[r][0] != null)
                  } // for (int r = 0; r < OBSERVER_ROWS; r++)

                  out.close();

               } // try
               catch (Exception e)
               {
                  JOptionPane.showMessageDialog(null, "unable to write to: " + volledig_path, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               } // catch

               return null;

            } // protected Void doInBackground() throws Exception
         }.execute(); // new SwingWorker<Void, Void>()
      } // if (doorgaan == true)
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
        // TODO add your handling code here:

       /* close input page */
       setVisible(false);
       dispose();

       /* next screen in in next sequence mode */
       if (main.in_next_sequence == true)
       {
          // last input screen of the next_screen_mode sequence
          main.in_next_sequence = false;
       }
    }//GEN-LAST:event_Cancel_button_actionPerformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Internet_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_actionPerformed
       // TODO add your handling code here:
       main.internet_mouseClicked(OBSERVER_HELP_DIR);
    }//GEN-LAST:event_Internet_button_actionPerformed

    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       previous_screen();
    }//GEN-LAST:event_Back_button_actionPerformed

    
    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void Stop_button_actionParformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionParformed
       // TODO add your handling code here:
       setVisible(false);
       dispose();

       main.in_next_sequence = false;
    }//GEN-LAST:event_Stop_button_actionParformed


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    private void previous_screen()
    {
       mycloudcover form = new mycloudcover();
       form.setSize(800, 600);
       form.setVisible(true);
    }


    /***********************************************************************************************/
    /*                                                                                             */
    /*                                                                                             */
    /*                                                                                             */
    /***********************************************************************************************/
    //private void next_screen()
    //{
    //   myposition form = new myposition();
    //   form.setSize(800, 600);
    //   form.setVisible(true);
    //}



    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new myobserver().setVisible(true);
            }
        });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTable jTable1;
   // End of variables declaration//GEN-END:variables


   // constants
   public static final int OBSERVER_ROWS          = 20;  // static!!    // zie ook MAX_AANTAL_WAARNEMERS in main.java
   public static final int OBSERVER_COLUMNS       = 4;   // static!!
   private final String OBSERVER_HELP_DIR          = "observer.html";

   // scope this module + myturbowin.java main module (all of type: static)
   public static String[][] observer_data         = new String[OBSERVER_ROWS][OBSERVER_COLUMNS];// default values: null
   public static String selected_observer         = "";

}
