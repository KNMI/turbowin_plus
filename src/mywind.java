//import java.io.BufferedWriter;
//import java.io.FileWriter;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
/*
 * mywind.java
 *
 * Created on 29 augustus 2007, 10:27
 */

/**
 *
 * @author  Martin
 */
public class mywind extends javax.swing.JFrame {
    
    /** Creates new form mywind */
    public mywind() {
        initComponents();
        initComponents2();
        //lees_wind_source_uit_file();
        initSynopparameters();
        setLocation(main.x_pos_frame, main.y_pos_frame);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jSeparator1 = new javax.swing.JSeparator();
      jLabel1 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton3 = new javax.swing.JRadioButton();
      jTextField6 = new javax.swing.JTextField();
      jTextField7 = new javax.swing.JTextField();
      jLabel7 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();
      jPanel1 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jTextField2 = new javax.swing.JTextField();
      jTextField3 = new javax.swing.JTextField();
      jTextField4 = new javax.swing.JTextField();
      jTextField5 = new javax.swing.JTextField();
      jLabel13 = new javax.swing.JLabel();
      jLabel14 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      jLabel18 = new javax.swing.JLabel();
      jButton4 = new javax.swing.JButton();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jButton5 = new javax.swing.JButton();
      jLabel19 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Wind");
      setResizable(false);

      jLabel1.setText("source (Maintenance --> Station data)");
      jLabel1.setEnabled(false);

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("estimated; true speed and true direction");
      jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton1.setEnabled(false);
      jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("measured; apparent speed and apparent direction (OFF THE BOW, clockwise)");
      jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRadioButton2.setEnabled(false);
      jRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));

      buttonGroup1.add(jRadioButton3);
      jRadioButton3.setText("measured; true speed and true direction");
      jRadioButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
      jRadioButton3.setEnabled(false);
      jRadioButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));

      jLabel7.setText("max. height deck cargo above summer load line (metres)");

      jLabel8.setText("difference between summer load line and water line (metres)*");

      jLabel15.setText("*negative if summer load line is below water line");

      jLabel16.setText("[0 - 100]");

      jLabel17.setText("[-10 - 50]");

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel2.setText("wind dir. (degr)");

      jLabel3.setText("wind speed (knots)");

      jLabel4.setText("ship's ground course (degr)*");

      jLabel5.setText("ship's ground speed (knots)*");

      jLabel6.setText("ship's heading (degr)*");

      jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            wind_speed_textfield_focusLost(evt);
         }
      });

      jLabel13.setText("[variable, calm, 1 - 360]");

      jLabel14.setText("[0 - 200]");

      jLabel10.setText("[stationary, 1 - 360]");

      jLabel11.setText("[0.0 - 50.0]");

      jLabel12.setText("[1 - 360]");

      jLabel18.setText("* for the actual time of the wind observation");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(35, 35, 35)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel4)
                  .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
               .addComponent(jLabel2)
               .addComponent(jLabel3)
               .addComponent(jLabel6))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jTextField5)
               .addComponent(jTextField4)
               .addComponent(jTextField3)
               .addComponent(jTextField2)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(4, 4, 4)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel10)
               .addComponent(jLabel11)
               .addComponent(jLabel14)
               .addComponent(jLabel12)
               .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2)
               .addComponent(jLabel13))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel3)
               .addComponent(jLabel14))
            .addGap(12, 12, 12)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel10))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel5)
               .addComponent(jLabel11))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel6)
               .addComponent(jLabel12))
            .addGap(25, 25, 25)
            .addComponent(jLabel18)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jButton4.setText("Back");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Back_button_actionPerformed(evt);
         }
      });

      jButton1.setText("OK");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_ActionPerformed(evt);
         }
      });

      jButton3.setText("Internet");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Internet_button_actionPerformed(evt);
         }
      });

      jButton5.setText("Stop");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Stop_button_actionPerformed(evt);
         }
      });

      jLabel19.setDoubleBuffered(true);
      jLabel19.setPreferredSize(new java.awt.Dimension(150, 100));

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(160, 160, 160)
            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jSeparator1)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel8)
                           .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(jTextField7)
                           .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel16)
                           .addComponent(jLabel17)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel15))
                     .addComponent(jLabel1)
                     .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                  .addGap(0, 181, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(41, 41, 41)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel7)
               .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel16))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel8)
               .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel17))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel15)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents
    



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {
      // hide Back/Stop buttons if not in next_screen_mode
      if (main.in_next_sequence == false)
      {
         jButton4.setEnabled(false);                         // back button
         jButton5.setEnabled(false);                         // stop button
      }

      if (main.offline_mode == true)
      {
         jButton3.setText("Help");
      }

////////////////////////////////////////      
      // m/s or knots
      //if (main.wind_units.trim().indexOf(main.M_S) != -1)
      //{
      //   jLabel3.setText("wind speed (m/s)"); // so overwritten the default text ("wind speed (knots"))
      //}
      // else default (knots)

/////////////////////////////////      
      // true wind in ms (overwrite default labels)
      if ( (main.wind_source.equals(main.ESTIMATED_TRUE) || main.wind_source.equals(main.MEASURED_TRUE)) && (main.wind_units.trim().indexOf(main.M_S) != -1) )
      {
         jLabel2.setText("true wind dir (degr)");
         jLabel3.setText("true wind speed (m/s)");  
      }
      
      // true wind in knots (overwrite default labels)
      if ( (main.wind_source.equals(main.ESTIMATED_TRUE) || main.wind_source.equals(main.MEASURED_TRUE)) && (main.wind_units.trim().indexOf(main.M_S) == -1) )
      {
         jLabel2.setText("true wind dir (degr)");
         jLabel3.setText("true wind speed (knots)");  
      }
      
      // relative wind in m/s (overwrite default labels)
      if (main.wind_source.equals(main.MEASURED_OFF_BOW) && (main.wind_units.trim().indexOf(main.M_S) != -1))
      {
         jLabel2.setText("apparent wind dir (degr)");
         jLabel3.setText("apparent wind speed (m/s)");  
      }
      
      // relative wind in knots (overwrite default labels)
      if (main.wind_source.equals(main.MEASURED_OFF_BOW) && (main.wind_units.trim().indexOf(main.M_S) == -1))
      {
         jLabel2.setText("apparent wind dir (degr)");
         jLabel3.setText("apparent wind speed (knots)");  
      }
      
//////////////////////////////////      
      
      // if in AWS collecting data mode the wind was measured by AWS then disable the option to insert the wind manually
      //    never mind which one of the wind parameters was measured/present
      if ( (main.true_wind_dir_from_AWS_present == true) || (main.true_wind_speed_from_AWS_present == true) )
      {
         jTextField1.setForeground(main.input_color_from_aws);        // wind dir
         jTextField1.setEditable(false);
         
         jTextField2.setForeground(main.input_color_from_aws);        // wind speed
         jTextField2.setEditable(false);
         
         jTextField3.setForeground(main.input_color_from_aws);        // COG
         jTextField3.setEditable(false);
         
         jTextField4.setForeground(main.input_color_from_aws);        // SOG
         jTextField4.setEditable(false);

         jTextField5.setForeground(main.input_color_from_aws);        // heading
         jTextField5.setEditable(false);
      }
      else
      {
         jTextField1.setForeground(main.input_color_from_observer);
         jTextField1.setEditable(true);
         
         jTextField2.setForeground(main.input_color_from_observer);
         jTextField2.setEditable(true);
         
         jTextField3.setForeground(main.input_color_from_observer);
         jTextField3.setEditable(true);
         
         jTextField4.setForeground(main.input_color_from_observer);
         jTextField4.setEditable(true);
         
         jTextField5.setForeground(main.input_color_from_observer);
         jTextField5.setEditable(true);
      }
      
      // NB onderstaande werkt wel echter text fields lopen niet lekker bij invullen en schonen
      //jTextField2.getDocument().addDocumentListener(new MyDocumentListener());
      
      
      // if estimated wind -> not necessary to insert ship's course, speed and heading
      //
      if (main.wind_source.equals(main.ESTIMATED_TRUE))
      {
         jLabel4.setEnabled(false);
         jLabel5.setEnabled(false);
         jLabel6.setEnabled(false);
         
         jLabel10.setEnabled(false);
         jLabel11.setEnabled(false);
         jLabel12.setEnabled(false);
                 
         jTextField3.setEnabled(false);
         jTextField4.setEnabled(false);      
         jTextField5.setEnabled(false);
         
         jLabel18.setEnabled(false);
        
      } // if (main.wind_source.equals(main.ESTIMATED_TRUE))
      
   }



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void initSynopparameters() 
    {
       // AWS
       if ( (main.true_wind_dir_from_AWS_present || main.true_wind_speed_from_AWS_present) && (!(main.wind_source.equals(main.MEASURED_OFF_BOW))) ) // EUCAWS AWS connected
       {
          String info = "TurboWin+ will on the wind input form always display the measured relative wind of the connected AWS\n";
          info += "Please change the appropriate settings\n";
          info += "(see: Maintenance -> Station data -> wind meta data -> measured; apparent speed and app. dir)";
       
          JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " warning", JOptionPane.WARNING_MESSAGE);
       }
       
       
       // put back earlier inserted values (of, voor source, de waarde uit de configuratie file als die later niet veranderd is)
       //
        
       if (main.wind_source.equals(main.ESTIMATED_TRUE))
          jRadioButton1.setSelected(true);
       else if (main.wind_source.equals(main.MEASURED_OFF_BOW))
          jRadioButton2.setSelected(true);
       else if (main.wind_source.equals(main.MEASURED_TRUE))
          jRadioButton3.setSelected(true);
        
       if (wind_dir.compareTo("") != 0)
          jTextField1.setText(wind_dir); 
  
       if (wind_speed.compareTo("") != 0)
          jTextField2.setText(wind_speed); 
       
       if (ship_ground_course.compareTo("") != 0)
          jTextField3.setText(ship_ground_course); 
       
       if (ship_ground_speed.compareTo("") != 0)
          jTextField4.setText(ship_ground_speed); 
       
       if (ship_heading.compareTo("") != 0)
          jTextField5.setText(ship_heading); 
        
       if (main.max_height_deck_cargo.compareTo("") != 0)
          jTextField6.setText(main.max_height_deck_cargo);
       
       if (main.diff_sll_wl.compareTo("") != 0)
          jTextField7.setText(main.diff_sll_wl);
       
       
       // set bf picture only if it was estimated or measured true (not if measured relative to the bow!)
       //
       if ( (main.wind_source.equals(main.ESTIMATED_TRUE)) || (main.wind_source.equals(main.MEASURED_TRUE)) )
       {
          if (wind_speed.compareTo("") != 0)
          {
             set_wind_speed_picture(wind_speed);
          }
      } // if ( (main.wind_source.equals(main.ESTIMATED_TRUE)) || (main.wind_source.equals(main.MEASURED_TRUE)) )
       
   } 


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Reset_All_Wind_Vars()
    {
       // scope this module + myturbowin.java main module (all of type: static)
       //source                    = "";
       wind_dir                  = "";
       wind_speed                = "";
       ship_ground_course        = "";    
       ship_ground_speed         = "";
       ship_heading              = "";
       dd_code                   = "";
       ff_code                   = "";
       fff00_code                = "";
       iw_code                   = "";
       HDG_code                  = "";
       COG_code                  = "";
       SOG_code                  = "";
       SLL_code                  = "";
       sl_code                   = "";
       hh_code                   = "";
       RWD_code                  = "";
       RWS_code                  = "";
       int_true_wind_dir         = main.INVALID;
       int_true_wind_speed       = main.INVALID;
       int_difference_sll_wl     = main.INVALID;

       // scope only this module (no static)
       //max_height_deck_cargo     = "";
       //difference_sll_wl         = "";
       int_wind_dir              = main.INVALID;
       int_wind_speed            = main.INVALID;
       int_ship_ground_course    = main.INVALID;
       int_ship_heading          = main.INVALID;
       int_max_height_deck_cargo = main.INVALID;
       //int_difference_sll_wl     = main.INVALID;
       //int_true_wind_dir         = main.INVALID;
       //int_true_wind_speed       = main.INVALID;
       float_ship_ground_speed   = main.INVALID;
       checks_ok                 = false;

       /* wind velden op hoofdscherm overzicht updaten */
       main.wind_fields_update();
    }
    
    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Internet_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Internet_button_actionPerformed
// TODO add your handling code here:
       main.internet_mouseClicked(WIND_HELP_DIR);
    }//GEN-LAST:event_Internet_button_actionPerformed



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
      // TODO add your handling code here:
        
      //if ( (main.relative_wind_dir_from_AWS_present == false) && (main.relative_wind_speed_from_AWS_present == false) &&
      //     (main.true_wind_dir_from_AWS_present == false)     && (main.true_wind_speed_from_AWS_present == false) )
      if ( (main.true_wind_dir_from_AWS_present == false) && (main.true_wind_speed_from_AWS_present == false) ) 
      {
       
      // initialisation 
      Reset_All_Wind_Vars();
      
      // initialisation
      checks_ok = true;                                      // NB was set to false in Reset_All_Wind_Vars()
  
      
      // get text from inserted fields
      wind_dir              = jTextField1.getText().trim(); 
      wind_speed            = jTextField2.getText().trim();
      ship_ground_course    = jTextField3.getText().trim();
      ship_ground_speed     = jTextField4.getText().trim();
      ship_heading          = jTextField5.getText().trim();

      main.max_height_deck_cargo = jTextField6.getText().trim();
      main.diff_sll_wl           = jTextField7.getText().trim();
       
    
      /* 
      //////////////// checks on individual elements
      */
      
      // but first, convert collected (string) values to ints and floats
     
      
      // wind dir
      //      
      if (wind_dir.trim().equals("calm") == true)                                    // bijzonder geval
      {
         int_wind_dir = 0; 
      }
      else if (wind_dir.trim().equals("variable") == true)                           // bijzonder geval
      {
         int_wind_dir = WIND_DIR_VARIABLE;
      }
      else
      {    
         try 
         {
            int_wind_dir = Integer.parseInt(wind_dir.trim());
         }
         catch (NumberFormatException e){/* ... */}
      } // else  

      
      // wind speed
      //
      try 
      {
         int_wind_speed = Integer.parseInt(wind_speed.trim());
      }
      catch (NumberFormatException e){/* ... */}

      
      // ship's ground course
      //
      try 
      {
         int_ship_ground_course = Integer.parseInt(ship_ground_course.trim());
      }
      catch (NumberFormatException e){/* ... */}
      
      
      // ship's ground speed
      //
      try 
      {
         float_ship_ground_speed = Float.parseFloat(ship_ground_speed.trim());
      }
      catch (NumberFormatException e){/* ... */}
      
      
      // ship's heading
      //
      try 
      {
         int_ship_heading = Integer.parseInt(ship_heading.trim());
      }
      catch (NumberFormatException e){/* ... */}


      // max. height deck cargo
      //
      try 
      {
         int_max_height_deck_cargo = Integer.parseInt(main.max_height_deck_cargo.trim());
      }
      catch (NumberFormatException e){/* ... */}
       
      
      // difference sll(summer load line) - water line
      //
      try 
      {
         int_difference_sll_wl = Integer.parseInt(main.diff_sll_wl.trim());
      }
      catch (NumberFormatException e){/* ... */}
       


      /*
      // checks per element
      */

      // wind direction checks
      //
      if ((wind_dir.trim().compareTo("variable") != 0) && (wind_dir.trim().compareTo("calm") != 0) && (wind_dir.trim().length() > 0) && 
          (int_wind_dir < 1 || int_wind_dir > 360 || int_wind_dir == main.INVALID))
      {   
         JOptionPane.showMessageDialog(null, "Wind direction must be in range 1 - 360 (no decimals), variable, calm or blank", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
      
      
      // wind speed checks
      //
      else if ((wind_speed.trim().length() > 0) && 
          (int_wind_speed < 0 || int_wind_speed > 200 || int_wind_speed == main.INVALID))
      {   
         JOptionPane.showMessageDialog(null, "Wind speed must be in range 0 - 200 (no decimals) or blank", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
      
      
      // ship's ground course
      //
      else if ((ship_ground_course.trim().compareTo("stationary") != 0) && (ship_ground_course.trim().length() > 0) && 
          (int_ship_ground_course < 1 || int_ship_ground_course > 360 || int_ship_ground_course == main.INVALID))
      {   
         JOptionPane.showMessageDialog(null, "Ship's ground course must be in range 1 - 360 (no decimals), stationary or blank", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
        
      
      
      // ship's ground speed
      //
      else if ((ship_ground_speed.trim().length() > 0) && 
               (float_ship_ground_speed < 0.0 || float_ship_ground_speed > 50.0 || float_ship_ground_speed == main.INVALID))
      {
         JOptionPane.showMessageDialog(null, "Ship's ground speed must be in range 0 - 50.0 or blank", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
       
      
      // ship's heading
      //
      else if ((ship_heading.trim().length() > 0) && 
               (int_ship_heading < 1 || int_ship_heading > 360 || int_ship_heading == main.INVALID))
      {   
         JOptionPane.showMessageDialog(null, "Ship's heading must be in range 1 - 360 (no decimals) or blank", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
      
      
      // max. height deck cargo above sll
      //
      else if (/*(main.max_height_deck_cargo.trim().length() > 0) &&*/
               (int_max_height_deck_cargo < 0 || int_max_height_deck_cargo > 100 || int_max_height_deck_cargo == main.INVALID))
      {   
         JOptionPane.showMessageDialog(null, "Max. height deck cargo above summer load line must be in range 0 - 100 (no decimals)", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
       
      
      // difference between summer load line and water line
      //
      else if (/*(main.diff_sll_wl.trim().length() > 0) &&*/
               (int_difference_sll_wl < -10 || int_difference_sll_wl > 50 || int_difference_sll_wl == main.INVALID))
      {   
         JOptionPane.showMessageDialog(null, "Difference between summer load line and water line must be in range -10 - 50 (no decimals)", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         Reset_All_Wind_Vars();
      }
      else
      {
          checks_ok = true;
      }    
      
      
      /*
      // consistency checks
      */
      
      //
      // if one of source, wind speed or wind dir. is present other two must be present too
      //
      
      if (checks_ok == true)
      {
         // wind dir. present than wind speed must also present
         if ( (wind_dir.trim().length() > 0) && (wind_speed.trim().equals("")) ) 
         {
            JOptionPane.showMessageDialog(null, "wind speed not inserted", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
         
         // wind speed present than wind dir must also present
         else if ( (wind_speed.trim().length() > 0) && (wind_dir.trim().equals("")) ) 
         {
            JOptionPane.showMessageDialog(null, "wind dir. not inserted", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
         
          
          
         /* als wind speed en/of wind direction ingevuld is(zijn) dan moet 'source' ook bekend zijn */
         // wind speed or dir inserted -> source must be selected
         else if ( (wind_dir.trim().length() > 0) && (main.wind_source.equals("")) )
         {
            JOptionPane.showMessageDialog(null, "source not selected (select: Maintenance -> Station data)", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
         else if ( (wind_speed.trim().length() > 0) && (main.wind_source.equals("")) )
         {
            JOptionPane.showMessageDialog(null, "source not selected (select: Maintenance -> Station data)", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
                  
         /* if wind richting = variable than wind speed may not be too high */        
         // if wind dir = variable -> wind speed must be < 5 knots / m/s
         //else if ( (wind_dir.trim().equals("variable")) && (int_wind_speed >= 5) )       
         //{
         //   JOptionPane.showMessageDialog(null, "if wind dir. is variable, wind speed must be < 5", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
         //   Reset_All_Wind_Vars(); 
         //}
         
         /* if wind richting = variable than wind speed may not be too high */
         else if ( (main.wind_units.trim().indexOf(main.M_S) != -1) && (wind_dir.trim().equals("variable")) && (int_wind_speed >= 3) )   // m/s
         {
            JOptionPane.showMessageDialog(null, "if wind dir. is variable, wind speed must be < 3 m/s", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
         else if ( (main.wind_units.trim().indexOf(main.KNOTS) != -1) && (wind_dir.trim().equals("variable")) && (int_wind_speed >= 5) )   // knots
         {
            JOptionPane.showMessageDialog(null, "if wind dir. is variable, wind speed must be < 5 knots", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
         
                  
         /* direction = calm and speed not 0 */
         else if ( (wind_dir.trim().equals("calm")) && (int_wind_speed != 0) )       
         {
            JOptionPane.showMessageDialog(null, "if wind dir. is calm, wind speed must be 0", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
          
         /* speed = 0 and direction not calm */
         else if ( (int_wind_speed == 0) && (wind_dir.trim().compareTo("calm") != 0) )       
         {
            JOptionPane.showMessageDialog(null, "if wind speed is 0, wind dir. must be calm", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
         
         
         ///////////////////////////////////////////
         else if ( (ship_ground_course.trim().equals("stationary")) && (float_ship_ground_speed > 0.01) )
         {
            JOptionPane.showMessageDialog(null, "if ship's ground course is stationary, ship's ground speed must be 0.0", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
          else if ( (float_ship_ground_speed < 0.01) && ship_ground_course.trim().equals("stationary") == false)
         {
            JOptionPane.showMessageDialog(null, "if ship's ground speed is 0.0, ship's ground course must be stationary", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars(); 
         }
        
         
          
          
      } // if (checks_ok = true)   


      
      
      /*
      ///////////// determine meteorological code figures
      */
      if (checks_ok == true)
      {   
         // estimated wind, intermediate results and iw code
         //
         if (main.wind_source.equals(main.ESTIMATED_TRUE) == true)
         {
            if (main.wind_units.trim().indexOf(main.M_S) != -1)
            {
               iw_code = "0";                                                 // estimated in m/s
            }
            else // dus als wind units is knots of niet bekend is dan knots
            {
               iw_code = "3";                                                 // estimated in knots
            }

            // NB wind_dir = calm is eerder al omgezet naar 0  
             
            if (wind_dir.trim().equals("variable") == true)
            {
               int_true_wind_dir = WIND_DIR_VARIABLE;                     // consistent met berekende waarde
            }
            else
            {
               int_true_wind_dir = int_wind_dir;
            }
            
            int_true_wind_speed = int_wind_speed; 
         } // if (source.equals(ESTIMATED_TRUE) == true)  
          
         // measured apparent wind off the bow, intermediate results and iw code
         //
         if (main.wind_source.equals(main.MEASURED_OFF_BOW) == true)
         {
            if (main.wind_units.trim().indexOf(main.M_S) != -1)
            {
               iw_code = "1";                                                 // measured in m/s
            }
            else // dus als wind units knots of als niet bekend dan knots
            {
               iw_code = "4";                                                 // measured in knots
            }

            /* compute true wind */
             
            /* wind dir, wind speed, ground course and ground speed must be inserted */ 
            if ( (wind_dir.trim().length() == 0)           || (wind_speed.trim().length() == 0) ||
                 (ship_ground_course.trim().length() == 0) || (ship_ground_speed.trim().length() == 0) ||
                  ship_heading.trim().length() == 0)
            {
               JOptionPane.showMessageDialog(null, "if source is \"wind measured; apparent speed and apparent direction\" then wind dir, wind speed, ground speed,ground course and ship heading must be inserted", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
               Reset_All_Wind_Vars();
            } // if
            else
            {    
               Bereken_True_Wind2();                                          // int_true_wind_dir [graden]; int_true_wind_speed [knopen]
            } // else  
         } // if (source.equals(MEASURED_OFF_BOW) == true)
         

         // measured true wind, intermediate results and iw code
         //
         if (main.wind_source.equals(main.MEASURED_TRUE) == true)
         {
            if (main.wind_units.trim().indexOf(main.M_S) != -1)
            {
               iw_code = "1";                                                 // measured in m/s
            }
            else // dus als wind units is knots of niet bekend is dan knots
            {
               iw_code = "4";                                                 // measured in knots
            }

            // NB wind_dir = calm is eerder al omgezet naar 0

            if (wind_dir.trim().equals("variable") == true)
            {
               int_true_wind_dir = WIND_DIR_VARIABLE;                     // consistent met berekende waarde
            }
            else
            {
               int_true_wind_dir = int_wind_dir;
            }

            int_true_wind_speed = int_wind_speed;
         } // if (source.equals(ESTIMATED_TRUE) == true)
        


         // wind direction code (NB int_true_wind_dir in graden)
         //
         if (int_true_wind_dir == WIND_DIR_VARIABLE)                          // variable
         {
            dd_code = "99";
         } // if (int_true_wind_dir == 9999)
         else // dus geen variable wind
         {
            int int_hulp_true_wind_dir;
            int int_hulp_dd_code;
                 
            /* om te voorkomen dat 1 - 4 graden 00 in de obs wordt */
	         if (int_true_wind_dir >= 1 && int_true_wind_dir <= 4)
            {
	            int_hulp_true_wind_dir = 360;
            }
	         else
            {
	            int_hulp_true_wind_dir = int_true_wind_dir;
            }
            
            /* afronden op tientallen graden */
            int_hulp_dd_code = (int)Math.round((float)int_hulp_true_wind_dir / 10);
                 
            /* omzetten naar code */
            if (int_hulp_dd_code <= 9)
            {
               dd_code = "0" + Integer.toString(int_hulp_dd_code);
            }
            else if ((int_hulp_dd_code >= 10) && (int_hulp_dd_code <= 36))
            {
               dd_code = Integer.toString(int_hulp_dd_code);
            }
            else
            {
               dd_code = "//";
            }
         } // else (dus geen variable wind)


         // wind speed code (NB int_true_wind_speed in knots or m/s)
         //
         if (int_true_wind_speed <= 9)
         {
            ff_code = "0" + Integer.toString(int_true_wind_speed);
         }
         else if ((int_true_wind_speed >= 10) && (int_true_wind_speed <= 99))
         {
            ff_code = Integer.toString(int_true_wind_speed);
         }
         else if (int_true_wind_speed >= 100)
         {
            ff_code = "99";
            fff00_code = Integer.toString(int_true_wind_speed);
         }
         else
         {
            ff_code = "//";
         }


         // Heading code (only for IMMT)
         //

         // NOTE according to IMMT-3/4 description "heading = 000 for No Movement" this is a conceptual mistake A ship has ALWAYS a heading !!!
         if (int_ship_heading <= 9)
         {
            HDG_code = "00" + Integer.toString(int_ship_heading);               // 3 char
         }
         else if (int_ship_heading >= 10 && int_ship_heading <= 99)
         {
            HDG_code = "0" + Integer.toString(int_ship_heading);                // 3 char
         }
         else if (int_ship_heading >= 100 && int_ship_heading <= 360)
         {
            HDG_code = Integer.toString(int_ship_heading);                       // 3 char
         }
         else
         {
            HDG_code = "///";                                                    // 3 char
         }


         // ship's ground course (only for IMMT)
         //
         if (ship_ground_course.trim().equals("stationary") == true)
         {
            COG_code = "000";                                                    // 3 char
         }
         else if (int_ship_ground_course <= 9)
         {
            COG_code = "00" +  Integer.toString(int_ship_ground_course);         // 3 char
         }
         else if (int_ship_ground_course >= 10 && int_ship_ground_course <= 99)
         {
            COG_code = "0" +  Integer.toString(int_ship_ground_course);          // 3 char
         }
         else if (int_ship_ground_course >= 100 && int_ship_ground_course <= 360)
         {
            COG_code = Integer.toString(int_ship_ground_course);                 // 3 char
         }
         else
         {
            COG_code = "///";                                                    // 3 char
         }

     
         // Ship's ground speed (only for IMMT)
         //
         int int_ship_ground_speed = Math.round(float_ship_ground_speed);
         if (int_ship_ground_speed <= 9)
         {
            SOG_code = "0" + Integer.toString(int_ship_ground_speed);           // 2 char
         }
         else if (int_ship_ground_speed >= 10 && int_ship_ground_speed <= 99)
         {
            SOG_code = Integer.toString(int_ship_ground_speed);                 // 2 char
         }
         else
         {
            SOG_code = "//";                                                    // 2 char
         }


         // max height deck cargo (only for IMMT)
         //
         if (int_max_height_deck_cargo <= 9)
         {
            SLL_code = "0" + Integer.toString(int_max_height_deck_cargo);      // 2 char
         }
         else if (int_max_height_deck_cargo >= 10 && int_max_height_deck_cargo <= 99)
         {
            SLL_code = Integer.toString(int_max_height_deck_cargo);            // 2 char
         }
         else
         {
            SLL_code = "//";                                                   // 2 char
         }


         // departure of reference level (difference summer load line - water line (only for IMMT)
         //
         if (int_difference_sll_wl >= -10 && int_difference_sll_wl < 0)
         {
            sl_code = "1";                   // negative                      // 1 char

            if (int_difference_sll_wl <= -10)
            {
               hh_code = Integer.toString(Math.abs(int_difference_sll_wl));   // 2 char
            }
            else // range -1 - -9
            {
               hh_code = "0" + Integer.toString(Math.abs(int_difference_sll_wl));// 2 char
            }
         } // if (int_difference_sll_wl >= -10 && int_difference_sll_wl < 0)
         else if (int_difference_sll_wl >= 0 && int_difference_sll_wl < 50)
         {
            sl_code = "0";                   // positive                        // 1 char

            if (int_difference_sll_wl >= 0 && int_difference_sll_wl <= 9)
            {
               hh_code = "0" + Integer.toString(int_difference_sll_wl);         // 2 char
            }
            else // range 10 - 49
            {
               hh_code = Integer.toString(int_difference_sll_wl);               // 2 char
            }
         } // else if (int_difference_sll_wl > 0 && int_difference_sll_wl < 50)
         else
         {
            sl_code = "/";                                                      // 1 char
            hh_code = "//";                                                     // 2 char
         } // else


         // Relative wind direction
         //
         if ((main.wind_source.equals(main.ESTIMATED_TRUE) == true) || (main.wind_source.equals(main.MEASURED_TRUE) == true))
         {
            // esimated (true) wind or measured true wind -> no relative wind direction
            RWD_code = "///";
         }
         else // measured apparent wind
         {
            if (int_wind_dir == WIND_DIR_VARIABLE)                             // variable
            {
               RWD_code = "999";                                               // not in IMMT description but possible in MQCS (in IMMT no entry for variable mmeasured wind)
            }
            else if (int_wind_dir <= 9)
            {
               RWD_code = "00" + Integer.toString(int_wind_dir);               // 3 char
            }
            else if (int_wind_dir >= 10 && int_wind_dir <= 99)
            {
               RWD_code = "0" + Integer.toString(int_wind_dir);                // 3 char
            }
            else if (int_wind_dir >= 100 && int_wind_dir <= 360)
            {
               RWD_code = Integer.toString(int_wind_dir);                      // 3 char
            }
            else
            {
               RWD_code = "///";                                               // 3 char
            }
         } // else (measued apparent wind)



         // Relative wind speed
         //
         if ((main.wind_source.equals(main.ESTIMATED_TRUE) == true) || (main.wind_source.equals(main.MEASURED_TRUE) == true))
         {
            // esimated (true) wind or measured true wind -> no relative wind speed
            RWS_code = "///";
         }
         else // measured apparent wind
         {
            if (int_wind_speed <= 9)
            {
               RWS_code = "00" + Integer.toString(int_wind_speed);               // 3 char
            }
            else if (int_wind_speed >= 10 && int_wind_speed <= 99)
            {
               RWS_code = "0" + Integer.toString(int_wind_speed);                // 3 char
            }
            else if (int_wind_speed >= 100 && int_wind_speed <= 200)
            {
               RWS_code = Integer.toString(int_wind_speed);                      // 3 char
            }
            else
            {
               RWS_code = "///";                                                 // 3 char
            }
         } // else (measued wind)

         //JOptionPane.showMessageDialog(null, int_true_wind_dir, "int_true_wind_dir", JOptionPane.WARNING_MESSAGE);
         //JOptionPane.showMessageDialog(null, int_true_wind_speed, "int_true_wind_speed", JOptionPane.WARNING_MESSAGE);
      
      } // if (checks_ok == true) 
      
      
      if (checks_ok == true)  
      {
         if (main.RS232_connection_mode == 3)                        // AWS connected mode
         {
            main.jTextField16.setForeground(main.input_color_from_observer);   // true wind speed field
            main.jTextField17.setForeground(main.input_color_from_observer);   // true wind dir field
            
            // because now both, true wind speed and dir , will be overwritten
            main.true_wind_speed_from_AWS_present = false;
            main.true_wind_dir_from_AWS_present = false;
         }
      } // if (checks_ok == true)
      
      } // if ( (main.true_wind_dir_from_AWS_present == false) && etc.
      else // so true wind speed and true wind direction from AWS are present
      {
         main.max_height_deck_cargo = jTextField6.getText().trim();
         main.diff_sll_wl           = jTextField7.getText().trim();

         // max. height deck cargo
         //
         try 
         {
            int_max_height_deck_cargo = Integer.parseInt(main.max_height_deck_cargo.trim());
         }
         catch (NumberFormatException e){/* ... */}
       
      
         // difference sll(summer load line) - water line
         //
         try 
         {
            int_difference_sll_wl = Integer.parseInt(main.diff_sll_wl.trim());
         }
         catch (NumberFormatException e){/* ... */}
         
         
         // max. height deck cargo above sll
         //
         if ((int_max_height_deck_cargo < 0 || int_max_height_deck_cargo > 100 || int_max_height_deck_cargo == main.INVALID))
         {   
            JOptionPane.showMessageDialog(null, "Max. height deck cargo above summer load line must be in range 0 - 100 (no decimals)", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars();
         }
      
         // difference between summer load line and water line
         //
         else if ((int_difference_sll_wl < -10 || int_difference_sll_wl > 50 || int_difference_sll_wl == main.INVALID))
         {   
            JOptionPane.showMessageDialog(null, "Difference between summer load line and water line must be in range -10 - 50 (no decimals)", main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
            Reset_All_Wind_Vars();
         }
         else
         {
            checks_ok = true;
         }    
         
      } // else (so true wind speed and true wind direction from AWS are present)
      
      
      //
      // final processing
      //
      if (checks_ok == true)  
      {
         /* max height deck cargo and diff sll-wl can be set in this wind input page but also on station data page (Maintenance)

         /* NB main.configuratie_regels[0] - main.configuratie_regels[14] occupied by station data */
         /* NB main.configuratie_regels[15] - main.configuratie_regels[16] occupied by email settings */
         /* NB main.configuratie_regels[18] occupied by email settings */

         main.configuratie_regels[13] = "";
         main.configuratie_regels[13] = main.MAX_HEIGHT_DECK_CARGO_TXT + main.max_height_deck_cargo.trim();

         main.configuratie_regels[14] = "";
         main.configuratie_regels[14] = main.DIFF_SLL_WL_TXT + main.diff_sll_wl.trim();


         // write meta (station) data to muffins or configuration files
         if (main.offline_mode_via_cmd == true)
         {
            main.schrijf_configuratie_regels();          
         }
         else // so offline via turbowin_jws_offline.jnlp or online (webstart) mode
         {
            main.set_muffin();
            main.schrijf_configuratie_regels();   // backup for muffin
         }   
  
     
         /* update wind fields on main screen */
         main.wind_fields_update();
          
         /* close this input page */
         setVisible(false);
         dispose();

         /* next screen if in_next_screen mode */
         if (main.in_next_sequence == true)
         {
            next_screen();
         }
          
      } // if (checks_ok == true)

    }//GEN-LAST:event_OK_button_actionPerformed
    
 
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Bereken_True_Wind2()
   {
      /* int_ship_ground_course  : hele graden */
      /* float_ship_ground_speed : hele + tienden knopen */
      /* int_wind_dir            : ingevulde wind; hier: apparent wind richting (hele graden ook variable9 mogelijk) ALTIJD T.O.V. TRUE NORTH */
      /* int_wind_speed          : ingevulde wind; hier: apparent wind snelheid (hele knopen) */
      /* int_true_wind_dir       : true wind direction (hele graden) */
      /* int_true_wind_speed     : true wind speed  (hele knopen of hele m/s) */

      /* int_wind_dir en/of int_wind_speed == leeg veld is hier niet meer mogelijk */
      /* dan was al eerder een Error gegeven */


      //
      // Ao' = 270 - (ho + Ro + Po)
      //
      // Ao': apparent wind direction [mathemetical]
      // ho: heading vessel
      // Ro: zero reference (altijd 0 gaan er van uit voor schepen van VOS)
      // Po: platform-relative wind direction
      //
      //
      // Co' = 90 - Co
      //
      // Co': COG [mathematical]
      // Co: COG (course over ground)
      //
      //
      // Tu = Tu' = |A|cos(Ao') + |C|cos(Co')
      // Tv = Tv' = |A|sin(Ao') + |C|sin(Co')
      //
      // A: apparent wind speed
      // C: SOG (speed over ground)
      // Tu: eastward component true wind
      // Tv: northward component true wind
      //
      //
      // |T| = sqrt(Tu** + Tv**)
      // To = 270 - atan Tv/Tu
      //
      // T: true wind speed
      // To: true wind direction
      //
      //


      double ho = int_ship_heading;
      double Co = int_ship_ground_course;
      double C  = float_ship_ground_speed; // dus in knots kan verderop omgezet worden naar m/s
      double A  = int_wind_speed;
      double Po = int_wind_dir;
      double Ro = 0;                      // per definitie (aanname bij VOS)
      double Ao_mat;                      // apparent wind speed [mathemetical] 
      double Co_mat;                      // ground course ship [mathemetical]
      double Tu;                          // eastward component true wind
      double Tv;                          // northward component true wind
      double T;                           // true wind speed
      double To;                          // tue wind direction


      // indien windspeed in m/s dan ook C (float_ship_ground_speed) omzetten naar m/s
      if (main.wind_units.trim().indexOf(main.M_S) != -1)
      {
         C = float_ship_ground_speed * 0.514444;  // nu C in m/s
      }

      
      // variabele wind en stilligend schip
      //
      if ((wind_dir.trim().equals("variable") == true) && (ship_ground_course.trim().equals("stationary") == true))
      {
         int_true_wind_dir         = WIND_DIR_VARIABLE;                                    // variable
         int_true_wind_speed       = int_wind_speed;
      }        
     

      // variable wind en geen stilligend schip
      //
      if ((wind_dir.trim().equals("variable") == true) && (ship_ground_course.trim().compareTo("stationary") != 0))
      {
         int hulp = int_ship_ground_course + 180;
         if (hulp > 360) hulp -= 360;
        
         int_true_wind_dir = hulp;

         if (main.wind_units.trim().indexOf(main.M_S) != -1)
         {
            // dan ook float_ship_ground_speed naar m/s
            int_true_wind_speed = (int)Math.round(float_ship_ground_speed * 0.514444);// afronden kan > 100 zijn)
         }
         else
         {
            int_true_wind_speed = (int)Math.round(float_ship_ground_speed);// afronden kan > 100 zijn)
         }
      } // if ((wind_dir.trim().equals("variable") == true) etc.
      

      // geen variable wind 
      //
      if (wind_dir.trim().compareTo("variable") != 0)      
      {
         Ao_mat = 270 - (ho + Ro + Po); 
         Co_mat = 90 - Co; 

         Tu = A * Math.cos(Ao_mat * BOOGGRAAD) + C * Math.cos(Co_mat * BOOGGRAAD);
         Tv = A * Math.sin(Ao_mat * BOOGGRAAD) + C * Math.sin(Co_mat * BOOGGRAAD);

         T = Math.sqrt(Tu * Tu + Tv * Tv);

         if (Tu != 0.0)
            To = 270 - Math.atan2(Tv, Tu) / BOOGGRAAD;
         else
            To = 0;

         if (To > 360) To -= 360;                                             // kan groter dan 360 graden zijn !
         if (To < 0) To += 360;                                               // komt hij hier ooit ?

         int_true_wind_speed = (int)Math.round(T);                            // afronden ; kan > 100 zijn)
         int_true_wind_dir = (int)Math.round(To);


         // voor consistentie
         //
         if (int_true_wind_speed == 0)
            int_true_wind_dir = 0;

         if ((int_true_wind_speed != 0) && (int_true_wind_dir == 0))
            int_true_wind_dir = 360;
         
         /* NB int_true_wind_dir = 0 - 4 (Noord) wordt in aanroepende programma op 360 gezet */

   } // if (wind_dir.trim().compareTo("variable") != 0)

}

    
    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Cancel_button_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_ActionPerformed
    // TODO add your handling code here:
        setVisible(false);
        dispose();

       if (main.in_next_sequence == true)
       {
          next_screen();
       }
    }//GEN-LAST:event_Cancel_button_ActionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Back_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_button_actionPerformed
       // TODO add your handling code here:

      setVisible(false);
      dispose();

      previous_screen();
    }//GEN-LAST:event_Back_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Stop_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_button_actionPerformed
       // TODO add your handling code here:

      setVisible(false);
      dispose();

      main.in_next_sequence = false;
    }//GEN-LAST:event_Stop_button_actionPerformed

    
    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void wind_speed_textfield_focusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wind_speed_textfield_focusLost
      // TODO add your handling code here:
      
      // set bf picture only if it was estimated or measured true (not if measured relative to the bow!)
      //
      if ( (main.wind_source.equals(main.ESTIMATED_TRUE)) || (main.wind_source.equals(main.MEASURED_TRUE)) )
      {
          String temp_wind_speed  = jTextField2.getText().trim();
          if (temp_wind_speed.compareTo("") != 0)
          {
             set_wind_speed_picture(temp_wind_speed);
          }
      } // if ( (main.wind_source.equals(main.ESTIMATED_TRUE)) || (main.wind_source.equals(main.MEASURED_TRUE)) )
   }//GEN-LAST:event_wind_speed_textfield_focusLost
    
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void set_wind_speed_picture(String hulp_wind_speed)
   {
  //String hulp_wind_speed  = jTextField2.getText().trim();
         int int_hulp_wind_speed = Integer.parseInt(hulp_wind_speed);
        
         if (main.wind_units.indexOf(main.M_S) != -1)   // so m/s
         {   
            if (int_hulp_wind_speed == 0)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_0.jpg");
            }
            else if (int_hulp_wind_speed == 1)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_1.jpg");
            }
            else if (int_hulp_wind_speed >= 2 && int_hulp_wind_speed <= 3)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_2.jpg");
            }            
            else if (int_hulp_wind_speed >= 4 && int_hulp_wind_speed <= 5)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_3.jpg");
            }
            else if (int_hulp_wind_speed >= 6 && int_hulp_wind_speed <= 7)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_4.jpg");
            }
            else if (int_hulp_wind_speed >= 8 && int_hulp_wind_speed <= 10)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_5.jpg");
            }
            else if (int_hulp_wind_speed >= 11 && int_hulp_wind_speed <= 13)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_6.jpg");
            }
            else if (int_hulp_wind_speed >= 14 && int_hulp_wind_speed <= 17)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_7.jpg");
            }
            else if (int_hulp_wind_speed >= 18 && int_hulp_wind_speed <= 20)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_8.jpg");
            }
            else if (int_hulp_wind_speed >= 21 && int_hulp_wind_speed <= 24)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_9.jpg");
            }
            else if (int_hulp_wind_speed >= 25 && int_hulp_wind_speed <= 28)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_10.jpg");
            }
            else if (int_hulp_wind_speed >= 29 && int_hulp_wind_speed <= 32)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_11.jpg");
            }
            else if (int_hulp_wind_speed > 32)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_12.jpg");
            }
         } // if (main.wind_units.indexOf(main.M_S) != -1)   // so m/s
         else if (main.wind_units.indexOf(main.M_S) == -1) // so knots
         {   
            if (int_hulp_wind_speed == 0)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_0.jpg");
            }
            else if (int_hulp_wind_speed >= 1 && int_hulp_wind_speed <= 3)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_1.jpg");
            }
            else if (int_hulp_wind_speed >= 4 && int_hulp_wind_speed <= 6)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_2.jpg");
            }            
            else if (int_hulp_wind_speed >= 7 && int_hulp_wind_speed <= 10)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_3.jpg");
            }
            else if (int_hulp_wind_speed >= 11 && int_hulp_wind_speed <= 16)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_4.jpg");
            }
            else if (int_hulp_wind_speed >= 17 && int_hulp_wind_speed <= 21)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_5.jpg");
            }
            else if (int_hulp_wind_speed >= 22 && int_hulp_wind_speed <= 27)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_6.jpg");
            }
            else if (int_hulp_wind_speed >= 28 && int_hulp_wind_speed <= 33)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_7.jpg");
            }
            else if (int_hulp_wind_speed >= 34 && int_hulp_wind_speed <= 40)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_8.jpg");
            }
            else if (int_hulp_wind_speed >= 41 && int_hulp_wind_speed <= 47)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_9.jpg");
            }
            else if (int_hulp_wind_speed >= 48 && int_hulp_wind_speed <= 55)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_10.jpg");
            }
            else if (int_hulp_wind_speed >= 56 && int_hulp_wind_speed <= 63)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_11.jpg");
            }
            else if (int_hulp_wind_speed > 63)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_12.jpg");
            }
         } // else (so knots) 
   }
   
   
   

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void next_screen()
   {
      mywaves form = new mywaves();
      form.setSize(800, 600);
      form.setVisible(true);
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void previous_screen()
   {
      mytemp form = new mytemp();
      form.setSize(800, 600);
      form.setVisible(true);
   }

   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   public ImageIcon createImageIcon(String path_and_file)
   {
      URL url = null;

      try
      {
         url = getClass().getResource(path_and_file);
      }
      catch (Exception e) { /* ... */}

      ImageIcon icon_glyph = new javax.swing.ImageIcon(url);

      return icon_glyph;
   }
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   
   // The doInBackground method, which creates the image icon for the photograph, is invoked by the background thread. 
   // After the image icon is fully loaded, the done method is invoked on the event-dispatching thread. 
   // This updates the GUI to display the photograph
   
   // SwingWorker is only designed to be executed once. Executing a SwingWorker more than once will not result in invoking the doInBackground method twice.
   // see: http://java.sun.com/javase/6/docs/api/javax/swing/SwingWorker.html
   private void loadImage(final String imagePath) 
   {
      new SwingWorker<ImageIcon, Object>() 
      {
         @Override
         public ImageIcon doInBackground() 
         {
             return createImageIcon(imagePath);
         }

         @Override
         public void done()
         {
            try
            {        
               ImageIcon bf_icon = get();
               jLabel19.setIcon(bf_icon); 
            } // try
            catch (InterruptedException ignore) { }
            catch (java.util.concurrent.ExecutionException e) 
            {
                String why = null;
                Throwable cause = e.getCause();
                if (cause != null) 
                {
                   why = cause.getMessage();
                } 
                else 
                {
                   why = e.getMessage();
                }
                //System.err.println("Error retrieving file: " + why);
                JOptionPane.showMessageDialog(null, "Error retrieving file: " + why, main.APPLICATION_NAME, JOptionPane.ERROR_MESSAGE);
            } // catch         
         } //  public void done()
      }.execute();
   } // private void loadImage(final String imagePath, final int index)

   
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
/*   
   private class MyDocumentListener implements DocumentListener 
   {
      //final String newline = "\n";
 
      @Override
      public void insertUpdate(DocumentEvent e) {
          updateLog(e, "inserted into");
      }
      @Override
      public void removeUpdate(DocumentEvent e) {
          updateLog(e, "removed from");
      }
      @Override
      public void changedUpdate(DocumentEvent e) {
          //Plain text components don't fire these events.
      }
 
      public void updateLog(DocumentEvent e, String action) 
      {
         
         
         Document doc = (Document) e.getDocument();  
         try 
         {
            String currText = doc.getText(0, doc.getLength()); 
            
            int int_speed = Integer.parseInt(currText);
            
            if (int_speed == 0)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_0.jpg");
            }
            else if (int_speed > 0 && int_speed < 10)
            {
               loadImage(main.ICONS_DIRECTORY + "glyph_bf_4.jpg");
               //loadImage(main.ICONS_DIRECTORY + "A_1.jpg");
               //loadImage(main.ICONS_DIRECTORY + "A_1.jpg");
            }   
         } 
         catch (BadLocationException ex) 
         {
            Logger.getLogger(mywind.class.getName()).log(Level.SEVERE, null, ex);
         }
        
      }
   }
*/

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mywind().setVisible(true);
            }
        });
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel18;
   private javax.swing.JLabel jLabel19;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField3;
   private javax.swing.JTextField jTextField4;
   private javax.swing.JTextField jTextField5;
   private javax.swing.JTextField jTextField6;
   private javax.swing.JTextField jTextField7;
   // End of variables declaration//GEN-END:variables


   // constants only this module
   private final String WIND_HELP_DIR           = "wind.html";

   // constants global
   public static final int WIND_DIR_VARIABLE    = 9999;
   //public static final int INVALID              = 9999999;
   public static final double BOOGGRAAD         = 0.0174532925;              // voor Berekenwind
    
   // var's scope this module + myturbowin.java main module (all of type: static)
   public static String wind_dir                = "";
   public static String wind_speed              = "";
   public static String ship_ground_course      = "";    
   public static String ship_ground_speed       = "";
   public static String ship_heading            = "";
   public static String dd_code                 = "";
   public static String ff_code                 = "";
   public static String fff00_code              = "";           // var name '00fff_code' not possible/accepted so used 'fff00_code' as var name
   public static String iw_code                 = "";
   public static String HDG_code                = "";
   public static String COG_code                = "";
   public static String SOG_code                = "";
   public static String SLL_code                = "";
   public static String sl_code                 = "";
   public static String hh_code                 = "";
   public static String RWD_code                = "";
   public static String RWS_code                = "";
   public static int int_true_wind_dir          = main.INVALID;
   public static int int_true_wind_speed        = main.INVALID;
   public static int int_difference_sll_wl      = main.INVALID;
 
   // var's scope only this module (no static)
   private int int_wind_dir                     = main.INVALID;
   private int int_wind_speed                   = main.INVALID;
   private int int_ship_ground_course           = main.INVALID;
   private int int_ship_heading                 = main.INVALID;
   private int int_max_height_deck_cargo        = main.INVALID;
   //private int int_difference_sll_wl            = main.INVALID;
   private float float_ship_ground_speed        = main.INVALID;
   private boolean checks_ok                    = false;
}



