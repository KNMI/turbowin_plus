package turbowin;


import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;



/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hometrainer
 */
public class RS232_view extends javax.swing.JFrame {

   /* inner class popupListener */
   class PopupListener extends MouseAdapter 
   {
      @Override
      public void mousePressed(MouseEvent e) 
      {
         maybeShowPopup(e);
         //System.out.println("Popup menu will be visible!");
      }

      @Override
      public void mouseReleased(MouseEvent e) 
      {
         maybeShowPopup(e);
      }

      private void maybeShowPopup(MouseEvent e) 
      {
         if (e.isPopupTrigger()) 
         {
            popup.show(e.getComponent(), e.getX(), e.getY());
         }
      }
   }   
   
   
    /**
     * Creates new form RS232_view
     */
    public RS232_view() {
        initComponents();
        initComponents1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jPanel5 = new javax.swing.JPanel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jPanel4 = new javax.swing.JPanel();
      jPanel3 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jLabel3 = new javax.swing.JLabel();
      /*
      jPanel1 = new javax.swing.JPanel();
      */jPanel1 = new RS232_grafiek();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Sensor data graph");
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosed(java.awt.event.WindowEvent evt) {
            RS232_graph_windowClosed(evt);
         }
      });

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("day");
      jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            day_button_actionPerformed(evt);
         }
      });

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("week");
      jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            week_button_actionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jRadioButton1)
               .addComponent(jRadioButton2))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
            .addContainerGap(493, Short.MAX_VALUE)
            .addComponent(jRadioButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jRadioButton2)
            .addGap(26, 26, 26))
      );

      getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

      jPanel4.setPreferredSize(new java.awt.Dimension(75, 599));

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 75, Short.MAX_VALUE)
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 574, Short.MAX_VALUE)
      );

      getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

      jPanel3.setPreferredSize(new java.awt.Dimension(975, 75));

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      jLabel1.setText("--- graph updated every 5 minutes ---");

      jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabel2.setText("--- right click for night colours ---");

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(61, 61, 61)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 424, Short.MAX_VALUE)
            .addComponent(jLabel2)
            .addGap(81, 81, 81))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jLabel2))
            .addContainerGap(46, Short.MAX_VALUE))
      );

      getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

      jPanel2.setPreferredSize(new java.awt.Dimension(975, 50));

      jLabel3.setText("---");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(61, 61, 61)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(257, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(25, Short.MAX_VALUE)
            .addComponent(jLabel3)
            .addContainerGap())
      );

      getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

      jPanel1.setBackground(new java.awt.Color(255, 250, 240));
      jPanel1.setPreferredSize(new java.awt.Dimension(800, 560));

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 825, Short.MAX_VALUE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 574, Short.MAX_VALUE)
      );

      getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents

    
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void day_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_day_button_actionPerformed
      // TODO add your handling code here:
      
      // called from: initComponents1() [RS232_view.java]
      //
      // NB timer will be stopped/checked in RS232_graph_windowClosed() [RS232_view.java]
      
      mode_tijd_periode = MODE_DAY;

      // if necessary first stop the timer
      if (main.sensor_data_file_ophalen_timer_is_gecreeerd == true)
      {
         if (sensor_data_file_ophalen_timer.isRunning())
         {
             sensor_data_file_ophalen_timer.stop();
         }
      }

      if (main.RS232_connection_mode == 6 || main.RS232_connection_mode == 8|| main.RS232_connection_mode == 10)         // Mintaka Star or StarX LAN or OMC-140 LAN
      {
         // NB In case of WiFi connection no possibility to check the connection is still live (in case of serial connection that will be the case if defaultPort ! null)
         //
         //
         // retrieving sensor data from file, timer scheduled
         init_sensor_data_uit_file_ophalen_timer();         
      } 
      else // no Wifi connection (so serial connection or no connection at all)
      {
         if (main.defaultPort != null)
         {
            // retrieving sensor data from file, timer scheduled
            init_sensor_data_uit_file_ophalen_timer();
         }    
         else
         {
            // retrieving sensor data from file, only once (no timer because there is no active serial connection)
            sensor_data_uit_file_ophalen();
         }
      } // else 
   }//GEN-LAST:event_day_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void week_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_week_button_actionPerformed
      // TODO add your handling code here:
      
      // called from: initComponents1() [RS232_view.java]
      //
      // NB timer will be stopped/checked in RS232_graph_windowClosed() [RS232_view.java]
      
      mode_tijd_periode = MODE_WEEK;

      // if necessary first stop the timer
      if (main.sensor_data_file_ophalen_timer_is_gecreeerd == true)
      {
         if (sensor_data_file_ophalen_timer.isRunning())
         {
            sensor_data_file_ophalen_timer.stop();
         }
      }

      if (main.RS232_connection_mode == 6 || main.RS232_connection_mode == 8 || main.RS232_connection_mode == 10)
      {
         // NB In case of LAN connection no possibility to check the connection is still live (in case of serial connection that will be the case if defaultPort ! null)
         //
         //
         // retrieving sensor data from file, timer scheduled
         init_sensor_data_uit_file_ophalen_timer();         
      } 
      else // no Wifi connection (so serial connection or no connection at all)
      {   
         if (main.defaultPort != null)
         {
            // retrieving sensor data from file, timer scheduled
            init_sensor_data_uit_file_ophalen_timer();
         }     
         else
         {
            // retrieving sensor data from file, only once (no timer because there is no active serial connection)
            sensor_data_uit_file_ophalen();
         }
      } // else
   }//GEN-LAST:event_week_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void RS232_graph_windowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_RS232_graph_windowClosed
      // TODO add your handling code here:
      
      if (main.sensor_data_file_ophalen_timer_is_gecreeerd == true)  // 15-05-2013
      {
         if (sensor_data_file_ophalen_timer.isRunning())
         {
            sensor_data_file_ophalen_timer.stop();
         }
      }
      
      sensor_data_file_ophalen_timer = null;
      
      main.sensor_data_file_ophalen_timer_is_gecreeerd = false;
   }//GEN-LAST:event_RS232_graph_windowClosed

    
   
/***********************************************************************************************/
/*                                                                                             */
/*                                sensor_data_uit_file_ophalen                                 */
/*                                                                                             */
/***********************************************************************************************/
private void sensor_data_uit_file_ophalen()
{
   // called from: day_button_actionPerformed() [RS232_view.java]
   //              week_button_actionPerformed() [RS232_view.java]
   //
   // retrieving sensor data from file, only once (no timer because there is no active serial connection)
   
   new SwingWorker<Void, Void>()
   {
      @Override
      protected Void doInBackground() throws Exception
      {
         if (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2)        // PTB220 or PTB330 connected
         {
            Read_Sensor_Data_Files_For_Barograph();
         }
         else if (main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10)   // AWS connected
         {
				if (main.mode_grafiek.equals(main.MODE_ALL_PARAMETERS))
				{	
               Read_Sensor_Data_Files_For_Graphs_4();
				}
				else
				{
					Read_Sensor_Data_Files_For_Graphs();
				}
         }
         else if (main.RS232_connection_mode == 4 || main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6)  // Mintaka Duo or Mintaka Star USB or Mintaka Star WiFi
         {
            Read_Sensor_Data_Files_For_Barograph_Mintaka_Duo_Or_Mintaka_Star_Or_StarX();
         }   
         else if (main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8)  // StarX USB or StarX LAN
         {
            if (main.mode_grafiek.equals(main.MODE_PRESSURE))
            {
               Read_Sensor_Data_Files_For_Barograph_Mintaka_Duo_Or_Mintaka_Star_Or_StarX();
            }
            else if (main.mode_grafiek.equals(main.MODE_AIRTEMP))
            {
               Read_Sensor_Data_Files_For_Air_Temp_Graph_Mintaka_StarX();
            }
         }
         
         return null;
      } // protected Void doInBackground() throws Exception

      @Override
      protected void done()
      {
         jPanel1.repaint();                                                        // main panel
      }
   }.execute(); // new SwingWorker<Void, Void>()  
   
}



/***********************************************************************************************/
/*                                                                                             */
/*                           init_sensor_data_uit_file_ophalen_timer                           */
/*                                                                                             */
/***********************************************************************************************/
private void init_sensor_data_uit_file_ophalen_timer()
{
   // retrieving sensor data from file, timer scheduled
   //
   // called from: day_button_actionPerformed() [RS232_view.java]
   //              week_button_actionPerformed() [RS232_view.java]
   //
   
   ActionListener sensor_data_file_ophalen_action = new ActionListener()
   {
      @Override
      public void actionPerformed(ActionEvent e)
      {
         //cal_systeem_datum_tijd = new GregorianCalendar(new SimpleTimeZone(0, "UTC")); // geeft systeem datum tijd in UTC van dit moment
         //cal_systeem_datum_tijd.getTime();                                 // effectueren

         //RS232_AWS_1View.sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
         //System.out.println(RS232_AWS_1View.sdf2.format(new Date()));

         // event schrijven naar java console
//         if (JAVA_CONSOLE_OUTPUT == true)
//         {
//            // NB ONDERSTAANDE GEEFT NIET UTC MAAR DE LOKALE TIJD!!!
//            // DIT VOORAL OMDAT DIT ER TOEN NOG NIET AS:  sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
//            //String systeem_date_time = RS232_AWS_1View.sdf2.format(cal_systeem_datum_tijd.getTime());
//            //System.out.println("--- " + RS232_AWS_1View.APPLICATION_NAME + " " + systeem_date_time.substring(6, 8) + "-" + systeem_date_time.substring(4, 6) + "-" + systeem_date_time.substring(0, 4) + " " + systeem_date_time.substring(8, 10) + "." + systeem_date_time.substring(10) + " UTC" + ": inlezen sensor data uit file via via Timer");
//
//            // DEZE ONDERSTAANDE GEEFT WEL UTC!!!! (door Date() te gebruiken)
//            System.out.println("--- " + main.sdf2.format(new Date()) + " UTC" + ": inlezen sensor data uit file via Timer");
//         }


         new SwingWorker<Void, Void>()
         {
            @Override
            protected Void doInBackground() throws Exception
            {
               if (main.RS232_connection_mode == 1 || main.RS232_connection_mode == 2)     // PTB220 or PTB330 connected
               {
                  Read_Sensor_Data_Files_For_Barograph();
               }
               else if (main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10) // AWS connected
               {
                  if (main.mode_grafiek.equals(main.MODE_ALL_PARAMETERS))
						{
						   Read_Sensor_Data_Files_For_Graphs_4();
						}
						else
						{
							Read_Sensor_Data_Files_For_Graphs();
						}
               }
               else if (main.RS232_connection_mode == 4 || main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6) // Mintaka Duo, Mintaka Star USB, Mintaka Star WiFi
               {
                  Read_Sensor_Data_Files_For_Barograph_Mintaka_Duo_Or_Mintaka_Star_Or_StarX();
               }   
               else if (main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8) // Mintaka StarX USB or Mintaka StarX LAN
               {
                  if (main.mode_grafiek.equals(main.MODE_PRESSURE))
                  {
                     Read_Sensor_Data_Files_For_Barograph_Mintaka_Duo_Or_Mintaka_Star_Or_StarX();
                  }
                  else if (main.mode_grafiek.equals(main.MODE_AIRTEMP))
                  {
                     Read_Sensor_Data_Files_For_Air_Temp_Graph_Mintaka_StarX();
                  }
               }

               return null;
            } // protected Void doInBackground() throws Exception

            @Override
            protected void done()
            {
               jPanel1.repaint();                                                        // main panel
            }
         }.execute(); // new SwingWorker<Void, Void>()

      } // public void actionPerformed(ActionEvent e)
   }; // ActionListener sensor_data_file_ophalen_action = new ActionListener()

   // zo snel mogelijk geheugen weer vrijmaken
   //cal_systeem_datum_tijd = null;

   // main loop for retrieving sensor data from file (file was and is filled by TurboWin+)
   sensor_data_file_ophalen_timer = new Timer(DELAY_SENSOR_DATA_FILE_OPHALEN_LOOP, sensor_data_file_ophalen_action);
   sensor_data_file_ophalen_timer.setRepeats(true);                             // false = only one action
   sensor_data_file_ophalen_timer.setInitialDelay(INITIAL_DELAY_SENSOR_DATA_FILE_OPHALEN_LOOP); // time in millisec to wait after timer is started to fire first event
   sensor_data_file_ophalen_timer.setCoalesce(true);                            // in principe was dit al de default, maar voor de zekerheid hier neergezet
   //sensor_data_file_ophalen_timer.start();
   sensor_data_file_ophalen_timer.restart();
   main.sensor_data_file_ophalen_timer_is_gecreeerd = true;
}

   
   

/***********************************************************************************************/
/*                                                                                             */
/*                             Read_Sensor_Data_Files_For_Barograph                            */
/*                                                                                             */
/***********************************************************************************************/
private void Read_Sensor_Data_Files_For_Barograph()
{
   // NB this function reads sensor data from an individual Vaisala barometer (not from an AWS) stored in files
   //
   // NB This function will be called from within a swingworker, see: init_sensor_data_uit_file_ophalen_timer() and sensor_data_uit_file_ophalen()
   //    so not necessary to use a swingworker here (it is adviced to use a swingworker when file reading/writing)
   //
   // NB plot every 5 minutes -> 12 points per hour -> 288 points per 24 hours (12 * 24) + 12 (extra hour)


   // declaration + initialisation
   int type_record_lengte                                 = 0;
   int type_record_datum_tijd_begin_pos                   = 0;
   int type_record_minuten_begin_pos                      = 0;
   int type_record_pressure_begin_pos                     = 0;
   
   String sensor_data_file_name                           = "";
   String volledig_path_sensor_data                       = "";
   String record_datum_tijd                               = "";
   String record_minuten                                  = "";
   String record_pressure                                 = "";
   String record_datum_tijd_met_minuten                   = "";      // voor tijdsweergave van de laatste barometer waarde apart op barogram
   
   int int_record_minuten;
   int aantal_intelezen_files                             = 0;
   int wrong_record_length_counter;
   int wrong_record_pressure_counter;

   
   // initialisation
   for (int k = 0; k < AANTAL_PLOT_POINTS; k++)
   {
      sensor_waarde_array[k] = "";
      datum_tijd_array[k]    = "";
   }

   // intialisation
   wrong_record_length_counter                            = 0;   // keep track of the number of records with wrong record length (every 1 minute) in the file (note: only in the file of present hour)
   wrong_record_pressure_counter                          = 0;   // keep track of the number of records with wrong pressure format (every 5 minutes) in the file
   
   
   if (main.RS232_connection_mode == 1)          // PTB220
   {
      type_record_lengte                 = main.RECORD_LENGTE_PTB220;
      type_record_datum_tijd_begin_pos   = main.RECORD_DATUM_TIJD_BEGIN_POS_PTB220;
      type_record_minuten_begin_pos      = main.RECORD_MINUTEN_BEGIN_POS_PTB220;
      type_record_pressure_begin_pos     = main.RECORD_P_BEGIN_POS_PTB220;
   }
   else if (main.RS232_connection_mode == 2)     // PTB330
   {
      type_record_lengte                 = main.RECORD_LENGTE_PTB330;
      type_record_datum_tijd_begin_pos   = main.RECORD_DATUM_TIJD_BEGIN_POS_PTB330;
      type_record_minuten_begin_pos      = main.RECORD_MINUTEN_BEGIN_POS_PTB330;
      type_record_pressure_begin_pos     = main.RECORD_P_BEGIN_POS_PTB330;
   }


   if ((mode_tijd_periode).equals(MODE_DAY))
   {
      aantal_intelezen_files = 24;          // 24 * 1 = 24
   }
   else if ((mode_tijd_periode).equals(MODE_WEEK))
   {
      aantal_intelezen_files = 168;         // 24 * 7 = 168
   }

   // message to console
   System.out.println("--- " +  sdf2.format(new Date()) + " UTC " + "reading barometer sensor data from file for graph");
   

   // 24 files at day mode and 168 at week mode must be read (eg sensor_data_2013020115.txt, sensor_data_2013020116.txt etc.)
   for (int i = aantal_intelezen_files; i >= 0; i--)
   {
      cal_file_datum_tijd = new GregorianCalendar();
      cal_file_datum_tijd.add(Calendar.HOUR_OF_DAY, -i);

      String sensor_data_file_naam_datum_tijd_deel = main.sdf3.format(cal_file_datum_tijd.getTime()); // eg 2013020308
      sensor_data_file_name = "sensor_data_" + sensor_data_file_naam_datum_tijd_deel + ".txt";

      // first check if there is a sensor data file present (and not empty)
      volledig_path_sensor_data = main.logs_dir + java.io.File.separator + sensor_data_file_name;
      // bv volledig_path_sensor_data = C:\Users\Martin\Documents\NetBeansProjects\RS232_AWS_1\data\sensor_data.aws

      //System.out.println("--- " +  RS232_AWS_1View.sdf2.format(new Date()) + " UTC " + "proberen te openen file: " + volledig_path_sensor_data);

      // keep track of the file name of the last (present hour) sensor data file
      if (i == 0)
      {
         // NB for later use if there are more than 20 wrong records in the file ( or > 3 invalid pressure formats) , so we can delete this file, otherwise after a restart the program complains again (see next lines)
         last_sensor_data_file = volledig_path_sensor_data;
      }


      File sensor_data_file = new File(volledig_path_sensor_data);
      if (sensor_data_file.exists() && sensor_data_file.length() > 0)     // length() in bytes
      {
         try
         {
            BufferedReader in = new BufferedReader(new FileReader(volledig_path_sensor_data));

            try
            {
               String record                    = null;

               //System.out.println("--- " + RS232_AWS_1View.sdf2.format(new Date()) + " UTC " + "geopende file: " + volledig_path_sensor_data);

               while ((record = in.readLine()) != null)
               {
                  if (record.length() == type_record_lengte)
                  {
                     record_datum_tijd = record.substring(type_record_datum_tijd_begin_pos, type_record_datum_tijd_begin_pos + 10);       // substring van begin-index t/m eind-index-1

                     //System.out.println("--- " + "record met lengte 54 = " + record);

                     if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel)) // NB record_datum_tijd dus ook zonder minuten (YYYYMMDDUU)
                     {
                        record_minuten = record.substring(type_record_minuten_begin_pos, type_record_minuten_begin_pos + 2);

                        // initialisation
                        int_record_minuten = 9999;

                        try
                        {
                           int_record_minuten = Integer.parseInt(record_minuten.trim());
                        }
                        //catch (NumberFormatException e) {System.out.println("--- " + "NumberFormatException:" + e); }
                        catch (NumberFormatException e) { }

                        // only pressure every 5 minutes (00, 05, 10, 15 etc minutes) !
                        if (int_record_minuten >= 0 && int_record_minuten <= 59 && (int_record_minuten % 5 == 0))
                        {
                           record_pressure = record.substring(type_record_pressure_begin_pos, type_record_pressure_begin_pos + 7);
                           int int_minuten_5 = int_record_minuten / 5;

                           //sensor_waarde_array[(24 - i) * 12 + int_minuten_5] = record_pressure; // dus om de 5 miuten opslag (=array plaats)
                           sensor_waarde_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_pressure.trim(); // dus om de 5 miuten opslag (=array plaats)

                           record_datum_tijd_met_minuten = record.substring(type_record_datum_tijd_begin_pos, type_record_datum_tijd_begin_pos + 12);       // YYYYMMDDUUmm

                           datum_tijd_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // dus om de 5 miuten opslag (=array plaats)

                           //System.out.println("--- " + "record_pressure = " + record_pressure);
                           
                           // check/testing on valid pressure value
                           if (i == 0)           // so file of present hour
                           {
                              try
                              {   
                                 double test_waarde = Double.parseDouble(record_pressure);
                                 if (test_waarde < 900.0 || test_waarde > 1100.0)
                                 {
                                    wrong_record_pressure_counter++;
                                 }   
                              } // try  
                              catch (NumberFormatException e) 
                              {
                                 wrong_record_pressure_counter++;
                              } // catch
                           } //  if (i == 0)
                           
                        } // if (int_record_minuten >= 0 && int_record_minuten <= 59 etc.
                     } // if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))

                  } // if (record.length() == type_record_lengte)
                  else // record length not OK
                  {
                     if (i == 0)                  // so file of present hour
                     {
                        wrong_record_length_counter++;

                        // NB when no <cr> then all records will be written as one long string 
                        if (record.length() > (MAX_WRONG_RECORDS * type_record_lengte))
                        {
                           wrong_record_length_counter += MAX_WRONG_RECORDS;
                        }

                        //System.out.println("--- wrong_record_length_counter = " + wrong_record_length_counter);

                     } // if (i == 0)
                  } // else (record length not OK)


                  //}
                  //catch (NumberFormatException e) {System.out.println("--- " + "NumberFormatException:" + e); }

                  //// clear memory
                  //cal_file_datum_tijd = null;

               } // while ((record = in.readLine()) != null)
               //in.close();

            } // try
            finally
            {
               in.close();
            }

         } // try
         //catch (IOException ex) {System.out.println("--- " + "IOException:" + ex); }
         catch (IOException ex) {  }

      } // if (sensor_data_file.exists() && sensor_data_file.length() > 0)
      
      // clear memory
      cal_file_datum_tijd = null;
      
   } // for (int i = aantal_intelezen_files; i >= 0; i--)


   // 
   // check
   //
   if ( (wrong_record_length_counter > MAX_WRONG_RECORDS) || (wrong_record_pressure_counter > MAX_WRONG_PRESSURE_IN_RECORDS) )
   {
      if (wrong_record_length_counter > MAX_WRONG_RECORDS)
      {
         System.out.println("--- more than " + MAX_WRONG_RECORDS + " records with wrong length (or 1 record with length > " + MAX_WRONG_RECORDS + " x default record length)" + " Function Read_Sensor_Data_Files_For_Barograph()");
      }
      else if (wrong_record_pressure_counter > MAX_WRONG_PRESSURE_IN_RECORDS)
      {
         System.out.println("--- more than " + MAX_WRONG_PRESSURE_IN_RECORDS + " Function Read_Sensor_Data_Files_For_Barograph()");
      }   

/*
 *  ------- ONDERSTAANDE DOET HET WEL GOED (EEN SOORT AUTOMATISCHE RESTART) ---------
 *
      // verwijderen van de laatse file waar zoveel foutieve records in staan (anders valt programma bij de volgende check er direct weer over)
      new SwingWorker<Void, Void>()
      {
         @Override
         protected Void doInBackground() throws Exception
         {
            File file_sensor_data = new File(last_sensor_data_file);
            if (file_sensor_data.exists())
            {
               file_sensor_data.delete();
            }

            return null;
         } // protected Void doInBackground() throws Exception
      }.execute(); // new SwingWorker<Void, Void>()

      // sluiten openstaande com port!
      if (serialPort != null)
      {
         serialPort.close();
      }

      // sluiten timer??
      if (sensor_data_file_ophalen_timer != null)
      {
         sensor_data_file_ophalen_timer = null;
      }

      //Format_Barometer_Output_3();
      initComponents2();

 */

      if (dialog_sensor_data_error_present == false)
      {
         //private JDialog optionPaneDialog;
         //JFrame mainFrame = RS232_AWS_1App.getApplication().getMainFrame();
         //JFrame mainFrame = main.getApplication().getMainFrame();
         
         //optionPaneDialog = new JDialog(mainFrame, main.APPLICATION_NAME);   // A dialog can be either modeless (the default) or modal (A modal dialog is one which blocks input to some other top-level windows in the application)
         optionPaneDialog = new JDialog(this, main.APPLICATION_NAME);
         
         // NB Note we are creating an instance of a JOptionPane
         //    Normally it's just a call to a static method.
         JOptionPane optPane = new JOptionPane("sensor data format errors, close " + main.APPLICATION_NAME + "; unplug/plug the (USB)serial communication cable, wait a few seconds; start " + main.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE, JOptionPane.DEFAULT_OPTION);

         // NB Listen for the JOptionPane button click. It comes through as property change
         //    event with the property called "value".
         optPane.addPropertyChangeListener(new PropertyChangeListener()
         {
            @Override
            public void propertyChange(PropertyChangeEvent e)
            {
               if (e.getPropertyName().equals("value"))
               {
                  switch ((Integer)e.getNewValue())
                  {
                     //case JOptionPane.OK_OPTION: break;
                     case JOptionPane.OK_OPTION:                        
                     new SwingWorker<Void, Void>()
                     {
                        @Override
                        protected Void doInBackground() throws Exception
                        {
                           File file_sensor_data = new File(last_sensor_data_file);
                           if (file_sensor_data.exists())
                           {
                              file_sensor_data.delete();
                           }
                           return null;
                        } // protected Void doInBackground() throws Exception
                     }.execute(); // new SwingWorker<Void, Void>()                       
                     
                     break;         
                  }
                  optionPaneDialog.dispose();
                  dialog_sensor_data_error_present = false;
               }
            }
         });
         optionPaneDialog.setContentPane(optPane);

         // NB Let the JDialog figure out how big it needs to be
         //    based on the size of JOptionPane by calling the pack() method
         optionPaneDialog.pack();
         //optionPaneDialog.setLocationRelativeTo(mainFrame);
         optionPaneDialog.setLocationRelativeTo(this);
         optionPaneDialog.setVisible(true);
         dialog_sensor_data_error_present = true;

      } // if (dialog_sensor_data_error_present == false)
   } // if (wrong_record_length_counter > 10)

   
}

   

/***********************************************************************************************/
/*                                                                                             */
/*                             Read_Sensor_Data_Files_For_Graphs                               */
/*                                                                                             */
/***********************************************************************************************/
private void Read_Sensor_Data_Files_For_Graphs()
{
   // NB this function reads sensor data from an AWS (not from an individual Vaisala or Mintaka barometer) stored in files
   //
   // NB This function will be called from within a swingworker, see: init_sensor_data_uit_file_ophalen_timer() and sensor_data_uit_file_ophalen()
   //    so not necessary to use a swingworker here (it is adviced to use a swingworker when file reading/writing)
   //
   // NB plot every 5 minutes -> 12 points per hour -> 288 points per 24 hours (12 * 24) + 12 (extra hour)

   
   //final int TOTAL_NUMBER_RECORD_COMMAS                   = 27;  // 26 via predefined format + 1 comma added by TurboWin+
   int number_read_commas                                 = 0;
   int number_parameter_commas                            = -1;    // (1st)parameter value (eg wind speed) after this comma number
   int number_parameter_commas_2                          = -1;    // if applicable: 2nd parameter value (eg wind gust) after this comma number
   int aantal_intelezen_files                             = 0;
   int int_record_minuten                                 = 0;
   int pos                                                = 0;
   String sensor_data_file_name                           = "";
   String volledig_path_sensor_data                       = "";
   String record_parameter                                = "";
   String record_datum_tijd_met_minuten                   = "";
   String record_datum_tijd                               = "";
   String record_minuten                                  = "";
   boolean doorgaan_in_record                             = true;
   
   
   // initialisation
   if (main.mode_grafiek.equals(main.MODE_PRESSURE))
   {
      number_parameter_commas   = main.PRESSURE_MSL_COMMA_NUMBER;                // MSL pressure parameter data after comma 9 (start counting at 1)
      number_parameter_commas_2 = -1;
   }
   else if (main.mode_grafiek.equals(main.MODE_AIRTEMP))
   {
      number_parameter_commas   = main.AIR_TEMP_COMMA_NUMBER;                    // air temp parameter data after comma 12 (start counting at 1)
      number_parameter_commas_2 = -1;
   }
   else if (main.mode_grafiek.equals(main.MODE_SST))
   {
      number_parameter_commas   = main.SST_COMMA_NUMBER;                         // sst parameter data after comma 14 (start counting at 1)
      number_parameter_commas_2 = -1;
   }
   else if (main.mode_grafiek.equals(main.MODE_WIND_SPEED))
   {
      number_parameter_commas   = main.TRUE_WIND_SPEED_COMMA_NUMBER;             // true wind speed parameter data after comma 17 (start counting at 1)
      number_parameter_commas_2 = main.TRUE_WIND_GUST_COMMA_NUMBER;              // true wind gust parameter data after comma 19 (start counting at 1)
   }
   else if (main.mode_grafiek.equals(main.MODE_WIND_DIR))
   {
      number_parameter_commas   = main.TRUE_WIND_DIR_COMMA_NUMBER;               // true wind dir parameter data after comma 18 (start counting at 1)
      number_parameter_commas_2 = -1;
   }
   else
   {
      System.out.println("+++ mode_grafiek unknown, Function Read_Sensor_Data_For_Graphs()");
   }
   
   // initialisation
   for (int k = 0; k < AANTAL_PLOT_POINTS; k++)
   {
      sensor_waarde_array[k]   = "";
      sensor_waarde_array_2[k] = "";                        // used by the second line in the graph (e.g. wind gust in the wind speed graph)
      datum_tijd_array[k]      = "";
   }
   
   // initialisation
   if ((mode_tijd_periode).equals(MODE_DAY))
   {
      aantal_intelezen_files = 24;          // 24 * 1 = 24
   }
   else if ((mode_tijd_periode).equals(MODE_WEEK))
   {
      aantal_intelezen_files = 168;         // 24 * 7 = 168
   }

   // message to console
   System.out.println("--- " +  sdf2.format(new Date()) + " UTC " + "reading AWS sensor data from file for graph");
   
   
   //cal_file_datum_tijd = new GregorianCalendar();
   for (int i = aantal_intelezen_files; i >= 0; i--)
   {
      cal_file_datum_tijd = new GregorianCalendar();
      cal_file_datum_tijd.add(Calendar.HOUR_OF_DAY, -i);

      String sensor_data_file_naam_datum_tijd_deel = main.sdf3.format(cal_file_datum_tijd.getTime()); // -> eg 2013020308
      sensor_data_file_name = "sensor_data_" + sensor_data_file_naam_datum_tijd_deel + ".txt";

      // first check if there is a sensor data file present (and not empty)
      volledig_path_sensor_data = main.logs_dir + java.io.File.separator + sensor_data_file_name;
      // bv volledig_path_sensor_data = C:\Users\Martin\Documents\NetBeansProjects\RS232_AWS_1\data\sensor_data.aws

      //System.out.println("+++ " +  "i = : " + i);
      //System.out.println("+++ " +  "proberen te openen file: " + volledig_path_sensor_data);

      // keep track of the file name of the last (present hour) sensor data file
      //if (i == 0)
      //{
      //   // for later use if there are more than 20 wrong records in the file, so we can delete this file, otherwise after a restart the program complains again (see next lines)
      //   last_sensor_data_file = volledig_path_sensor_data;
      //}
      

      File sensor_data_file = new File(volledig_path_sensor_data);
      if (sensor_data_file.exists() && sensor_data_file.length() > 0)     // length() in bytes
      {
         try
         {
            BufferedReader in = new BufferedReader(new FileReader(volledig_path_sensor_data));

            try
            {
               String record                    = null;
               
               while ((record = in.readLine()) != null)                                 // null means that the end of the stream has been reached 
               {
                  //System.out.println("+++ ingelezen record: " + record);
               
                  // initialisation
                  doorgaan_in_record               = true;
                  
                  // Check the number of comma's in the record that must exactely match the fixed expected number (TOTAL_NUMBER_RECORD_COMMAS)
                  //
                  number_read_commas = 0;
                  pos = -1;
                        
                  do
                  {
                     pos = record.indexOf(",", pos + 1);
                     if (pos > 0)     // "," found
                     {
                        number_read_commas++;
                     }
                  } while (pos > 0); 
                        
                  if (number_read_commas != main.TOTAL_NUMBER_RECORD_COMMAS)
                  {
                     doorgaan_in_record = false;
                  }                
                  
                  //if ( (record.length() > 18) && (record.substring(0, 6).equals("$PEUMB")) )   // NB > 18 is a little bit arbitrary number (YYYYMMDDHHmm + $PEUMB = 18 chars)
                  if ( (doorgaan_in_record == true) && (record.length() > 18) && (record.substring(0, 6).equals("$PEUMB")) )   // NB > 18 is a little bit arbitrary number (YYYYMMDDHHmm + $PEUMB = 18 chars)
                  {
                     pos = record.lastIndexOf(",");                                       // searching for LAST appearance of ","
                     //if (pos > 0)     // so "," found
                     if ((pos > 0) && (pos + 1 + 12 == record.length()))     // so "," found and YYYYMMDDHHmm follows
                     {
                        record_datum_tijd_met_minuten = record.substring(pos + 1, pos + 1 + 12);  // YYYYMMDDHHmm has length 12
                        record_datum_tijd             = record.substring(pos + 1, pos + 1 + 10);  // YYYYMMDDHH has length 10
                     
                        //System.out.println("+++ record_datum_tijd_met_minuten = " + record_datum_tijd_met_minuten);
                        //System.out.println("+++ record_datum_tijd = " + record_datum_tijd);
                        //System.out.println("+++ sensor_data_file_naam_datum_tijd_deel = " + sensor_data_file_naam_datum_tijd_deel);
                        
                        if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        {
                           record_minuten = record.substring(pos + 1 + 10, pos + 1 + 12);         // mm from YYYYMMDDHHmm
                           
                           //System.out.println("+++ record_minuten = " + record_minuten);

                           // initialisation
                           int_record_minuten = 9999;

                           try
                           {
                              int_record_minuten = Integer.parseInt(record_minuten.trim());
                           }
                           catch (NumberFormatException e) 
                           {
                              //System.out.println("+++ " + "NumberFormatException:" + e);
                              doorgaan_in_record = false;
                           }

                           // only parameter value (eg pressure) every 5 minutes (00, 05, 10, 15 etc minutes) !
                           if (!(int_record_minuten >= 0 && int_record_minuten <= 59 && (int_record_minuten % 5 == 0)))
                           {
                              doorgaan_in_record = false;
                           }      
                           //else
                           //{
                           //   System.out.println("+++ " + "minuten ok (5-voud)");
                           //   System.out.println("+++ " + "doorgaan_in_record = " + doorgaan_in_record);
                           //}
                        } // if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        else
                        {
                           doorgaan_in_record = false;
                        }
                     } // if (pos > 0) -> so "," NOT found
                     else
                     {
                        doorgaan_in_record = false;
                     }
                        
                     
                     // If the by TurboWin+ added date and time are OK and number of commas in the record is OK then continue
                     //
                     if (doorgaan_in_record == true)
                     {   
                        // initialisation
                        number_read_commas = 0;
                        pos = -1;
                           
                        do
                        {
                           pos = record.indexOf(",", pos + 1);    // searching "," from position "pos + 1"
                           if (pos > 0)     // "," found
                           {
                              number_read_commas++;
                              
                              if (number_read_commas == number_parameter_commas) // eg air temp value always after the 12th comma
                              {
                                 if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                                 {
                                    int pos2 = record.indexOf(",", pos + 1);
                                    if (pos2 - pos >= 2)            // between conmmas at least 1 char
                                    {
                                       record_parameter = record.substring(pos + 1, pos2);
                                       
                                       //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                                       int int_minuten_5 = int_record_minuten / 5;

                                       sensor_waarde_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
                                       datum_tijd_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)
                                    } // if (pos2 - pos >= 2)
                                 } // if (record.length() > number_read_commas + 12)
                              } // if (number_read_commas == number_parameter_commas)
                              
                              // NB e.g. in case of wind speed a second line (wind gust) will be drawn
                              //
                              if (number_read_commas == number_parameter_commas_2)
                              {
                                 if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                                 {
                                    int pos2 = record.indexOf(",", pos + 1);
                                    if (pos2 - pos >= 2)            // between commas at least 1 char
                                    {
                                       record_parameter = record.substring(pos + 1, pos2);
                                       
                                       int int_minuten_5 = int_record_minuten / 5;

                                       //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                                       sensor_waarde_array_2[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
                                    } // if (pos2 - pos >= 2)
                                 } // if (record.length() > number_read_commas + 12)
                                 
                              } // if (number_read_commas == number_parameter_commas_2)
                              
                           } // if (pos > 0)
                        } while (pos > 0); 
                           
                     } // if (doorgaan_in_record)
                  } // if ( (record.length() > 18) etc.
                  
                  
               } // while ((record = in.readLine()) != null)
               //in.close();

            } // try
            finally
            {
               in.close();
            }

         } // try
         //catch (IOException ex) {System.out.println("--- " + "IOException:" + ex); }
         catch (IOException ex) {  }

      } // if (sensor_data_file.exists() && sensor_data_file.length() > 0)
      
      // clear memory
      cal_file_datum_tijd = null;
      
   } // for (int i = aantal_intelezen_files; i >= 0; i--)
   //cal_file_datum_tijd = null;
}
   


/***********************************************************************************************/
/*                                                                                             */
/*      Read_Sensor_Data_Files_For_Barograph_Mintaka_Duo_Or_Mintaka_Star()                     */
/*                                                                                             */
/***********************************************************************************************/
private void Read_Sensor_Data_Files_For_Barograph_Mintaka_Duo_Or_Mintaka_Star_Or_StarX()
{
   // called from: sensor_data_uit_file_ophalen() [RS232_view.java]
   //              init_sensor_data_uit_file_ophalen() [RS232_view.java]
   //
   // NB this function reads sensor data from an individual Mintaka Duo or Star/StarX barometer (not from an AWS) stored in files
   //
   // NB This function will be called from within a swingworker, see: init_sensor_data_uit_file_ophalen_timer() and sensor_data_uit_file_ophalen()
   //    so not necessary to use a swingworker here (it is adviced to use a swingworker when file reading/writing)
   //
   // NB plot every 5 minutes -> 12 points per hour -> 288 points per 24 hours (12 * 24) + 12 (extra hour)

   final int AGE_NOT_OK                                   = 999999;
   int number_read_commas                                 = 0;
   int aantal_intelezen_files                             = 0;
   int int_record_minuten                                 = 0;
   int pos  = 0;
   int pos1 = 0;
   int pos2 = 0;
   int pos3 = 0;                                         
   int pos4 = 0;                                        
   int pos5 = 0;                                        
   int pos6 = 0;                                        
   int pos7 = 0;                                        
   int pos8 = 0;                                        
   int pos9 = 0;
   int pos10 = 0;                                        
   int pos11 = 0;                                        
   int pos12 = 0;
   int pos13 = 0;                                        
   int pos14 = 0;                                        // pos of the "*" in case STarX
   String local_obs_age                                   = "";
   String sensor_data_file_name                           = "";
   String volledig_path_sensor_data                       = "";
   String record_parameter                                = "";
   String record_datum_tijd_met_minuten                   = "";
   String record_datum_tijd                               = "";
   String record_minuten                                  = "";
   boolean doorgaan_in_record                             = true;
   
   
   // initialisation
   for (int k = 0; k < AANTAL_PLOT_POINTS; k++)
   {
      sensor_waarde_array[k]   = "";
      datum_tijd_array[k]      = "";
   }
   
   // initialisation
   if ((mode_tijd_periode).equals(MODE_DAY))
   {
      aantal_intelezen_files = 24;          // 24 * 1 = 24
   }
   else if ((mode_tijd_periode).equals(MODE_WEEK))
   {
      aantal_intelezen_files = 168;         // 24 * 7 = 168
   }

   // message to console
   System.out.println("--- " +  sdf2.format(new Date()) + " UTC " + "reading Mintaka Duo/Star/StarX sensor data from file for graph");
   
   
   for (int i = aantal_intelezen_files; i >= 0; i--)
   {
      cal_file_datum_tijd = new GregorianCalendar();
      cal_file_datum_tijd.add(Calendar.HOUR_OF_DAY, -i);

      String sensor_data_file_naam_datum_tijd_deel = main.sdf3.format(cal_file_datum_tijd.getTime()); // -> eg 2013020308
      sensor_data_file_name = "sensor_data_" + sensor_data_file_naam_datum_tijd_deel + ".txt";

      // first check if there is a sensor data file present (and not empty)
      volledig_path_sensor_data = main.logs_dir + java.io.File.separator + sensor_data_file_name;
      // bv volledig_path_sensor_data = C:\Users\Martin\Documents\NetBeansProjects\RS232_AWS_1\data\sensor_data.aws

      //System.out.println("+++ " +  "i = : " + i);
      //System.out.println("+++ " +  "proberen te openen file: " + volledig_path_sensor_data);

      // keep track of the file name of the last (present hour) sensor data file
      //if (i == 0)
      //{
      //   // for later use if there are more than 20 wrong records in the file, so we can delete this file, otherwise after a restart the program complains again (see next lines)
      //   last_sensor_data_file = volledig_path_sensor_data;
      //}
      

      File sensor_data_file = new File(volledig_path_sensor_data);
      if (sensor_data_file.exists() && sensor_data_file.length() > 0)     // length() in bytes
      {
         try
         {
            BufferedReader in = new BufferedReader(new FileReader(volledig_path_sensor_data));

            try
            {
               String record                    = null;
               
               while ((record = in.readLine()) != null)                                 // null means that the end of the stream has been reached 
               {
                  //System.out.println("+++ ingelezen record: " + record);
               
                  // initialisation
                  doorgaan_in_record               = true;
                  
                  // Check the number of comma's in the record that must exactely match the fixed expected number (TOTAL_NUMBER_RECORD_COMMAS_MINTAKA)
                  //
                  number_read_commas = 0;
                  pos = -1;
                        
                  do
                  {
                     pos = record.indexOf(",", pos + 1);
                     if (pos != -1)     // "," found
                     {
                        number_read_commas++;
                        //System.out.println("+++ number_read_commas = " + number_read_commas);
                     }
                  } while (pos != -1); 
                        
                  if (main.RS232_connection_mode == 4)                                              // Mintaka Duo
                  {   
                     if (number_read_commas != main.TOTAL_NUMBER_RECORD_COMMAS_MINTAKA)
                     {
                        doorgaan_in_record = false;
                     }          
                  }
                  else if (main.RS232_connection_mode == 5 || main.RS232_connection_mode == 6)      // Mintaka Star USB or Mintaka Star WiFi
                  {   
                     if (number_read_commas != main.TOTAL_NUMBER_RECORD_COMMAS_MINTAKA_STAR)
                     {
                        doorgaan_in_record = false;
                     }          
                  }        
                  else if (main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8)      // Mintaka StarX USB or Mintaka StarX WiFi
                  {   
                     if (number_read_commas != main.TOTAL_NUMBER_RECORD_COMMAS_MINTAKA_STARX)
                     {
                        doorgaan_in_record = false;
                     }          
                  }   
                  
                  if ( (doorgaan_in_record == true) && (record.length() > 15) )          // NB > 15 is a little bit arbitrary number (YYYYMMDDHHmm + 3 commas + at leat 2 char pressure value= 15 chars)
                  {
                     pos = record.length() -12;                                          // pos is now start position of YYYYMMDDHHmm
                     
                     if (pos > 0)     
                     {
                        record_datum_tijd_met_minuten = record.substring(pos, pos + 12);  // YYYYMMDDHHmm has length 12
                        record_datum_tijd             = record.substring(pos, pos + 10);  // YYYYMMDDHH has length 10
                     
                        //System.out.println("+++ record_datum_tijd_met_minuten = " + record_datum_tijd_met_minuten);
                        //System.out.println("+++ record_datum_tijd = " + record_datum_tijd);
                        //System.out.println("+++ sensor_data_file_naam_datum_tijd_deel = " + sensor_data_file_naam_datum_tijd_deel);
                        
                        if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        {
                           record_minuten = record.substring(pos + 10, pos + 12);         // mm from YYYYMMDDHHmm
                           
                           //System.out.println("+++ record_minuten = " + record_minuten);

                           // initialisation
                           int_record_minuten = 9999;

                           try
                           {
                              int_record_minuten = Integer.parseInt(record_minuten.trim());
                           }
                           catch (NumberFormatException e) 
                           {
                              //System.out.println("+++ " + "NumberFormatException:" + e);
                              doorgaan_in_record = false;
                           }

                           // only parameter value (eg pressure) every 5 minutes (00, 05, 10, 15 etc minutes) !
                           if (!(int_record_minuten >= 0 && int_record_minuten <= 59 && (int_record_minuten % 5 == 0)))
                           {
                              doorgaan_in_record = false;
                           }      
                           //else
                           //{
                           //   System.out.println("+++ " + "minuten ok (5-voud)");
                           //   System.out.println("+++ " + "doorgaan_in_record = " + doorgaan_in_record);
                           //}
                        } // if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        else
                        {
                           doorgaan_in_record = false;
                        }
                     } // if (pos > 0)
                     else
                     {
                        doorgaan_in_record = false;
                     }
                        
                     
                     // If the by TurboWin+ added date and time are OK and number of commas in the record is OK then continue
                     //
                     if (doorgaan_in_record == true)
                     {   
                        // initialisation
                        
                        if ((main.RS232_connection_mode == 4) || (main.RS232_connection_mode == 5) || (main.RS232_connection_mode == 6)) // Mintaka Dua, Mintaka Star USB or Mintak Star LAN
                        {
                           number_read_commas = 0;
                           pos = 0;
                           pos2 = -1;

                           if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                           {    
                              pos2 = record.indexOf(",", pos);
                              if (pos2 - pos >= 2)            // between commas at least 1 char
                              {
                                 record_parameter = record.substring(pos, pos2);
                              } // if (pos2 - pos >= 2)
                           } // if (record.length() > pos + 1 + 12)
                        } // if ((main.RS232_connection_mode == 4) etc.
                        else if ((main.RS232_connection_mode == 7) || (main.RS232_connection_mode == 8)) // Mintaka StarX USB or Mintaka StarX LAN
                        {
                           // StarX example: // 1009.73,1007.73,0.00,0, 52 41.9491N,  6 14.1802E,0,1,7,19.5,65,15.4,12.8,58*16
                           pos1 = record.indexOf(",", 0);                                              // ML hereafter; position of the first "," in the last record
                           pos2 = record.indexOf(",", pos1 +1);                                        // ppp hereafter; position of the second "," in the last record
                           pos3 = record.indexOf(",", pos2 +1);                                        // a hereafter; position of the third "," in the last record
                           pos4 = record.indexOf(",", pos3 +1);                                        // lat hereafter; position of the 4th "," in the last record
                           pos5 = record.indexOf(",", pos4 +1);                                        // lon hereafter; position n of the 5th "," in the last record
                           pos6 = record.indexOf(",", pos5 +1);                                        // course hereafter; position of the 6th "," in the last record
                           pos7 = record.indexOf(",", pos6 +1);                                        // speed hereafter                                
                           pos8 = record.indexOf(",", pos7 +1);                                        // elevation hereafter
                           pos9 = record.indexOf(",", pos8 +1);                                        // air temp
                           pos10 = record.indexOf(",", pos9 +1);                                       // RH
                           pos11 = record.indexOf(",", pos10 +1);                                      // wet bulb                                      
                           pos12 = record.indexOf(",", pos11 +1);                                      // dew point
                           pos13 = record.indexOf(",", pos12 +1);                                      // observation age  
                           pos14 = record.indexOf("*", pos13 +1);                                       // pos of the "*" 
                              
                           local_obs_age = record.substring(pos13 +1, pos14); 
                           
                           int int_local_obs_age = AGE_NOT_OK;                 // 999999 = random number but > 99.9
                           if ( (local_obs_age.compareTo("") != 0) && (local_obs_age != null) && (local_obs_age.indexOf("*") == -1) )
                           {
                              try
                              {
                                 int_local_obs_age = Integer.parseInt(local_obs_age.trim());
                              }
                              catch (NumberFormatException e)
                              {
                                 int_local_obs_age = AGE_NOT_OK; 
                                 System.out.println("--- " + "RS232_Mintaka_Star_And_StarX_Read_Sensor_Data_a_ppp_Data_Files_For_Obs() " + e);
                              }
                           } 
            
                           if ((int_local_obs_age >= 0) && (int_local_obs_age <= main_RS232_RS422.MAX_AGE_STARX_OBS_DATA))
                           {         
                              record_parameter = record.substring(0, pos1);
                           }
                           else
                           {
                              record_parameter = "";
                           }
                           
                        } // else if ((main.RS232_connection_mode == 7) etc.
                        
                        
                        // verify the retrieved value (to avoid spikes)
                        double hulp_double_pressure_reading;
                        try
                        {   
                           hulp_double_pressure_reading = Double.parseDouble(record_parameter.trim());
                        }
                        catch (NumberFormatException e)
                        {
                           hulp_double_pressure_reading = Double.MAX_VALUE;
                        }  
                        if ((hulp_double_pressure_reading < 900.0) || (hulp_double_pressure_reading > 1100.0))
                        {
                           record_parameter = "";
                        }
                                       
                        int int_minuten_5 = int_record_minuten / 5;

                        sensor_waarde_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
                        datum_tijd_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)
                        
                     } // if (doorgaan_in_record)
                  } // if ( (record.length() > 18) etc.
               } // while ((record = in.readLine()) != null)
               //in.close();

            } // try
            finally
            {
               in.close();
            }

         } // try
         //catch (IOException ex) {System.out.println("--- " + "IOException:" + ex); }
         catch (IOException ex) {  }

      } // if (sensor_data_file.exists() && sensor_data_file.length() > 0)
      
      // clear memory
      cal_file_datum_tijd = null;
      
   } // for (int i = aantal_intelezen_files; i >= 0; i--)
   //cal_file_datum_tijd = null;
}




/***********************************************************************************************/
/*                                                                                             */
/*                 Read_Sensor_Data_Files_For_Air_Temp_Graph_Mintaka_StarX()                   */
/*                                                                                             */
/***********************************************************************************************/
private void Read_Sensor_Data_Files_For_Air_Temp_Graph_Mintaka_StarX()
{
   // called from: sensor_data_uit_file_ophalen() [RS232_view.java]
   //              init_sensor_data_uit_file_ophalen() [RS232_view.java]
   //
   // NB this function reads sensor data from an Mintaka StarX barometer + thermometer + rh stored in files
   //
   // NB This function will be called from within a swingworker, see: init_sensor_data_uit_file_ophalen_timer() and sensor_data_uit_file_ophalen()
   //    so not necessary to use a swingworker here (it is adviced to use a swingworker when file reading/writing)
   //
   // NB plot every 5 minutes -> 12 points per hour -> 288 points per 24 hours (12 * 24) + 12 (extra hour)
   //
   //
   // STARX (NB first part of STARX is the same as the STAR)
   //       TurboWinH 
   //             <station pressure in mb>,
   //             <sea level pressure in mb>,
   //             <3 hour pressure tendency>,
   //             <WMO tendency characteristic code>,
   //             <lat>,
   //             <long>,
   //             <course>,
   //             <speed>,
   //             <elevation>,
   //             <temperature>,
   //             <relativeHumidity>,
   //             <wetBulbTemperature>,
   //             <dewPoint>,
   //             <observationAge>
   //             *<checksum>
   //
   //             <lat> = ddd mm.mmmm[N|S], <long> = ddd mm.mmmm[E|W], <course> is True,
   //             <speed> in knots, <elevation> in meters, <relativeHumidity> is 0-100,
   //             temperatures are in degrees celsius, <observatoinAge> is in seconds.
   //
   // 1009.73,1007.73,0.00,0, 52 41.9491N,  6 14.1802E,0,1,7,19.5,65,15.4,12.8,58*16

   
   int number_read_commas                                 = 0;
   int aantal_intelezen_files                             = 0;
   int int_record_minuten                                 = 0;
   int pos;
   //int pos2;
   String sensor_data_file_name                           = "";
   String volledig_path_sensor_data                       = "";
   //String record_parameter                                = "";
   String record_datum_tijd_met_minuten                   = "";
   String record_datum_tijd                               = "";
   String record_minuten                                  = "";
   boolean doorgaan_in_record                             = true;
   final int AGE_NOT_OK                                   = 999999;
   
   
   // initialisation
   for (int k = 0; k < AANTAL_PLOT_POINTS; k++)
   {
      sensor_waarde_array[k]   = "";
      datum_tijd_array[k]      = "";
   }
   
   // initialisation
   if ((mode_tijd_periode).equals(MODE_DAY))
   {
      aantal_intelezen_files = 24;          // 24 * 1 = 24
   }
   else if ((mode_tijd_periode).equals(MODE_WEEK))
   {
      aantal_intelezen_files = 168;         // 24 * 7 = 168
   }

   // message to console
   System.out.println("--- " +  sdf2.format(new Date()) + " UTC " + "reading Mintaka StarX air temp sensor data from file for graph");
   
   
   for (int i = aantal_intelezen_files; i >= 0; i--)
   {
      cal_file_datum_tijd = new GregorianCalendar();
      cal_file_datum_tijd.add(Calendar.HOUR_OF_DAY, -i);

      String sensor_data_file_naam_datum_tijd_deel = main.sdf3.format(cal_file_datum_tijd.getTime()); // -> eg 2013020308
      sensor_data_file_name = "sensor_data_" + sensor_data_file_naam_datum_tijd_deel + ".txt";

      // first check if there is a sensor data file present (and not empty)
      volledig_path_sensor_data = main.logs_dir + java.io.File.separator + sensor_data_file_name;
      // bv volledig_path_sensor_data = C:\Users\Martin\Documents\NetBeansProjects\RS232_AWS_1\data\sensor_data.aws

      //System.out.println("+++ " +  "i = : " + i);
      //System.out.println("+++ " +  "proberen te openen file: " + volledig_path_sensor_data);

      // keep track of the file name of the last (present hour) sensor data file
      //if (i == 0)
      //{
      //   // for later use if there are more than 20 wrong records in the file, so we can delete this file, otherwise after a restart the program complains again (see next lines)
      //   last_sensor_data_file = volledig_path_sensor_data;
      //}
      

      File sensor_data_file = new File(volledig_path_sensor_data);
      if (sensor_data_file.exists() && sensor_data_file.length() > 0)     // length() in bytes
      {
         try
         {
            BufferedReader in = new BufferedReader(new FileReader(volledig_path_sensor_data));

            try
            {
               String record                    = null;
               
               while ((record = in.readLine()) != null)                                 // null means that the end of the stream has been reached 
               {
                  //System.out.println("+++ ingelezen record: " + record);
               
                  // initialisation
                  doorgaan_in_record               = true;
                  
                  
                  //
                  number_read_commas = 0;
                  pos = -1;
                        
                  do
                  {
                     pos = record.indexOf(",", pos + 1);
                     if (pos != -1)     // "," found
                     {
                        number_read_commas++;
                        //System.out.println("+++ number_read_commas = " + number_read_commas);
                     }
                  } while (pos != -1);  //while (pos > 0); 
                        
                  
                  // Check the number of comma's in the record that must exactely match the fixed expected number (TOTAL_NUMBER_RECORD_COMMAS_MINTAKA_STARX)
                  if (main.RS232_connection_mode == 7 || main.RS232_connection_mode == 8)      // Mintaka StarX USB or Mintaka StarX WiFi
                  {   
                     if (number_read_commas != main.TOTAL_NUMBER_RECORD_COMMAS_MINTAKA_STARX)
                     {
                        doorgaan_in_record = false;
                     }          
                  }   
                  
                  
                  // cheksum check
                  if (doorgaan_in_record)
                  {
                     String record_checksum = record.substring(record.length() -14, record.length() -12);  // eg "24" from record "1022.20,1022.20,0.80,2, 52 41.9497N,  6 14.1848E,0,0,-1*24201703291211"
                     String computed_checksum = main_RS232_RS422.Mintaka_Star_Checksum(record);
   
                     if (!computed_checksum.equals(record_checksum))
                     {
                        doorgaan_in_record = false;
                     }
                  } // if (doorgaan_in_record)
                  
                  
                  if ( (doorgaan_in_record == true) && (record.length() > 15) )          // NB > 15 is a little bit arbitrary number (YYYYMMDDHHmm + 3 commas + at leat 2 char pressure value= 15 chars)
                  {
                     pos = record.length() -12;                                          // pos is now start position of YYYYMMDDHHmm
                     
                     if (pos > 0)     
                     {
                        record_datum_tijd_met_minuten = record.substring(pos, pos + 12);  // YYYYMMDDHHmm has length 12
                        record_datum_tijd             = record.substring(pos, pos + 10);  // YYYYMMDDHH has length 10
                     
                        //System.out.println("+++ record_datum_tijd_met_minuten = " + record_datum_tijd_met_minuten);
                        //System.out.println("+++ record_datum_tijd = " + record_datum_tijd);
                        //System.out.println("+++ sensor_data_file_naam_datum_tijd_deel = " + sensor_data_file_naam_datum_tijd_deel);
                        
                        if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        {
                           record_minuten = record.substring(pos + 10, pos + 12);         // mm from YYYYMMDDHHmm
                           
                           //System.out.println("+++ record_minuten = " + record_minuten);

                           // initialisation
                           int_record_minuten = 9999;

                           try
                           {
                              int_record_minuten = Integer.parseInt(record_minuten.trim());
                           }
                           catch (NumberFormatException e) 
                           {
                              //System.out.println("+++ " + "NumberFormatException:" + e);
                              doorgaan_in_record = false;
                           }

                           // only parameter value (eg pressure) every 5 minutes (00, 05, 10, 15 etc minutes) !
                           if (!(int_record_minuten >= 0 && int_record_minuten <= 59 && (int_record_minuten % 5 == 0)))
                           {
                              doorgaan_in_record = false;
                           }      
                           //else
                           //{
                           //   System.out.println("+++ " + "minuten ok (5-voud)");
                           //   System.out.println("+++ " + "doorgaan_in_record = " + doorgaan_in_record);
                           //}
                        } // if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        else
                        {
                           doorgaan_in_record = false;
                        }
                     } // if (pos > 0)
                     else
                     {
                        doorgaan_in_record = false;
                     }
                        
                     
                     // If the by TurboWin+ added date and time are OK and number of commas in the record is OK then continue
                     //
                     if (doorgaan_in_record == true)
                     {   
                        int pos1 = record.indexOf(",", 0);                                              // MSL hereafter; position of the first "," in the last record
                        int pos2 = record.indexOf(",", pos1 +1);                                        // ppp hereafter; position of the second "," in the last record
                        int pos3 = record.indexOf(",", pos2 +1);                                        // a hereafter; position of the third "," in the last record
                        int pos4 = record.indexOf(",", pos3 +1);                                        // lat hereafter 
                        int pos5 = record.indexOf(",", pos4 +1);                                        // lon hereafter
                        int pos6 = record.indexOf(",", pos5 +1);                                        // course hereafter                                    
                        int pos7 = record.indexOf(",", pos6 +1);                                        // speed hereafter                                
                        int pos8 = record.indexOf(",", pos7 +1);                                        // elevation hereafter
                        int pos9 = record.indexOf(",", pos8 +1);                                        // air temp
                        int pos10 = record.indexOf(",", pos9 +1);                                       // RH
                        int pos11 = record.indexOf(",", pos10 +1);                                      // wet bulb                                      
                        int pos12 = record.indexOf(",", pos11 +1);                                      // dew point
                        int pos13 = record.indexOf(",", pos12 +1);                                      // observation age  
                        int pos14 = record.indexOf("*", pos13 +1);                                      // pos of the "*" 

                        String air_temp = record.substring(pos9 +1, pos10);
                        String obs_age  = record.substring(pos13 +1, pos14); 
                        
                        int int_obs_age = AGE_NOT_OK;                 // 999999 = random number but > 99.9
                        if ( (obs_age.compareTo("") != 0) && (obs_age != null) && (obs_age.indexOf("*") == -1) )
                        {
                           try
                           {
                              int_obs_age = Integer.parseInt(obs_age.trim());
                           }
                           catch (NumberFormatException e)
                           {
                              int_obs_age = AGE_NOT_OK; 
                              System.out.println("--- " + "Read_Sensor_Data_Files_For_Air_Temp_Mintaka_StarX() " + e);
                           }
                        } 
                        
                        if ((int_obs_age >= 0) && (int_obs_age <= main_RS232_RS422.MAX_AGE_STARX_OBS_DATA))
                        {         
                           if ((air_temp.compareTo("") != 0) && (air_temp != null))
                           {
                              String record_parameter = "";
                              double double_air_temp = Double.MAX_VALUE;
                              try
                              {   
                                 double_air_temp = Double.parseDouble(air_temp.trim());
                              }
                              catch (NumberFormatException e)
                              {
                                 double_air_temp = Double.MAX_VALUE;
                              }  
                              
                              if ((double_air_temp < -50.0) || (double_air_temp > 60.0))
                              {
                                 record_parameter = "";
                              }
                              else
                              {
                                 record_parameter = air_temp;
                              }
                              
                              int int_minuten_5 = int_record_minuten / 5;

                              sensor_waarde_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
                              datum_tijd_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)
                              
                           } // if ((air_temp.compareTo("") != 0) && (air_temp != null))
                        
                        } // if ((int_obs_age >= 0) && (int_obs_age <= main_RS232_RS422.MAX_AGE_STARX_OBS_DATA))
                        
/*                        
                        number_read_commas = 0;
                        pos = 0;
                        pos2 = -1;

                        if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                        {    
                           pos2 = record.indexOf(",", pos);
                           if (pos2 - pos >= 2)            // between commas at least 1 char
                           {
                              record_parameter = record.substring(pos, pos2);
                              
                              // verify the retrieved value (to avoid spikes)
                              double hulp_double_pressure_reading;
                              try
                              {   
                                 hulp_double_pressure_reading = Double.parseDouble(record_parameter.trim());
                              }
                              catch (NumberFormatException e)
                              {
                                 hulp_double_pressure_reading = Double.MAX_VALUE;
                              }  
                              if ((hulp_double_pressure_reading < 900.0) || (hulp_double_pressure_reading > 1100.0))
                              {
                                 record_parameter = "";
                              }
                                       
                              //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                              int int_minuten_5 = int_record_minuten / 5;

                              sensor_waarde_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
                              datum_tijd_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)
                           } // if (pos2 - pos >= 2)
                        } // if (record.length() > pos + 1 + 12)
*/                     
                     } // if (doorgaan_in_record)
                  } // if ( (record.length() > 18) etc.
               } // while ((record = in.readLine()) != null)
               //in.close();

            } // try
            finally
            {
               in.close();
            }

         } // try
         //catch (IOException ex) {System.out.println("--- " + "IOException:" + ex); }
         catch (IOException ex) {  }

      } // if (sensor_data_file.exists() && sensor_data_file.length() > 0)
      
      // clear memory
      cal_file_datum_tijd = null;
      
   } // for (int i = aantal_intelezen_files; i >= 0; i--)
   //cal_file_datum_tijd = null;
}




   public
   RS232_view(String title) throws HeadlessException
   {
      super(title);
   }




/***********************************************************************************************/
/*                                                                                             */
/*                             Read_Sensor_Data_Files_For_Graphs_4                             */
/*                                                                                             */
/***********************************************************************************************/
private void Read_Sensor_Data_Files_For_Graphs_4()
{
	// NB 4 graphs on same page
   // NB this function reads sensor data from an AWS (not from an individual Vaisala barometer) stored in files
   //
   // NB This function will be called from within a swingworker, see: init_sensor_data_uit_file_ophalen_timer() and sensor_data_uit_file_ophalen()
   //    so not necessary to use a swingworker here (it is adviced to use a swingworker when file reading/writing)
   //
   // NB plot every 5 minutes -> 12 points per hour -> 288 points per 24 hours (12 * 24) + 12 (extra hour)

   
   //final int TOTAL_NUMBER_RECORD_COMMAS                   = 27;  // 26 via predefined format + 1 comma added by TurboWin+
   int number_read_commas                                 = 0;
   int number_parameter_commas_a                          = -1;    
   int number_parameter_commas_b                          = -1;    
	int number_parameter_commas_c                          = -1;    
   int number_parameter_commas_d                          = -1;    
	int aantal_intelezen_files                             = 0;
   int int_record_minuten                                 = 0;
   int pos                                                = 0;
   String sensor_data_file_name                           = "";
   String volledig_path_sensor_data                       = "";
   String record_parameter                                = "";
   String record_datum_tijd_met_minuten                   = "";
   String record_datum_tijd                               = "";
   String record_minuten                                  = "";
   boolean doorgaan_in_record                             = true;
   
   // initialisation
   number_parameter_commas_a = main.PRESSURE_MSL_COMMA_NUMBER;                // MSL pressure parameter data after comma 9 (start counting at 1)
   number_parameter_commas_b = main.TRUE_WIND_DIR_COMMA_NUMBER;               // true wind dir parameter data after comma 18 (start counting at 1)
	number_parameter_commas_c = main.AIR_TEMP_COMMA_NUMBER;                    // air temp parameter data after comma 12 (start counting at 1)
   number_parameter_commas_d = main.TRUE_WIND_SPEED_COMMA_NUMBER;             // true wind speed parameter data after comma 17 (start counting at 1)

   // initialisation
   for (int k = 0; k < AANTAL_PLOT_POINTS; k++)
   {
      sensor_waarde_array[k]   = "";                        // air pressure
      sensor_waarde_array_2[k] = "";                        // wind dir
		sensor_waarde_array_c[k] = "";                        // air temp
		sensor_waarde_array_d[k] = "";                        // wind speed
		
		datum_tijd_array[k]      = "";                        // air pressure
		datum_tijd_array_b[k]    = "";                        // wind dir
		datum_tijd_array_c[k]    = "";                        // air temp
		datum_tijd_array_d[k]    = "";                        // wind speed
   }
   
   // initialisation
   if ((mode_tijd_periode).equals(MODE_DAY))
   {
      aantal_intelezen_files = 24;          // 24 * 1 = 24
   }
   else if ((mode_tijd_periode).equals(MODE_WEEK))
   {
      aantal_intelezen_files = 168;         // 24 * 7 = 168
   }

   // message to console
   System.out.println("--- " +  sdf2.format(new Date()) + " UTC " + "reading AWS sensor data from file for graph");
   
   
   //cal_file_datum_tijd = new GregorianCalendar();
   for (int i = aantal_intelezen_files; i >= 0; i--)
   {
      cal_file_datum_tijd = new GregorianCalendar();
      cal_file_datum_tijd.add(Calendar.HOUR_OF_DAY, -i);

      String sensor_data_file_naam_datum_tijd_deel = main.sdf3.format(cal_file_datum_tijd.getTime()); // -> eg 2013020308
      sensor_data_file_name = "sensor_data_" + sensor_data_file_naam_datum_tijd_deel + ".txt";

      // first check if there is a sensor data file present (and not empty)
      volledig_path_sensor_data = main.logs_dir + java.io.File.separator + sensor_data_file_name;
      // bv volledig_path_sensor_data = C:\Users\Martin\Documents\NetBeansProjects\RS232_AWS_1\data\sensor_data.aws

      //System.out.println("+++ " +  "i = : " + i);
      //System.out.println("+++ " +  "proberen te openen file: " + volledig_path_sensor_data);

      // keep track of the file name of the last (present hour) sensor data file
      //if (i == 0)
      //{
      //   // for later use if there are more than 20 wrong records in the file, so we can delete this file, otherwise after a restart the program complains again (see next lines)
      //   last_sensor_data_file = volledig_path_sensor_data;
      //}
      

      File sensor_data_file = new File(volledig_path_sensor_data);
      if (sensor_data_file.exists() && sensor_data_file.length() > 0)     // length() in bytes
      {
         try
         {
            BufferedReader in = new BufferedReader(new FileReader(volledig_path_sensor_data));

            try
            {
               String record                    = null;
               
               while ((record = in.readLine()) != null)                                 // null means that the end of the stream has been reached 
               {
                  //System.out.println("+++ ingelezen record: " + record);
               
                  // initialisation
                  doorgaan_in_record               = true;
                  
                  // Check the number of comma's in the record that must exactely match the fixed expected number (TOTAL_NUMBER_RECORD_COMMAS)
                  //
                  number_read_commas = 0;
                  pos = -1;
                        
                  do
                  {
                     pos = record.indexOf(",", pos + 1);
                     if (pos > 0)     // "," found
                     {
                        number_read_commas++;
                     }
                  } while (pos > 0); 
                        
                  if (number_read_commas != main.TOTAL_NUMBER_RECORD_COMMAS)
                  {
                     doorgaan_in_record = false;
                  }                
                  
                  //if ( (record.length() > 18) && (record.substring(0, 6).equals("$PEUMB")) )   // NB > 18 is a little bit arbitrary number (YYYYMMDDHHmm + $PEUMB = 18 chars)
                  if ( (doorgaan_in_record == true) && (record.length() > 18) && (record.substring(0, 6).equals("$PEUMB")) )   // NB > 18 is a little bit arbitrary number (YYYYMMDDHHmm + $PEUMB = 18 chars)
                  {
                     pos = record.lastIndexOf(",");                                       // searching for LAST appearance of ","
                     //if (pos > 0)     // so "," found
                     if ((pos > 0) && (pos + 1 + 12 == record.length()))     // so "," found and YYYYMMDDHHmm follows
                     {
                        record_datum_tijd_met_minuten = record.substring(pos + 1, pos + 1 + 12);  // YYYYMMDDHHmm has length 12
                        record_datum_tijd             = record.substring(pos + 1, pos + 1 + 10);  // YYYYMMDDHH has length 10
                     
                        //System.out.println("+++ record_datum_tijd_met_minuten = " + record_datum_tijd_met_minuten);
                        //System.out.println("+++ record_datum_tijd = " + record_datum_tijd);
                        //System.out.println("+++ sensor_data_file_naam_datum_tijd_deel = " + sensor_data_file_naam_datum_tijd_deel);
                        
                        if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        {
                           record_minuten = record.substring(pos + 1 + 10, pos + 1 + 12);         // mm from YYYYMMDDHHmm
                           
                           //System.out.println("+++ record_minuten = " + record_minuten);

                           // initialisation
                           int_record_minuten = 9999;

                           try
                           {
                              int_record_minuten = Integer.parseInt(record_minuten.trim());
                           }
                           catch (NumberFormatException e) 
                           {
                              //System.out.println("+++ " + "NumberFormatException:" + e);
                              doorgaan_in_record = false;
                           }

                           // only parameter value (eg pressure) every 5 minutes (00, 05, 10, 15 etc minutes) !
                           if (!(int_record_minuten >= 0 && int_record_minuten <= 59 && (int_record_minuten % 5 == 0)))
                           {
                              doorgaan_in_record = false;
                           }      
                           //else
                           //{
                           //   System.out.println("+++ " + "minuten ok (5-voud)");
                           //   System.out.println("+++ " + "doorgaan_in_record = " + doorgaan_in_record);
                           //}
                        } // if (record_datum_tijd.equals(sensor_data_file_naam_datum_tijd_deel))
                        else
                        {
                           doorgaan_in_record = false;
                        }
                     } // if (pos > 0) -> so "," NOT found
                     else
                     {
                        doorgaan_in_record = false;
                     }
                        
                     
                     // If the by TurboWin+ added date and time are OK and number of commas in the record is OK then continue
                     //
                     if (doorgaan_in_record == true)
                     {   
                        // initialisation
                        number_read_commas = 0;
                        pos = -1;
                           
                        do
                        {
                           pos = record.indexOf(",", pos + 1);    // searching "," from position "pos + 1"
                           if (pos > 0)     // "," found
                           {
                              number_read_commas++;
                              
										///// air pressure /////
                              if (number_read_commas == number_parameter_commas_a) // eg air temp value always after the 12th comma
                              {
                                 if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                                 {
                                    int pos2 = record.indexOf(",", pos + 1);
                                    if (pos2 - pos >= 2)            // between conmmas at least 1 char
                                    {
                                       record_parameter = record.substring(pos + 1, pos2);
                                       
                                       //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                                       int int_minuten_5 = int_record_minuten / 5;

                                       sensor_waarde_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
                                       datum_tijd_array[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)
                                    } // if (pos2 - pos >= 2)
                                 } // if (record.length() > number_read_commas + 12)
                              } // if (number_read_commas == number_parameter_commas_a)
                              
                              /////// wind dir /////
                              if (number_read_commas == number_parameter_commas_b)
                              {
                                 if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                                 {
                                    int pos2 = record.indexOf(",", pos + 1);
                                    if (pos2 - pos >= 2)            // between commas at least 1 char
                                    {
                                       record_parameter = record.substring(pos + 1, pos2);
                                       
                                       int int_minuten_5 = int_record_minuten / 5;

                                       //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                                       sensor_waarde_array_2[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
													datum_tijd_array_b[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)

                                    } // if (pos2 - pos >= 2)
                                 } // if (record.length() > number_read_commas + 12)
                              } // if (number_read_commas == number_parameter_commas_b)
                              
                              /////// air temp /////
                              if (number_read_commas == number_parameter_commas_c)
                              {
                                 if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                                 {
                                    int pos2 = record.indexOf(",", pos + 1);
                                    if (pos2 - pos >= 2)            // between commas at least 1 char
                                    {
                                       record_parameter = record.substring(pos + 1, pos2);
                                       
                                       int int_minuten_5 = int_record_minuten / 5;

                                       //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                                       sensor_waarde_array_c[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
	                                    datum_tijd_array_c[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)
												
                                    } // if (pos2 - pos >= 2)
                                 } // if (record.length() > number_read_commas + 12)
                              } // if (number_read_commas == number_parameter_commas_c)
										
                              /////// wind speed /////
                              if (number_read_commas == number_parameter_commas_d)
                              {
                                 if (record.length() > pos + 1 + 12)    // for safety; 12 = YYYYMMDDHHmm (always at the end of every record)
                                 {
                                    int pos2 = record.indexOf(",", pos + 1);
                                    if (pos2 - pos >= 2)            // between commas at least 1 char
                                    {
                                       record_parameter = record.substring(pos + 1, pos2);
                                       
                                       int int_minuten_5 = int_record_minuten / 5;

                                       //System.out.println("+++ record_parameter = " + record_parameter);
                                       
                                       sensor_waarde_array_d[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_parameter;           // so every 5 minutes storage (=array position)
													datum_tijd_array_d[(aantal_intelezen_files - i) * 12 + int_minuten_5] = record_datum_tijd_met_minuten; // so every 5 minutes storage (=array position)

                                    } // if (pos2 - pos >= 2)
                                 } // if (record.length() > number_read_commas + 12)
                              } // if (number_read_commas == number_parameter_commas_d)
										
                           } // if (pos > 0)
                        } while (pos > 0); 
                     } // if (doorgaan_in_record)
                  } // if ( (record.length() > 18) etc.
               } // while ((record = in.readLine()) != null)
               //in.close();
            } // try
            finally
            {
               in.close();
            }
         } // try
         //catch (IOException ex) {System.out.println("--- " + "IOException:" + ex); }
         catch (IOException ex) {  }

      } // if (sensor_data_file.exists() && sensor_data_file.length() > 0)
      
      // clear memory
      cal_file_datum_tijd = null;
      
   } // for (int i = aantal_intelezen_files; i >= 0; i--)
   //cal_file_datum_tijd = null;
}


	public RS232_view(GraphicsConfiguration gc) {
		super(gc);
	}


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents1()
   {
      
      /* background color main panel (set by main menu theme option) */
      if (main.theme_mode.equals(main.THEME_NIMBUS_NIGHT))
      {
         night_vision = true;
         
         background_color_panel1 = jPanel1.getBackground();
         //background_color_panel2 = jPanel2.getBackground();
         //background_color_panel3 = jPanel3.getBackground();
         //background_color_panel4 = jPanel4.getBackground();
         //background_color_panel5 = jPanel5.getBackground();
         background_color_panel2 = Color.LIGHT_GRAY;
         background_color_panel3 = Color.LIGHT_GRAY;
         background_color_panel4 = Color.LIGHT_GRAY;
         background_color_panel5 = Color.LIGHT_GRAY;
         
         //background_color_radiobutton1 = jRadioButton1.getBackground();
         //background_color_radiobutton2 = jRadioButton2.getBackground();
         background_color_radiobutton1 = Color.LIGHT_GRAY;
         background_color_radiobutton2 = Color.LIGHT_GRAY;        
            
         jPanel1.setBackground(Color.DARK_GRAY);
         jPanel2.setBackground(Color.BLACK);
         jPanel3.setBackground(Color.BLACK);
         jPanel4.setBackground(Color.BLACK);
         jPanel5.setBackground(Color.BLACK); 
         
         jRadioButton1.setBackground(Color.BLACK);
         jRadioButton2.setBackground(Color.BLACK);

             
         //jRadioButton1.setForeground(Color.DARK_GRAY);
         //jRadioButton2.setForeground(Color.DARK_GRAY);
           
      }
      else
      {
         night_vision = false;
/*         
         Color broken_white = new Color(255, 250, 240);
         jPanel1.setBackground(broken_white);
         jPanel2.setBackground(Color.LIGHT_GRAY);
         jPanel3.setBackground(Color.LIGHT_GRAY);
         jPanel4.setBackground(Color.LIGHT_GRAY);
         jPanel5.setBackground(Color.LIGHT_GRAY);     
         */
         
         background_color_panel1 = jPanel1.getBackground();
         background_color_panel2 = jPanel2.getBackground();
         background_color_panel3 = jPanel3.getBackground();
         background_color_panel4 = jPanel4.getBackground();
         background_color_panel5 = jPanel5.getBackground();
         
         background_color_radiobutton1 = jRadioButton1.getBackground();
         background_color_radiobutton2 = jRadioButton2.getBackground();
         
      } 
      
      
      
      /* background color main panel (set by popup menu option) */
      popup = new JPopupMenu();
      
      JMenuItem menuItem = new JMenuItem("night colours");
      menuItem.addActionListener(new java.awt.event.ActionListener() 
      {
         @Override
         public void actionPerformed(ActionEvent e) 
         {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            //System.out.println("item1");
            night_vision = true;
       
            jPanel1.setBackground(Color.DARK_GRAY); 
            jPanel2.setBackground(Color.BLACK);
            jPanel3.setBackground(Color.BLACK);
            jPanel4.setBackground(Color.BLACK);
            jPanel5.setBackground(Color.BLACK); 
            
            jRadioButton1.setBackground(Color.BLACK);
            jRadioButton2.setBackground(Color.BLACK);
           
            
      //      jRadioButton1.setBackground(Color.RED);
      //      jRadioButton2.setBackground(Color.RED);

             
            //jRadioButton1.setForeground(Color.DARK_GRAY);
            //jRadioButton2.setForeground(Color.DARK_GRAY);
           
            // NB see also paintComponent() [RS232_grafiek.java] for raster color
         }
      });
      popup.add(menuItem);
      
      JMenuItem menuItem2 = new JMenuItem("day colours");
      menuItem2.addActionListener(new java.awt.event.ActionListener() 
      {
         @Override
         public void actionPerformed(ActionEvent e) 
         {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            //System.out.println("item2");
            night_vision = false;
            
            //Color broken_white = new Color(255, 250, 240);
            //jPanel1.setBackground(broken_white);   
            //jPanel2.setBackground(Color.LIGHT_GRAY);
            //jPanel3.setBackground(Color.LIGHT_GRAY);
            //jPanel4.setBackground(Color.LIGHT_GRAY);
            //jPanel5.setBackground(Color.LIGHT_GRAY);  
            
            jPanel1.setBackground(background_color_panel1); 
            jPanel2.setBackground(background_color_panel2);
            jPanel3.setBackground(background_color_panel3);
            jPanel4.setBackground(background_color_panel4);
            jPanel5.setBackground(background_color_panel5); 
            
            jRadioButton1.setBackground(background_color_radiobutton1);
            jRadioButton2.setBackground(background_color_radiobutton1);
         }
      });
      popup.add(menuItem2);   
      
      popup.addSeparator();
      
      // save trace as image file
      JMenuItem menuItem3 = new JMenuItem("save trace as image");
      menuItem3.addActionListener(new java.awt.event.ActionListener()   
      {
         @Override
         public void actionPerformed(ActionEvent e) 
         {
            bi = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D cg = bi.createGraphics();
            jPanel1.paintAll(cg);
            
            // file chooser dialog
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("png images", "png");
            chooser.setFileFilter(filter);
             
            chooser.setDialogTitle("Save trace");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);                        // now the user can only select files (directories and files are still visible)
            int result = chooser.showSaveDialog(RS232_view.this);
            
            if (result == JFileChooser.APPROVE_OPTION)
            {
               saved_trace_image = chooser.getSelectedFile().getPath();   
               
               // if the inserted name doen't end with png we will add this extension
               if (saved_trace_image.length() >= 4)
               {
                  if ( (saved_trace_image.substring(saved_trace_image.length() - 4).equals(".png") == false) && (saved_trace_image.substring(saved_trace_image.length() - 4).equals(".PNG") == false) )
                  {
                     saved_trace_image += ".png";
                  }
               }   
               else // length 3 or less char so can never ends with ".png"
               {
                  saved_trace_image += ".png";
               }
                  
                  
               if (chooser.getSelectedFile().exists())
               {
                  int response = JOptionPane.showConfirmDialog (null, "Overwrite existing file?", main.APPLICATION_NAME + " confirm overwrite", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                  doorgaan_trace_save = response != JOptionPane.CANCEL_OPTION;
               }
            
               if (doorgaan_trace_save == true)
               {
                  new SwingWorker<Void, Void>()
                  {
                     @Override
                     protected Void doInBackground() throws Exception
                     {
                        try
                        {
                           ImageIO.write(bi, "png", new File(saved_trace_image));
                        } // try
                        catch  (HeadlessException | IOException e)
                        {
                           JOptionPane.showMessageDialog(null, "unable to write to: " + saved_trace_image, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                        } // catch

                        return null;

                     } // protected Void doInBackground() throws Exception
                  }.execute(); // new SwingWorker<Void, Void>()
               } // if (doorgaan == true)
            } // if (result == JFileChooser.APPROVE_OPTION            
            
         } // public void actionPerformed(ActionEvent e)
      });
      popup.add(menuItem3);   
      
      MouseListener popupListener = new PopupListener();
      addMouseListener(popupListener);
      
      
      /* title of this sensor data screen */
      if (main.mode_grafiek.equals(main.MODE_PRESSURE))
      {
         if (main.RS232_connection_mode == 3 || main.RS232_connection_mode == 9 || main.RS232_connection_mode == 10)  // AWS connected
         {   
            //setTitle(main.APPLICATION_NAME + " sensor data graph pressure (1 minute average)");
            setTitle(main.APPLICATION_NAME + " sensor data graph pressure");
            jLabel3.setText("--- pressure = 1 min average ---");
         }
         else // e.g. PTB220, PTB330, MintakaDuo, Mintaka Star
         {
            //setTitle(main.APPLICATION_NAME + " sensor data graph pressure");
            setTitle(main.APPLICATION_NAME + " sensor data graph pressure");
            jLabel3.setText("");
         }
      }
      else if (main.mode_grafiek.equals(main.MODE_AIRTEMP))
      {
         //setTitle(main.APPLICATION_NAME + " sensor data graph air temp (1 minute average)");
         setTitle(main.APPLICATION_NAME + " sensor data graph air temp");
         jLabel3.setText("--- air temp = 1 min average ---");
      }
      else if (main.mode_grafiek.equals(main.MODE_SST))
      {
         //setTitle(main.APPLICATION_NAME + " sensor data graph SST (1 minute average)");
         setTitle(main.APPLICATION_NAME + " sensor data graph SST");
         jLabel3.setText("--- SST = 1 min average ---");
      }
      else if (main.mode_grafiek.equals(main.MODE_WIND_SPEED))
      {
         //setTitle(main.APPLICATION_NAME + " sensor data graph true wind speed (10 minutes average) and wind gust (in last 10 minutes)");
         setTitle(main.APPLICATION_NAME + " sensor data graph true wind speed and true wind gust");
         jLabel3.setText("--- True wind speed = 10 min average. True wind gust = max wind in last 10 min ---");
      }
      else if (main.mode_grafiek.equals(main.MODE_WIND_DIR))
      {
         //setTitle(main.APPLICATION_NAME + " sensor data graph true wind dir (10 minutes average)");
         setTitle(main.APPLICATION_NAME + " sensor data graph true wind dir");
         jLabel3.setText("--- true wind dir = 10 min average ---");
      }
      else if (main.mode_grafiek.equals(main.MODE_ALL_PARAMETERS))
      {
         //setTitle(main.APPLICATION_NAME + " sensor data graphs pressure (1 minute average), air temp (1 minute average) and wind (10 minutes average)");
         setTitle(main.APPLICATION_NAME + " sensor data graphs pressure, air temp and true wind");
         jLabel3.setText("--- Pressure = 1 min average. Air temp = 1 min average. Wind = 10 min average ---");
      }     
     
      /* user directory */
      // user_dir = System.getProperty("user.dir");

      // for data/time (output/java console) massages
      sdf2 = new SimpleDateFormat("yyyy-MM-dd HH.mm");                            // HH hour in day (0-23) note there is also hh (with am, pm)
      sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));

      // for sensor data files (in the file name itself)
      //sdf3 = new SimpleDateFormat("yyyyMMddHH");                                  // HH hour in day (0-23) note there is also hh hh (with am, pm)
      //sdf3.setTimeZone(TimeZone.getTimeZone("UTC"));

      // for date-time in records (extracting PPPP, ppp and a from sensordata records for obs)
      //sdf4 = new SimpleDateFormat("yyyyMMddHHmm");                               // HH hour in day (0-23) note there is also hh hh (with am, pm)
      //sdf4.setTimeZone(TimeZone.getTimeZone("UTC"));

      // for hour notations x-axis graph
      sdf5 = new SimpleDateFormat("HH");                                          // HH hour in day (0-23) note there is also hh (with am, pm)
      sdf5.setTimeZone(TimeZone.getTimeZone("UTC"));

      // for date notations x-axis graph
      sdf6 = new SimpleDateFormat("dd-MM-yyyy");
      sdf6.setTimeZone(TimeZone.getTimeZone("UTC"));

      // voor date notations x-axis graph
      sdf7 = new SimpleDateFormat("EEEE");
      sdf7.setTimeZone(TimeZone.getTimeZone("UTC"));


      // onderstaande nodig/noodzakelijk ???
      //mode_grafiek = MODE_PRESSURE;
      //mode_tijd_periode = MODE_DAY;

      // progress bar rechts onder in status balk
      //progressBar.setVisible(true);

      // start (week notation + also set the appropriate radiobutton)
      main.sensor_data_file_ophalen_timer_is_gecreeerd = false;
      
		if (main.mode_grafiek.equals(main.MODE_ALL_PARAMETERS))  //  4 graphs view
		{
	      day_button_actionPerformed(null);                  // hier gaat de sensor data ophalen timer ook lopen
         jRadioButton1.setSelected(true);
			jRadioButton2.setSelected(false);
		}
		else
		{	
		   week_button_actionPerformed(null);                  // hier gaat de sensor data ophalen timer ook lopen
			jRadioButton1.setSelected(false);
         jRadioButton2.setSelected(true);
		}
		
      // delete oudere sensor data files
      //Delete_Sensor_Data_Files();
 /*     
      // background color main panel
      if (main.theme_mode.equals(main.THEME_NIGHT))
      {
         jPanel1.setBackground(Color.GRAY);
      }
      else if (main.theme_mode.equals(main.THEME_HIGH_CONTRAST))
      {
         jPanel1.setBackground(Color.WHITE);
      }
      else
      {
         Color broken_white = new Color(255, 250, 240);
         jPanel1.setBackground(broken_white);
      } 
*/
   }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
/*       
        // Set the Nimbus look and feel 
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        // If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        // For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        //
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RS232_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
*/
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RS232_view().setVisible(true);
            }
        });
    }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   /*
   private javax.swing.JPanel jPanel1;
   */private RS232_grafiek jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton2;
   // End of variables declaration//GEN-END:variables


   // martin constanten
   private final int DELAY_SENSOR_DATA_FILE_OPHALEN_LOOP             = 300000; // 5 min                          // time in millisec to wait after timer is started to fire first event (10 min = 10 * 1000 * 60 * 10 = 600000)
   private final int INITIAL_DELAY_SENSOR_DATA_FILE_OPHALEN_LOOP     = 500;//1000; // 1000 = 1 sec                // time in millisec to wait after timer is started to fire first event
   private final int MAX_WRONG_RECORDS                               = 20;        // 60 records in a file sampling every 1 minute sampling
   private final int MAX_WRONG_PRESSURE_IN_RECORDS                   = 4;         // 60 records in a file but only every 5 minutes sampling
   
   public static final String MODE_DAY                               = "mode_day";
   public static final String MODE_WEEK                              = "mode_week";
   public static final int AANTAL_PLOT_POINTS                        = 2088;  // om de 5 minuten 7 * 24 uur lang 7 * 12 * 24 + (6 * 12) = 2088 bv van 14.00 7 dagen geleden t/m 14.59 deze dag!!) 
    
    
   // martin var's
   private BufferedImage bi;
   JPopupMenu popup;
   private String saved_trace_image;
   private String last_sensor_data_file                              = "";
   public static /*private*/ Timer sensor_data_file_ophalen_timer;
   private JDialog optionPaneDialog;
   private boolean dialog_sensor_data_error_present                  = false;
   private boolean doorgaan_trace_save                               = true;
   public static String mode_tijd_periode;                           // day or week
   public static SimpleDateFormat sdf2;
   //public static SimpleDateFormat sdf3;
   //public static SimpleDateFormat sdf4;
   public static SimpleDateFormat sdf5;
   public static SimpleDateFormat sdf6;
   public static SimpleDateFormat sdf7;
   public static Point2D[] points                                    = new Point2D[AANTAL_PLOT_POINTS];
   public static String[] sensor_waarde_array                        = new String[AANTAL_PLOT_POINTS];
   public static String[] sensor_waarde_array_2                      = new String[AANTAL_PLOT_POINTS];
   public static String[] datum_tijd_array                           = new String[AANTAL_PLOT_POINTS]; 
   public static String[] datum_tijd_array_b	                        = new String[AANTAL_PLOT_POINTS];
   public static String[] datum_tijd_array_c	                        = new String[AANTAL_PLOT_POINTS];
   public static String[] datum_tijd_array_d	                        = new String[AANTAL_PLOT_POINTS];
   //public static String[] sensor_waarde_array_a                      = new String[AANTAL_PLOT_POINTS];
	//public static String[] sensor_waarde_array_b                      = new String[AANTAL_PLOT_POINTS];
	public static String[] sensor_waarde_array_c                      = new String[AANTAL_PLOT_POINTS];
	public static String[] sensor_waarde_array_d                      = new String[AANTAL_PLOT_POINTS];
   public GregorianCalendar cal_file_datum_tijd;
   public static boolean night_vision;
   static Color background_color_panel1;
   static Color background_color_panel2;
   static Color background_color_panel3;
   static Color background_color_panel4;
   static Color background_color_panel5;
   static Color background_color_radiobutton1;
   static Color background_color_radiobutton2; 
}
