/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package turbowin;

import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author marti
 */
public class barometer_comparison extends javax.swing.JFrame {

   /**
    * Creates new form barometer_comparison
    */
   public barometer_comparison() {
      initComponents();
      initBarometerComparisonComponents();
      setLocation(main.x_pos_main_frame, main.y_pos_main_frame);
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
    * Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jSeparator1 = new javax.swing.JSeparator();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jTextField2 = new javax.swing.JTextField();
      jTextField3 = new javax.swing.JTextField();
      jPanel2 = new javax.swing.JPanel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jLabel10 = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      jTextField4 = new javax.swing.JTextField();
      jTextField5 = new javax.swing.JTextField();
      jTextField6 = new javax.swing.JTextField();
      jTextField7 = new javax.swing.JTextField();
      jTextField8 = new javax.swing.JTextField();
      jTextField9 = new javax.swing.JTextField();
      jPanel3 = new javax.swing.JPanel();
      jLabel13 = new javax.swing.JLabel();
      jLabel14 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jTextField10 = new javax.swing.JTextField();
      jTextField11 = new javax.swing.JTextField();
      jTextField12 = new javax.swing.JTextField();
      jTextField13 = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jButton3 = new javax.swing.JButton();
      jLabel11 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Barometer comparison");
      setMinimumSize(new java.awt.Dimension(1000, 700));
      setResizable(false);

      jButton1.setText("Calc");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Compute_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel4.setText("height of the ship barometer above Summer Load Line (metres)**");

      jLabel5.setText("distance of bottom of the keel to Summer Load Line (metres)**");

      jLabel17.setText("ship name*");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
               .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
               .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
               .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
            .addGap(44, 44, 44))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel6.setText("ship barometer reading, indicating air pressure at bridge height (hPa)");

      jLabel7.setText("reference barometer reading, indicating air pressure at sea level (hPa)");

      jLabel8.setText("actual ship draft (metres e.g. 12.8)");

      jLabel9.setText("date and time (UTC)*");

      jLabel10.setText("position or port*");

      jLabel12.setText("outdoor air temperature (°C e.g. 32.5)");

      jTextField9.setNextFocusableComponent(jButton1);

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
               .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(50, 50, 50)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(44, 44, 44))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(9, 9, 9)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(6, 6, 6)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel13.setText("actual height of the ship barometer above the waterline (metres)");

      jLabel14.setText("ship barometer air pressure converted to seal level (hPa)");

      jLabel15.setText("instrument error ship barometer (hPa)");

      jLabel16.setText("instrument correction (ic) ship barometer (hPa)");

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(70, 70, 70))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                  .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGap(36, 36, 36)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(44, 44, 44))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel1.setText("ship data");

      jLabel2.setText("actual situation at time of readings");

      jLabel3.setText("calculated results");

      jButton3.setText("Export");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Export_button_actionPerformed(evt);
         }
      });

      jLabel11.setText("* optional             ** Maintenance -> Station data                      --- this form is not suitable for the Great Lakes ---");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jSeparator1)
            .addContainerGap())
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(0, 0, Short.MAX_VALUE)
                  .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addGap(146, 146, 146)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(324, 324, 324))
                     .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addGroup(layout.createSequentialGroup()
                  .addGap(146, 146, 146)
                  .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGap(282, 282, 282))
               .addGroup(layout.createSequentialGroup()
                  .addGap(146, 146, 146)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(277, 277, 277))
                     .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap(139, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(3, 3, 3)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel11)
            .addGap(4, 4, 4)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Compute_button_actionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Compute_button_actionPerformed
   {//GEN-HEADEREND:event_Compute_button_actionPerformed
      // TODO add your handling code here:
      
      boolean doorgaan = true;
      String info = "";
      
      
      // ship data
      local_ship_name                    = jTextField1.getText().trim(); 
      local_barometer_above_sll          = jTextField2.getText().trim();
      local_keel_sll                     = jTextField3.getText().trim();

      // actual data
      local_date_time                    = jTextField4.getText().trim(); 
      local_position                     = jTextField5.getText().trim(); 
      local_ship_barometer_reading       = jTextField6.getText().trim(); 
      local_reference_barometer_reading  = jTextField7.getText().trim(); 
      local_draft                        = jTextField8.getText().trim(); 
      local_air_temp                     = jTextField9.getText().trim(); 
              
              
      ////////////////////// checks //////////////////
      
      // pressure indication (sensor level or sea level)
      if (main.pressure_reading_msl_yes_no.equals(main.PRESSURE_READING_MSL_YES) == true) 
      {
         // NB "main.pressure_reading_msl_yes_no" has an "yes" or "no" value this was checked before 
          
         info = "this form is for ship barometers indicating air pressure at bridge(sensor) level not for ship barometers indicating air pressure at sea level";
         doorgaan = false;
      } 
      
      
      // ship barometer above SLL
      //
      if (doorgaan)
      {
         if ((local_barometer_above_sll.equals("")) || (local_barometer_above_sll.length() == 0))
         {
            info = "barometer height above SLL not available (Maintenance -> Station data)";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }        
         else
         {
            // convert to double
            try 
            {
               double_local_barometer_above_sll = Double.parseDouble(local_barometer_above_sll);
            } 
            catch (NumberFormatException e) 
            {  
               info = "barometer height above SLL incorrect value (Maintenance -> Station data)";
               JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               doorgaan = false;
            }
         } // else
      }
   
      
      // distance keel - SLL
      //
      if (doorgaan)
      {
         if ((local_keel_sll.equals("")) || (local_keel_sll.length() == 0) )
         {
            info = "distance keel - SLL not available (Maintenance -> Station data)";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
         else
         {
            // convert to double
            try 
            {
               double_local_keel_sll = Double.parseDouble(local_keel_sll);
            } 
            catch (NumberFormatException e) 
            {  
               info = "distance keel-SLL incorrect value (Maintenance -> Station data)";
               JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               doorgaan = false;
            }   
         } // else
      }
      
      
      // ship barometer reading
      //
      if (doorgaan)
      {
         if ((local_ship_barometer_reading.equals("")) || (local_ship_barometer_reading.length() == 0) )
         {
            info = "ship barometer reading not inserted";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
         else
         {
            // convert to double
            try 
            {
               double_local_ship_barometer_reading = Double.parseDouble(local_ship_barometer_reading);
            
               if ((double_local_ship_barometer_reading < 800.0) || (double_local_ship_barometer_reading > 1200.0))
               {
                  info = "ship barometer reading out of physical range";
                  JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  doorgaan = false;
               }
            } 
            catch (NumberFormatException e) 
            {  
               info = "ship barometer reading incorrect value";
               JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               doorgaan = false;
            }   
         } // else
      }
      
      
      // reference barometer reading
      //
      if (doorgaan)
      {
         if ((local_reference_barometer_reading.equals("")) || (local_reference_barometer_reading.length() == 0) )
         {
            info = "reference barometer reading not inserted"; 
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
         else
         {
            // convert to double
            try 
            {
               double_local_reference_barometer_reading = Double.parseDouble(local_reference_barometer_reading);
            
               if ((double_local_reference_barometer_reading < 800.0) || (double_local_reference_barometer_reading > 1200.0))
               {
                  info = "reference barometer reading out of physical range";
                  JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  doorgaan = false;
               }
            } 
            catch (NumberFormatException e) 
            {  
               info = "reference barometer reading incorrect value";
               JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               doorgaan = false;
            }   
         } // else   
      }
      
      
      // actual ship draft
      //
      if (doorgaan)
      {
         if ((local_draft.equals("")) || (local_draft.length() == 0) )
         {
            info = "actual ship draft not inserted";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
         else
         {
            // convert to double
            try 
            {
               double_local_draft = Double.parseDouble(local_draft);
            
               if ((double_local_draft < 0.0) || (double_local_draft > 50.0))
               {
                  info = "actual draft out of range";
                  JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  doorgaan = false;
               }
            } 
            catch (NumberFormatException e) 
            {  
               info = "actual ship draft incorrect value";
               JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               doorgaan = false;
            }   
         } // else
      }
      
      
      // air temp outside
      //
      if (doorgaan)
      {
         if ((local_air_temp.equals("")) || (local_air_temp.length() == 0) )
         {
            info = "outdoor air temperature not inserted";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            doorgaan = false;
         }
         else
         {
            // convert to double
            try 
            {
                double_local_air_temp = Double.parseDouble(local_air_temp);
            
               if ((double_local_air_temp < -100.0) || (double_local_air_temp > 100.0))
               {
                  info = "outdoor air temperature out of physical range";
                  JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  doorgaan = false;
               }
            } 
            catch (NumberFormatException e) 
            {  
               info = "outdoor air temperature incorrect value";
               JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               doorgaan = false;
            }   
         } // else   
      }
      
      
      ////////////////////////// computations /////////////////
      if (doorgaan)
      {
         if (Compute_Barometer_Comparison_Results() == true)
         {
            // insert computed height ship barometer above waterline
            local_ship_barometer_above_wl = Double.toString(round(double_local_ship_barometer_above_wl, 1));
            jTextField10.setText(local_ship_barometer_above_wl);
            
            // insert computed ship barometer air pressure converted to sea level
            local_ship_barometer_sea_level = Double.toString(round(double_local_ship_barometer_sea_level, 1));
            jTextField11.setText(local_ship_barometer_sea_level);
            
            // insert computed instrument error
            local_instrument_error_ship_barometer = Double.toString(round(double_local_instrument_error_ship_barometer, 1));
            jTextField12.setText(local_instrument_error_ship_barometer);
            
            // insert computed instrument correction
            local_instrument_correction_ship_barometer = Double.toString(round(double_local_instrument_correction_ship_barometer, 1));
            jTextField13.setText(local_instrument_correction_ship_barometer);
         }
         else
         {
            info = "computation error encountered or ship barometer height above the waterline negative";
            JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE); 
         }
      } // if (doorgaan)
      
   }//GEN-LAST:event_Compute_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
      // TODO add your handling code here:
     
      // close input page 
      setVisible(false);
      dispose();
   }//GEN-LAST:event_Cancel_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/      
   private void Export_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_button_actionPerformed
      // TODO add your handling code here:
      
      boolean doorgaan = true;
      String export_dir = null;    // NB Passing in a null string causes the file chooser to point to the user's default directory (It is typically the "My Documents" folder on Windows)
    
      JFileChooser chooser = new JFileChooser(export_dir);
      chooser.setDialogTitle("Export barometer comparison data");
      chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);                        // now the user can only select files (directories and files are both still visible)
      int result = chooser.showSaveDialog(barometer_comparison.this);

      if (result == JFileChooser.APPROVE_OPTION)
      {
         barometer_comparison_export_file = chooser.getSelectedFile().getPath();    // getSelectedFile() -> in this case returns not a file but a directory !

         if (chooser.getSelectedFile().exists())
         {
            int response = JOptionPane.showConfirmDialog (null, "Overwrite existing file?", main.APPLICATION_NAME + " confirm overwrite", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            doorgaan = response != JOptionPane.CANCEL_OPTION;
         }

         if (doorgaan == true)
         {
            new SwingWorker<String, Void>()
            {
               @Override
               protected String doInBackground() throws Exception
               {
                  String export_maintenance_data_ok = "OK";
                  
                  try (BufferedWriter out = new BufferedWriter(new FileWriter(barometer_comparison_export_file)))
                  {
                     out.write("BAROMETER COMPARISON"); out.newLine();
                     out.newLine();
                     out.write("ship name: " + local_ship_name); out.newLine();
                     out.write("height ship barometer above Summer Load Line: " + local_barometer_above_sll + " metres"); out.newLine();
                     out.write("distance of bottom of the keel to Summer Load Line: " + local_keel_sll + " metres"); out.newLine();
                     out.newLine();
                     out.write("date and time: " + local_date_time + " UTC"); out.newLine();
                     out.write("position or port: " + local_position); out.newLine();
                     out.write("ship barometer reading, indicating air pressure at bridge level: " + local_ship_barometer_reading + " hPa"); out.newLine();
                     out.write("reference barometer reading, indicating air pressure at sea level: " + local_reference_barometer_reading + " hPa"); out.newLine();
                     out.write("actual ship draft: " + local_draft + " metres"); out.newLine();
                     out.write("outdoor air temperature: " + local_air_temp + " °C"); out.newLine(); 
                     out.newLine();
                     out.write("actual height of the ship barometer above the waterline: " + local_ship_barometer_above_wl + " metres"); out.newLine();
                     out.write("ship barometer air pressure converted to sea level: " + local_ship_barometer_sea_level + " hPa"); out.newLine();
                     out.write("instrument error ship barometer: " + local_instrument_error_ship_barometer + " hPa"); out.newLine();
                     out.write("instrument correction ship barometer: " + local_instrument_correction_ship_barometer + " hPa"); out.newLine();
                     
                     // user feedback string
                     export_maintenance_data_ok = "OK, barometer comparison data written to: " + barometer_comparison_export_file;        
                  }
                  catch (IOException | HeadlessException e)
                  {
                     // Note: A try-with-resources statement can have catch and finally blocks just like an ordinary try statement. In a try-with-resources statement, any catch or finally block is run after the resources declared have been closed.
                     export_maintenance_data_ok = "Unable to write to: " + barometer_comparison_export_file + " (" + e + ")";
                  } // catch
                  
                  
                  return export_maintenance_data_ok;

               } // protected Void doInBackground() throws Exception
               
               @Override
               protected void done()
               {
                  try
                  {
                     String result_export_maintenance_data_ok = get();
                  
                     if (result_export_maintenance_data_ok.contains("OK") != true)
                     {
                        // show error message
                        JOptionPane.showMessageDialog(null, result_export_maintenance_data_ok,  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                     }
                     else
                     {
                        // show the 'succesfully exported' message
                        JOptionPane.showMessageDialog(null, result_export_maintenance_data_ok, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
                     }
                  }
                  catch (InterruptedException | ExecutionException ex)
                  {
                     // show error message
                     JOptionPane.showMessageDialog(null, "Error writing export file (" + ex + ")",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  }
                  
               } // protected void done()
            }.execute(); // new SwingWorker<String, Void>()
         } // if (doorgaan == true)
      } // if (result == JFileChooser.APPROVE_OPTION
   }//GEN-LAST:event_Export_button_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private double round(final double value, final int places) 
   {
      if (places < 0) throw new IllegalArgumentException();
 
      BigDecimal bd = new BigDecimal(Double.toString(value));
      bd = bd.setScale(places, RoundingMode.HALF_UP);
      
      
      return bd.doubleValue();
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private boolean Compute_Barometer_Comparison_Results()
   {
      boolean computation_ok = true;
      double height_corr;
      double temp_Kelvin;
      double term_1;
      double term_2;
  
      
      double_local_ship_barometer_above_wl = double_local_keel_sll + double_local_barometer_above_sll - double_local_draft;
      temp_Kelvin = double_local_air_temp + CELCIUS_TO_KELVIN_FACTOR;                
      term_1 = double_local_ship_barometer_reading * double_local_ship_barometer_above_wl;
      term_2 = 29.27 * temp_Kelvin;

      if (term_2 != 0.0) // exception preventing
      {
         height_corr = term_1 / term_2;
         double_local_ship_barometer_sea_level = double_local_ship_barometer_reading + height_corr;
         double_local_instrument_correction_ship_barometer = double_local_reference_barometer_reading - double_local_ship_barometer_sea_level;
         double_local_instrument_error_ship_barometer = double_local_instrument_correction_ship_barometer * -1;
      } 
      else 
      {
         computation_ok = false;
      }
      
      // check, barometer height above the waterline must be positive!
      if (double_local_ship_barometer_above_wl < 0.0)
      {
         computation_ok = false;
      }
      
      
      return computation_ok;
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initBarometerComparisonComponents()
   {   
      ////////////////////// initialise /////////////////////////   
      jTextField1.setText("");
      jTextField2.setText("");
      jTextField3.setText("");
      jTextField4.setText("");
      jTextField5.setText("");
      jTextField6.setText("");
      jTextField7.setText("");
      jTextField8.setText("");
      jTextField9.setText("");
      jTextField10.setText("");
      jTextField11.setText("");
      jTextField12.setText("");
      jTextField13.setText("");
      
      
       //////////////// insert the basic ship data /////////////////
      jTextField1.setText(main.ship_name.trim());
      jTextField2.setText(main.barometer_above_sll.trim());
      jTextField3.setText(main.keel_sll.trim());
       
      
      /////////// disable the barometer height above SLL and distance keel- SLL ////////
      jTextField2.setEnabled(false);
      jTextField3.setEnabled(false);
      
      // make the computed fields not editable
      jTextField10.setEditable(false);
      jTextField11.setEditable(false);
      jTextField12.setEditable(false);
      jTextField13.setEditable(false);
   }
   
   
   
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(barometer_comparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(barometer_comparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(barometer_comparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(barometer_comparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new barometer_comparison().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField10;
   private javax.swing.JTextField jTextField11;
   private javax.swing.JTextField jTextField12;
   private javax.swing.JTextField jTextField13;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField3;
   private javax.swing.JTextField jTextField4;
   private javax.swing.JTextField jTextField5;
   private javax.swing.JTextField jTextField6;
   private javax.swing.JTextField jTextField7;
   private javax.swing.JTextField jTextField8;
   private javax.swing.JTextField jTextField9;
   // End of variables declaration//GEN-END:variables

   
   private final double CELCIUS_TO_KELVIN_FACTOR                                   = 273.15; 

   private String local_ship_name                                                  = "";
   private String local_barometer_above_sll                                        = "";
   private String local_keel_sll                                                   = "";
   private String local_date_time                                                  = "";
   private String local_position                                                   = ""; 
   private String local_ship_barometer_reading                                     = "";
   private String local_reference_barometer_reading                                = "";
   private String local_draft                                                      = "";
   private String local_air_temp                                                   = "";
   
   private String local_ship_barometer_above_wl                                    = "";    // computed
   private String local_ship_barometer_sea_level                                   = "";    // computed      
   private String local_instrument_error_ship_barometer                            = "";    // computed
   private String local_instrument_correction_ship_barometer                       = "";    // compuetd   
   
   private double double_local_barometer_above_sll                                 = Double.MAX_VALUE;
   private double double_local_keel_sll                                            = Double.MAX_VALUE;
   private double double_local_ship_barometer_reading                              = Double.MAX_VALUE;
   private double double_local_reference_barometer_reading                         = Double.MAX_VALUE;
   private double double_local_draft                                               = Double.MAX_VALUE;
   private double double_local_air_temp                                            = Double.MAX_VALUE;
   
   private double double_local_ship_barometer_above_wl                             = Double.MAX_VALUE;   // computed
   private double double_local_ship_barometer_sea_level                            = Double.MAX_VALUE;   // computed      
   private double double_local_instrument_error_ship_barometer                     = Double.MAX_VALUE;   // computed
   private double double_local_instrument_correction_ship_barometer                = Double.MAX_VALUE;   // compuetd   
   
   private String barometer_comparison_export_file                                 = "";

}
