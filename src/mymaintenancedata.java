
import java.awt.Cursor;
import java.awt.Font;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**

 @author Martin
 */
public
   class mymaintenancedata extends javax.swing.JFrame
{

   /** Creates new form mymaintenancedata */
   public
      mymaintenancedata()
   {
      initComponents();
      initComponents2();
   }

   /** This method is called from within the constructor to
    initialize the form.
    WARNING: Do NOT modify this code. The content of this method is
    always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jScrollPane1 = new javax.swing.JScrollPane();
      jTextArea1 = new javax.swing.JTextArea();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("TurboWin+ maintenance data settings");

      jTextArea1.setColumns(20);
      jTextArea1.setRows(5);
      jScrollPane1.setViewportView(jTextArea1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initComponents2()
   {
      if (main.mode.equals(main.MAINTENANCE_SHOW_DATA))
      {
         show_data();
      }
      else if (main.mode.equals(main.MAINTENANCE_IMPORT_DATA))
      {
         import_data();
      }
     else if (main.mode.equals(main.MAINTENANCE_EXPORT_DATA))
      {
         export_data();
      }
   }   
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void show_data()
   {
      final String newline = System.getProperty("line.separator");
      
      
      Font font = new Font("Monospaced", Font.PLAIN, 13);
      jTextArea1.setFont(font);
      
      
      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      
      new SwingWorker<String, String>()
      {
         @Override
         protected String doInBackground() throws Exception
         {
            String file_line = null;
            
            // fill array
            main.fill_configuratie_array();
            
            for (int i = 0; i < main.MAX_AANTAL_CONFIGURATIEREGELS; i++)
            {
               if ((main.configuratie_regels[i] != null) && (main.configuratie_regels[i].compareTo("") != 0))
               {
                  //System.out.println("+++ configuratie_regels[" + i + "] = " + configuratie_regels[i]);
                  file_line =  main.configuratie_regels[i];    
                  publish(new String[] { file_line });
               }
            } // for (int i = 0; i < MAX_AANTAL_CONFIGURATIEREGELS; i++)
            
  
            // extend title with full path of the system log txt file (can be used to point the observer to the file for eg forwarding to a Met Centre in case of problems)
            //setTitle("TurboWin+ system log [" + volledig_path_turbowin_system_logs + "]");
            
            return null;
         } // protected Void doInBackground() throws Exception
         
         @Override
         protected void process(List<String> data)
         {
            // process: Receives data chunks from the publish method asynchronously on the Event Dispatch Thread.
            for (String received_line: data)
            {
               // NB eg http://www.javacreed.com/swing-worker-example/
               //    The swing component should only accessed from the process() method and never used from within the doInBackbround() method 
               //    or other methods directly (by directly we mean from the same thread) invoked from it. 
               
               // NB altijd in for loop omdat meerdere ontbvangen string's verzameld kunnen zijn voordat het hier procesed wordt(inherent aan SwingWorker)
               jTextArea1.append(received_line);
               jTextArea1.append(newline);
            }
         } // protected void process(List<String> data)
         
         @Override
         protected void done()
         {
            setCursor(Cursor.getPredefinedCursor(Cursor.	DEFAULT_CURSOR));
         } // protected void done()
      }.execute(); // new SwingWorker<Void, Void>()
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void export_data()  
   {
      boolean doorgaan = true;
      
      String export_dir = null;    // NB Passing in a null string causes the file chooser to point to the user's default directory (It is typically the "My Documents" folder on Windows)
      JFileChooser chooser = new JFileChooser(export_dir);
      chooser.setDialogTitle("Export maintenance data");
      chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);                        // now the user can only select files (directories and files are still visible)
      int result = chooser.showSaveDialog(mymaintenancedata.this);

      if (result == JFileChooser.APPROVE_OPTION)
      {
         maintenance_data_export_file = chooser.getSelectedFile().getPath();                       // getSelectedFile() -> in this case returns not a file but a directory !

         if (chooser.getSelectedFile().exists())
         {
            int response = JOptionPane.showConfirmDialog (null, "Overwrite existing file?", main.APPLICATION_NAME + " confirm overwrite", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            doorgaan = response != JOptionPane.CANCEL_OPTION;
         }


         if (doorgaan == true)
         {
            new SwingWorker<String, Void>()
            {
               @Override
               protected String doInBackground() throws Exception
               {
                  String export_maintenance_data_ok = "OK";
                  
                  try
                  {
                     // open export (output) file
                     BufferedWriter out = new BufferedWriter(new FileWriter(maintenance_data_export_file));

                     for (int i = 0; i < main.MAX_AANTAL_CONFIGURATIEREGELS; i++)
                     {
                        if ((main.configuratie_regels[i] != null) && (main.configuratie_regels[i].compareTo("") != 0))
                        {
                           //System.out.println("+++ configuratie_regels[" + i + "] = " + configuratie_regels[i]);
                           out.write(main.configuratie_regels[i]);
                           out.newLine();   // newLine(): write a line separator. The line separator string is defined by the system property line.separator, and is not necessarily a single newline ('\n') character.
                        }
                     } // for (int i = 0; i < MAX_AANTAL_CONFIGURATIEREGELS; i++)

                     // close output file
                     out.close();

                     // user feedback string
                     export_maintenance_data_ok = "OK, maintenance data written to: " + maintenance_data_export_file;

                  } // try
                  catch (IOException | HeadlessException e)
                  {
                     export_maintenance_data_ok = "Unable to write to: " + maintenance_data_export_file + " (" + e + ")";
                  } // catch

                  return export_maintenance_data_ok;

               } // protected Void doInBackground() throws Exception
               
               @Override
               protected void done()
               {
                  try
                  {
                     String result_export_maintenance_data_ok = get();
                  
                     if (result_export_maintenance_data_ok.contains("OK") != true)
                     {
                        // show error message
                        JOptionPane.showMessageDialog(null, result_export_maintenance_data_ok,  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                     }
                     else
                     {
                        // show the succesfully exported results
                        JOptionPane.showMessageDialog(null, result_export_maintenance_data_ok, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
                     }
                  }
                  catch (InterruptedException | ExecutionException ex)
                  {
                     // show error message
                     JOptionPane.showMessageDialog(null, "Error writing export file (" + ex + ")",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  }
                  
                  // always show the latest 'operational' maintenance data (never mind the import succeeded)
                  show_data();
               } // protected void done()
               
            }.execute(); // new SwingWorker<Void, Void>()
         } // if (doorgaan == true)
      } // if (result == JFileChooser.APPROVE_OPTION
      else // Cancel button
      {
         //mymaintenancedata.dispose(); // doesn't work
         //this.setVisible(false);      // doesn't work
         show_data();
      }
      
   }
   

   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void import_data()                                                                     
   {                                                                         
      // TODO add your handling code here:
      
      String input_dir = null;    // NB Passing in a null string causes the file chooser to point to the user's default directory (It is typically the "My Documents" folder on Windows)
      JFileChooser chooser = new JFileChooser(input_dir);
      chooser.setDialogTitle("Import maintenance data");
         
      int result = chooser.showOpenDialog(mymaintenancedata.this);
      if (result == JFileChooser.APPROVE_OPTION)
      {
         maintenance_data_import_file = chooser.getSelectedFile().getPath();

         new SwingWorker<String, Void>()
         {
            @Override
            protected String doInBackground() throws Exception
            {
               String file_line = null;
               int teller;
               String import_maintenance_data_ok = "OK";
               boolean ship_name_txt_present = false;
               boolean call_sign_txt_present = false;

               // read all lines from imported maintenance data (eg TurboWin_configuration_Happy_Sailor.txt) file 
               try
               {
                  teller = 0;
                  BufferedReader in = new BufferedReader(new FileReader(maintenance_data_import_file));

                  // at least ship name and call sign must be present in the import file
                  while((file_line = in.readLine()) != null)
                  {
                     //System.out.println("+++ 1] " + file_line);
                     
                     // NB e.g. configuratie_regels[2]  = "wind source        : estimated; true speed and true direction"
                     // read all lines from import file and check for presence of ship name and call sign
                     if (file_line.indexOf(main.SHIP_NAME_TXT) != -1)
                     {
                        ship_name_txt_present = true;   
                     }
                     if (file_line.indexOf(main.CALL_SIGN_TXT) != -1)
                     {
                        call_sign_txt_present = true;
                     }   
         
                     teller++;
             
                     // for safety 
                     if (teller >= main.MAX_AANTAL_CONFIGURATIEREGELS)
                     {
                        break;
                     }
                  } // while((file_line = in.readLine()) != null)
                  in.close();
         
                  // continue if ship name text string and call sign text string are present (these are not the name and call sign itself but the TEXT entrance ("ship name          :")
                  if (ship_name_txt_present && call_sign_txt_present)
                  {
                     // initialisation
                     for (teller = 0; teller < main.MAX_AANTAL_CONFIGURATIEREGELS; teller++)
                     {
                        main.configuratie_regels[teller] = "";
                     }
              
                     // reset reading!!
                     teller = 0;
                     BufferedReader in2 = new BufferedReader(new FileReader(maintenance_data_import_file));
                     while((file_line = in2.readLine()) != null)
                     {
                        //System.out.println("+++ 2] " + file_line);
                        
                        // NB e.g. configuratie_regels[2]  = "wind source        : estimated; true speed and true direction"
                        // read all lines from configuration file 
                        main.configuratie_regels[teller] = file_line;
                        teller++;
            
                        // for safety 
                        if (teller >= main.MAX_AANTAL_CONFIGURATIEREGELS)
                        {
                           break;
                        }
                     } // while((file_line = in.readLine()) != null)
                     in2.close();

                     // put collected meta data from configuration file into appropriate global vars 
                     main.meta_data_from_configuration_regels_into_global_vars();
                     
                     // write meta (station) data to muffins or configuration files
                     if (main.offline_mode_via_cmd == true)
                     {
                        main.schrijf_configuratie_regels();          
                     }
                     else // so offline_via_jnlp mode or online (webstart) mode
                     {
                        main.set_muffin();
                        main.schrijf_configuratie_regels();
                     }   
                     
                     // user feedback string
                     import_maintenance_data_ok = "OK, maintenance data successfully importend from: " + maintenance_data_import_file;
                     
                  } //    if (ship_name_present && call_sign_present)
                  else
                  {
                     import_maintenance_data_ok = "Invalid format import file (" + maintenance_data_import_file + ")";
                  }
                  
                  //in.close();
               
               } // try
               catch (Exception e)
               {
                  import_maintenance_data_ok = "Error reading import file (" + maintenance_data_import_file + ")";
               } // catch

               return import_maintenance_data_ok;

            } // protected Void doInBackground() throws Exception

            @Override
            protected void done()
            {
               try
               {
                  String result_import_maintenance_data_ok = get();
                  
                  if (result_import_maintenance_data_ok.contains("OK") == false)
                  {
                     // show error message
                     JOptionPane.showMessageDialog(null, result_import_maintenance_data_ok,  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  }
                  else
                  {
                     // show the imported results
                     JOptionPane.showMessageDialog(null, result_import_maintenance_data_ok, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);

                  }
               }
               catch (InterruptedException | ExecutionException ex)
               {
                  // show error message
                  JOptionPane.showMessageDialog(null, "Error reading import file (" + ex + ")",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
               }
            
               // always show the latest 'operational' maintenance data (never mind the import succeeded)
               show_data();
            } // protected void done()
         }.execute(); // new SwingWorker<Void, Void>()
      } // if (result == JFileChooser.APPROVE_OPTION
      else // Cancel button
      {
         show_data();
      }
   }  
   
 
   
   
   /**
    @param args the command line arguments
    */
   public static
      void main(String args[])
   {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(mymaintenancedata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(mymaintenancedata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(mymaintenancedata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(mymaintenancedata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new mymaintenancedata().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextArea jTextArea1;
   // End of variables declaration//GEN-END:variables

   private String maintenance_data_import_file                     = "";            // for importing maintenance data (configuration data) from import file
   private String maintenance_data_export_file                     = "";            // for exporting maintenance data (configuration data) to exportt file




}
