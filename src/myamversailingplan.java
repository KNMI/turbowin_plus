package turbowin;


import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.TableCellEditor;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * myamversailingplan.java
 *
 * Created on 14-mrt-2012, 9:12:46
 */

/**
 *
 * @author Martin
 */
final public class myamversailingplan extends javax.swing.JFrame {

    /** Creates new form myamversailingplan */
    public myamversailingplan() {
        initComponents();
        initParameters();
        setLocation(main.x_pos_amver_frame, main.y_pos_amver_frame);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      jTextField2 = new javax.swing.JTextField();
      jTextField20 = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jTextField3 = new javax.swing.JTextField();
      jTextField4 = new javax.swing.JTextField();
      jTextField5 = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      jTextField6 = new javax.swing.JTextField();
      jTextField7 = new javax.swing.JTextField();
      jLabel10 = new javax.swing.JLabel();
      jLabel11 = new javax.swing.JLabel();
      jTextField8 = new javax.swing.JTextField();
      jLabel12 = new javax.swing.JLabel();
      jTextField9 = new javax.swing.JTextField();
      jLabel13 = new javax.swing.JLabel();
      jTextField10 = new javax.swing.JTextField();
      jLabel14 = new javax.swing.JLabel();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jTextField11 = new javax.swing.JTextField();
      jLabel17 = new javax.swing.JLabel();
      jTextField12 = new javax.swing.JTextField();
      jLabel18 = new javax.swing.JLabel();
      jTextField13 = new javax.swing.JTextField();
      jLabel19 = new javax.swing.JLabel();
      jTextField14 = new javax.swing.JTextField();
      jLabel20 = new javax.swing.JLabel();
      jTextField15 = new javax.swing.JTextField();
      jLabel21 = new javax.swing.JLabel();
      jTextField16 = new javax.swing.JTextField();
      jLabel27 = new javax.swing.JLabel();
      jLabel28 = new javax.swing.JLabel();
      jLabel26 = new javax.swing.JLabel();
      jLabel29 = new javax.swing.JLabel();
      jLabel30 = new javax.swing.JLabel();
      jLabel31 = new javax.swing.JLabel();
      jLabel32 = new javax.swing.JLabel();
      jLabel33 = new javax.swing.JLabel();
      jLabel34 = new javax.swing.JLabel();
      jLabel35 = new javax.swing.JLabel();
      jTextField18 = new javax.swing.JTextField();
      jLabel36 = new javax.swing.JLabel();
      jTextField19 = new javax.swing.JTextField();
      jLabel40 = new javax.swing.JLabel();
      jLabel37 = new javax.swing.JLabel();
      jTextField22 = new javax.swing.JTextField();
      jLabel42 = new javax.swing.JLabel();
      jLabel44 = new javax.swing.JLabel();
      jTextField23 = new javax.swing.JTextField();
      jLabel45 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jTable1 = new javax.swing.JTable();
      jLabel25 = new javax.swing.JLabel();
      jPanel3 = new javax.swing.JPanel();
      jLabel22 = new javax.swing.JLabel();
      jTextField17 = new javax.swing.JTextField();
      jLabel23 = new javax.swing.JLabel();
      jLabel24 = new javax.swing.JLabel();
      jCheckBox1 = new javax.swing.JCheckBox();
      jCheckBox2 = new javax.swing.JCheckBox();
      jCheckBox3 = new javax.swing.JCheckBox();
      jCheckBox4 = new javax.swing.JCheckBox();
      jCheckBox5 = new javax.swing.JCheckBox();
      jCheckBox6 = new javax.swing.JCheckBox();
      jCheckBox7 = new javax.swing.JCheckBox();
      jCheckBox8 = new javax.swing.JCheckBox();
      jPanel4 = new javax.swing.JPanel();
      jTextField21 = new javax.swing.JTextField();
      jLabel41 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jLabel38 = new javax.swing.JLabel();
      jButton4 = new javax.swing.JButton();
      jLabel39 = new javax.swing.JLabel();
      jLabel43 = new javax.swing.JLabel();
      jButton5 = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Amver Sailing Plan");
      setMinimumSize(new java.awt.Dimension(1000, 750));
      setResizable(false);
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosed(java.awt.event.WindowEvent evt) {
            Closed_actionPerformed(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel1.setPreferredSize(new java.awt.Dimension(893, 241));

      jLabel1.setText("name");

      jLabel2.setText("call sign");

      jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel3.setText("vessel");

      jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel4.setText("time of departure [UTC]");

      jLabel5.setText("day");

      jLabel6.setText("hour");

      jLabel7.setText("minute");

      jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel8.setText("current course");

      jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel9.setText("speed (remainder voyage)");

      jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel10.setText("departure");

      jLabel11.setText("port");

      jLabel12.setText("lat [dd-mm N/S]");

      jLabel13.setText("lon [ddd-mm W/E]");

      jLabel14.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel14.setText("destination");

      jLabel15.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel15.setText("ETA destination [UTC]");

      jLabel16.setText("port");

      jLabel17.setText("lat [dd-mm N/S]");

      jLabel18.setText("lon [ddd-mm W/E]");

      jLabel19.setText("day");

      jLabel20.setText("hour");

      jLabel21.setText("minute");

      jLabel27.setText("[nn.n e.g. 09.5]");

      jLabel28.setText("[001-360]");

      jLabel26.setText("[01-31]");

      jLabel29.setText("[00-23]");

      jLabel30.setText("[00-59]");

      jLabel31.setText("[01-31]");

      jLabel32.setText("[00-23]");

      jLabel33.setText("[00-59]");

      jLabel34.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel34.setText("current position");

      jLabel35.setText("lat [dd-mm N/S]");

      jLabel36.setText("lon [ddd-mm W/E]");

      jLabel40.setText("IMO number");

      jLabel37.setText("month");

      jLabel42.setText("[3 letters]");

      jLabel44.setText("month");

      jLabel45.setText("[3 letters]");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
               .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel16)
                     .addComponent(jLabel11)))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel4)
                     .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel1)
                     .addComponent(jLabel5)))
               .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel15)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabel19)))
            .addGap(10, 10, 10)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.LEADING))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addGroup(jPanel1Layout.createSequentialGroup()
                              .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(jLabel26)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(jLabel6))
                           .addGroup(jPanel1Layout.createSequentialGroup()
                              .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(jLabel31)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(jLabel20)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                           .addGroup(jPanel1Layout.createSequentialGroup()
                              .addGap(1, 1, 1)
                              .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(jLabel32)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(jLabel21))
                           .addGroup(jPanel1Layout.createSequentialGroup()
                              .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(jLabel29)
                              .addGap(41, 41, 41)
                              .addComponent(jLabel7)))))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                           .addComponent(jLabel2)
                           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                           .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addGap(48, 48, 48)
                           .addComponent(jLabel40))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                           .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jLabel12)
                              .addComponent(jLabel17)
                              .addGroup(jPanel1Layout.createSequentialGroup()
                                 .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(jLabel30))
                              .addGroup(jPanel1Layout.createSequentialGroup()
                                 .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(jLabel33)))
                           .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(jPanel1Layout.createSequentialGroup()
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(jTextField9, javax.swing.GroupLayout.Alignment.LEADING))
                                 .addGap(16, 16, 16)
                                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel13)))
                              .addGroup(jPanel1Layout.createSequentialGroup()
                                 .addGap(35, 35, 35)
                                 .addComponent(jLabel37)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(jLabel42))
                              .addGroup(jPanel1Layout.createSequentialGroup()
                                 .addGap(32, 32, 32)
                                 .addComponent(jLabel44)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(jLabel45)))))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel36))))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                     .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.LEADING))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
               .addComponent(jTextField13)
               .addComponent(jTextField20))
            .addGap(78, 78, 78))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel3)
               .addComponent(jLabel1)
               .addComponent(jLabel2)
               .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel40))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel4)
               .addComponent(jLabel5)
               .addComponent(jLabel26)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel6)
               .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel29)
               .addComponent(jLabel7)
               .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel30)
               .addComponent(jLabel37)
               .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel42))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel34)
               .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel35)
               .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel36))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel28))
            .addGap(9, 9, 9)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel9)
               .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel27))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel11)
               .addComponent(jLabel13)
               .addComponent(jLabel12)
               .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel10))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel16)
               .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel18)
               .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel17)
               .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel14))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel19)
               .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel31)
               .addComponent(jLabel20)
               .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel21)
               .addComponent(jLabel33)
               .addComponent(jLabel15)
               .addComponent(jLabel32)
               .addComponent(jLabel44)
               .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel45))
            .addContainerGap(42, Short.MAX_VALUE))
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel2.setPreferredSize(new java.awt.Dimension(927, 180));

      jTable1.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null}
         },
         new String [] {
            "route", "method [RL,GC,COASTAL]", "speed* [knots e.g. 09.8]", "lat** [dd-mm N/S]", "lon** [ddd-mm W/E]", "ETA [day]", "ETA [hh:mm]", "ETD*** [day]", "ETD*** [hh:mm]"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, true, true, true, true, true, true, true, true
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      jTable1.getTableHeader().setReorderingAllowed(false);
      jScrollPane1.setViewportView(jTable1);

      jLabel25.setText("* optional    ** of the next turning point   *** only required if lay over                        --- all times in UTC ---");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGap(53, 53, 53)
                  .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(14, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(5, 5, 5)
            .addComponent(jLabel25)
            .addContainerGap())
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel22.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel22.setText("radio guard*");

      jLabel23.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel23.setText("medical*");

      jLabel24.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
      jLabel24.setText("relay*");

      jCheckBox1.setText("none");

      jCheckBox2.setText("nurse");

      jCheckBox3.setText("PA");

      jCheckBox4.setText("MD");

      jCheckBox5.setText("JASREP");

      jCheckBox6.setText("AUSREP");

      jCheckBox7.setText("CHILREP");

      jCheckBox8.setText("MAREP");

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                     .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                     .addComponent(jCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                     .addComponent(jCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(242, 242, 242))
                     .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE))))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel22)
               .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel23)
               .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
               .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel24)
               .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
               .addComponent(jCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jCheckBox8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );

      jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jLabel41.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      jLabel41.setText("Remarks*");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel41)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel41)
               .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );

      jButton1.setText("E-mail");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            OK_button_actionPerformed(evt);
         }
      });

      jButton2.setText("Cancel");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Cancel_button_actionPerformed(evt);
         }
      });

      jButton3.setText("Import");
      jButton3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            import_button_actionPerformed(evt);
         }
      });

      jLabel38.setText("--- only import saved Sailing Plans ---");

      jButton4.setText("Save");
      jButton4.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            save_button_actionPerformed(evt);
         }
      });

      jLabel39.setForeground(new java.awt.Color(0, 0, 255));
      jLabel39.setText("<html><u>AMVER web site</u></html>");
      jLabel39.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            AMVER_web_link_mouseClicked(evt);
         }
         public void mouseEntered(java.awt.event.MouseEvent evt) {
            AMVER_web_link_mouseEntered(evt);
         }
         public void mouseExited(java.awt.event.MouseEvent evt) {
            AMVER_web_link_mouseExited(evt);
         }
      });

      jLabel43.setText("* optional");

      jButton5.setText("Clipboard");
      jButton5.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Clipboard_button_actionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel43)
                  .addGap(69, 69, 69)
                  .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(32, 32, 32)
                  .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jButton5)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(63, 63, 63))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE)
                     .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE))
                  .addGap(0, 42, Short.MAX_VALUE))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel43)
               .addComponent(jLabel38)
               .addComponent(jButton5))
            .addGap(15, 15, 15))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   public void stopCellEditing()
   {
      TableCellEditor editor = jTable1.getCellEditor();
      if (editor != null )
      {
         editor.stopCellEditing();
      }
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Reset_All_AMVER_SP_Vars()
   {
      // scope this module + myturbowin.java main module (all of type: static)
      amver_sp_vessel                            = "";
      amver_sp_call_sign                         = "";
      amver_sp_imo_number                        = "";
      
      amver_sp_time_of_dep_day                   = "";
      amver_sp_time_of_dep_hour                  = "";
      amver_sp_time_of_dep_minute                = "";
      amver_sp_time_of_dep_month                 = "";

      amver_dr_current_pos_lat                   = "";
      amver_dr_current_pos_lon                   = "";

      amver_sp_current_course                    = "";
      amver_sp_remainder_speed                   = "";
      amver_sp_port_dep_name                     = "";
      amver_sp_port_dep_lat                      = "";
      amver_sp_port_dep_lon                      = "";
      amver_sp_port_des_name                     = "";
      amver_sp_port_des_lat                      = "";
      amver_sp_port_des_lon                      = "";
      
      amver_sp_time_of_des_day                   = "";
      amver_sp_time_of_des_hour                  = "";
      amver_sp_time_of_des_minute                = "";
      amver_sp_time_of_des_month                 = "";

      for (int r = 0; r < AMVER_TRACK_ROWS; r++)
      {
         for (int c = 1; c < AMVER_TRACK_COLUMNS; c++)     // NB c = 0 predefined (non editable) track numbers
         {
            amver_track_data[r][c]                = null;  // NB will be cheked on null! (do not "" )
         }
      } // for (int r = 0; r < AMVER_TRACK_ROWS; r++)

      amver_sp_radio_guard                        = "";

      for (int i = 0; i < 4; i++)
      {
         amver_sp_medical[i] = false;
         amver_sp_relay[i]   = false;
      }
      
      amver_sp_remarks                            = "";

      // scope only this module
      email_body                                  = "";
      checks_ok                                   = false;
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void OK_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_button_actionPerformed
       // TODO add your handling code here:


      // NB actually the E-mail button is the OK button

      // NOTE: stopCellEditing() is called automatically when you hit [Enter] or [Tab] on a cell indicating the end of editing
      //       But we want it to stop if the user click the OK button, if fuction stopCellEditing() is not called
      //       it is possible that the last changes/inserts of a cell, if this cell has still the focus, are ignored
      //       when pressing the OK button
      if ((main.amver_report.equals(main.AMVER_SP)) ||  // L-line
          (main.amver_report.equals(main.AMVER_DR)))
      {
         stopCellEditing();
      }

      // initialisation
      Reset_All_AMVER_SP_Vars();

      read_sp_data_from_amver_form();                 // for all 4 kinds of AMVER reports

      boolean invoke_email_program = true;
      check_and_clipboard_email_amver_report(invoke_email_program);
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/

    private void read_sp_data_from_amver_form()
    {
       //
       ////////////////// collect inserted values
       //

       // A-line
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_FR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_sp_vessel              = jTextField1.getText().toUpperCase().trim();
          amver_sp_call_sign           = jTextField2.getText().toUpperCase().trim();
          amver_sp_imo_number          = jTextField20.getText().trim();
       }

       // B-line
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_sp_time_of_dep_day     = jTextField3.getText().trim();
          amver_sp_time_of_dep_hour    = jTextField4.getText().trim();
          amver_sp_time_of_dep_minute  = jTextField5.getText().trim();
          amver_sp_time_of_dep_month   = jTextField22.getText().toUpperCase().trim();
       }
       
       // C-line
       if ((main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_dr_current_pos_lat     = jTextField18.getText().trim();
          amver_dr_current_pos_lon     = jTextField19.getText().trim();
       }
       
       // E-line
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_sp_current_course      = jTextField6.getText().trim();
       }

       // F-line
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_sp_remainder_speed     = jTextField7.getText().trim();
       }

       // G-line
       if (main.amver_report.equals(main.AMVER_SP))
       {
          amver_sp_port_dep_name       = jTextField8.getText().toUpperCase().trim();
          amver_sp_port_dep_lat        = jTextField9.getText().trim();
          amver_sp_port_dep_lon        = jTextField10.getText().trim();
       }

       // I-line (or K-line)
       if ((main.amver_report.equals(main.AMVER_SP)) ||     // I-line
           (main.amver_report.equals(main.AMVER_DR)) ||     // I-line
           (main.amver_report.equals(main.AMVER_PR)) ||     // I-line (note optional for Position Report)
           (main.amver_report.equals(main.AMVER_FR)))       // K-line
       {
          amver_sp_port_des_name       = jTextField11.getText().toUpperCase().trim();
          amver_sp_port_des_lat        = jTextField12.getText().trim();
          amver_sp_port_des_lon        = jTextField13.getText().trim();
          amver_sp_time_of_des_day     = jTextField14.getText().trim();
          amver_sp_time_of_des_hour    = jTextField15.getText().trim();
          amver_sp_time_of_des_minute  = jTextField16.getText().trim();
          amver_sp_time_of_des_month   = jTextField23.getText().toUpperCase().trim();
       }

       // L-line (collect data from all (track) table cells)
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)))
       {
          for (int r = 0; r < AMVER_TRACK_ROWS; r++)
          {
             for (int c = 0; c < AMVER_TRACK_COLUMNS; c++)
             {
                amver_track_data[r][c] = (String)jTable1.getValueAt(r, c);
             }
          } // for (int r = 0; r < AMVER_TRACK_ROWS; r++)
       }

       // M-line
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_sp_radio_guard         = jTextField17.getText().toUpperCase().trim();
       }

       // V-line (medical,more than one selection possible)
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_FR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          if (jCheckBox1.isSelected() == true)
          {
             amver_sp_medical[0] = true;              // NONE;
          }
          if (jCheckBox2.isSelected() == true)
          {
             amver_sp_medical[1] = true;              // NURSE;
          }
          if (jCheckBox3.isSelected() == true)
          {
             amver_sp_medical[2] = true;              // PA;
          }
          if (jCheckBox4.isSelected() == true)
          {
             amver_sp_medical[3] = true;              // MD;
          }
       }

       // X-line (remarks)
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_FR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          amver_sp_remarks = jTextField21.getText().toUpperCase().trim();        
                  
       } // if ((main.amver_report.equals(main.AMVER_SP)) etc.

       
       // Y-line (relay, more than one selection possible)
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_FR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          if (jCheckBox5.isSelected() == true)
          {
             amver_sp_relay[0] = true;                // JASREP
          }
          if (jCheckBox6.isSelected() == true)
          {
             amver_sp_relay[1] = true;                // AUSREP
          }
          if (jCheckBox7.isSelected() == true)
          {
             amver_sp_relay[2] = true;                // CHILREP
          }
          if (jCheckBox8.isSelected() == true)
          {
             amver_sp_relay[3] = true;                // MAREP
          }
       } // if ((main.amver_report.equals(main.AMVER_SP)) etc.
       
    }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void check_and_clipboard_email_amver_report(boolean invoke_email_program)
    {

       // initialisation
       checks_ok = true;

       // A-line; ship name + call sign + IMO number
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_FR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          // A-line; ship name
          if ((checks_ok) && (amver_sp_vessel.length() < 2))
          {
             JOptionPane.showMessageDialog(null, "ship name not present", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // A-line; call sign
          if ((checks_ok) && (amver_sp_call_sign.length() < 2))
          {
             JOptionPane.showMessageDialog(null, "call sign not present or invalid", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }
          
          // A-line; IMO number
          if ((checks_ok) && (amver_sp_imo_number.length() < 2))
          {
             JOptionPane.showMessageDialog(null, "IMO number not present or invalid", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }
          
       } // if ((main.amver_report.equals(main.AMVER_SP)) || etc.

       // B-line; time of departure
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          // B-line; day (time of departure or time current position)
          if ((checks_ok) && (amver_sp_time_of_dep_day.length() != 2))
          {
             if (main.amver_report.equals(main.AMVER_SP))
             {
                JOptionPane.showMessageDialog(null, "day (time of departure) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "day (time of position) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }

          // B-line; day (hour of departure or time current position)
          if ((checks_ok) && (amver_sp_time_of_dep_hour.length() != 2))
          {
             if (main.amver_report.equals(main.AMVER_SP))
             {
                JOptionPane.showMessageDialog(null, "hour (time of departure) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "hour (time of position) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }
  
          // B-line; minute (time of departure or time current position)
          if ((checks_ok) && (amver_sp_time_of_dep_minute.length() != 2))
          {
             if (main.amver_report.equals(main.AMVER_SP))
             {
                JOptionPane.showMessageDialog(null, "minute (time of departure) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "minute (time of position) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }
          
          // B-line; month (time of departure or time current position)
          if ((checks_ok) && (!month_3_letter_array.contains(amver_sp_time_of_dep_month)))
          {
             if (main.amver_report.equals(main.AMVER_SP))
             {
                JOptionPane.showMessageDialog(null, "month (time of departure) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "month (time of position) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }
       } // if ((main.amver_report.equals(main.AMVER_SP)) || etc.

       // C-line; current position
       if ((main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          // C-line current position (latitude) FIRST check
          if ((checks_ok) && (amver_dr_current_pos_lat.length() != 7))
          {
             JOptionPane.showMessageDialog(null, "current position latitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // C-line current position (latitude) SECOND check  // e.g. "02-23 W"
          if  ((checks_ok) && ((amver_dr_current_pos_lat.substring(2,3).compareTo("-") != 0) ||
                    (amver_dr_current_pos_lat.substring(5,6).compareTo(" ") != 0) ||
                    (amver_dr_current_pos_lat.substring(6,7).compareTo("N") != 0) && (amver_dr_current_pos_lat.substring(6,7).compareTo("S") != 0)))
          {
             JOptionPane.showMessageDialog(null, "current position latutide invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // C-line current position (longitude) FIRST check
          if ((checks_ok) && (amver_dr_current_pos_lon.length() != 8))
          {
             JOptionPane.showMessageDialog(null, "current position longitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // C-line current position (longitude) SECOND check  // e.g. "032-23 W"
          if ((checks_ok) && ((amver_dr_current_pos_lon.substring(3,4).compareTo("-") != 0) ||
                    (amver_dr_current_pos_lon.substring(6,7).compareTo(" ") != 0) ||
                    (amver_dr_current_pos_lon.substring(7,8).compareTo("W") != 0) && (amver_dr_current_pos_lon.substring(7,8).compareTo("E") != 0)))
          {
             JOptionPane.showMessageDialog(null, "current position longitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }
       } // if (main.amver_report.equals(main.AMVER_DR)) || etc.

       // E-line; current course
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          // E-line; current course
          if ((checks_ok) && (amver_sp_current_course.length() != 3))
          {
             JOptionPane.showMessageDialog(null, "current course invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }
       }

       // F-line; speed (remainder voyage)
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)) ||
           (main.amver_report.equals(main.AMVER_PR)))
       {
          // F-line; speed (remainder voyage) // e.g. 09.6 FIRST check
          if ((checks_ok) && (amver_sp_remainder_speed.length() != 4))
          {
             JOptionPane.showMessageDialog(null, "speed (remainder voyage) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // F-line; speed (remainder voyage) // e.g. 09.6 SECOND check
          if ((checks_ok) && (amver_sp_remainder_speed.substring(2,3).compareTo(".") != 0))
          {
             JOptionPane.showMessageDialog(null, "speed (remainder voyage) invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }
       } //if ((main.amver_report.equals(main.AMVER_SP)) || etc.

       // G-line
       if (main.amver_report.equals(main.AMVER_SP))
       {
          // G-line; port of departure (name)
          if ((checks_ok) && (amver_sp_port_dep_name.length() < 2))
          {
             JOptionPane.showMessageDialog(null, "port of depature name not present", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // G-line port of departure (latitude) FIRST check
          if ((checks_ok) && (amver_sp_port_dep_lat.length() != 7))
          {
             JOptionPane.showMessageDialog(null, "port of depature latitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // G-line port of departure (latitude) SECOND check  // e.g. "02-23 W"
          if  ((checks_ok) && ((amver_sp_port_dep_lat.substring(2,3).compareTo("-") != 0) ||
                    (amver_sp_port_dep_lat.substring(5,6).compareTo(" ") != 0) ||
                    (amver_sp_port_dep_lat.substring(6,7).compareTo("N") != 0) && (amver_sp_port_dep_lat.substring(6,7).compareTo("S") != 0)))
          {
             JOptionPane.showMessageDialog(null, "port of departure latutide invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // G-line; port of departure (longitude) FIRST check
          if ((checks_ok) && (amver_sp_port_dep_lon.length() != 8))
          {
             JOptionPane.showMessageDialog(null, "port of depature longitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // G-line port of departure (longitude) SECOND check  // e.g. "032-23 W"
          if ((checks_ok) && ((amver_sp_port_dep_lon.substring(3,4).compareTo("-") != 0) ||
                    (amver_sp_port_dep_lon.substring(6,7).compareTo(" ") != 0) ||
                    (amver_sp_port_dep_lon.substring(7,8).compareTo("W") != 0) && (amver_sp_port_dep_lon.substring(7,8).compareTo("E") != 0)))
          {
             JOptionPane.showMessageDialog(null, "port of departure longitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }
       } // if (main.amver_report.equals(main.AMVER_SP))

       // I-line; [or K-line]
       if ((main.amver_report.equals(main.AMVER_SP)) ||     // I-line
           (main.amver_report.equals(main.AMVER_DR)) ||     // I-line
           (main.amver_report.equals(main.AMVER_FR)))       // K-line
       {
          // I-line; port of destination (name) [or K-line]
          if ((checks_ok) && (amver_sp_port_des_name.length() < 2))
          {
             JOptionPane.showMessageDialog(null, "port of destination name not present", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; port of destination (latitude) FIRST check [or K-line]
          if ((checks_ok) && (amver_sp_port_des_lat.length() != 7))
          {
             JOptionPane.showMessageDialog(null, "port of destination latitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; port of destination (latitude) SECOND check // e.g. "02-23 W" [or K-line]
          if ((checks_ok) && ((amver_sp_port_des_lat.substring(2,3).compareTo("-") != 0) ||
                   (amver_sp_port_des_lat.substring(5,6).compareTo(" ") != 0) ||
                   (amver_sp_port_des_lat.substring(6,7).compareTo("N") != 0) && (amver_sp_port_des_lat.substring(6,7).compareTo("S") != 0)))
          {
             JOptionPane.showMessageDialog(null, "port of destination latutide invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; port of destination (longitude) FIRST check [or K-line]
          if ((checks_ok) && (amver_sp_port_des_lon.length() != 8))
          {
             JOptionPane.showMessageDialog(null, "port of destination longitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; port of destination (longitude) SECOND check // e.g. "032-23 W" [or K-line]
          if ((checks_ok) && ((amver_sp_port_des_lon.substring(3,4).compareTo("-") != 0) ||
                  (amver_sp_port_des_lon.substring(6,7).compareTo(" ") != 0) ||
                  (amver_sp_port_des_lon.substring(7,8).compareTo("W") != 0) && (amver_sp_port_des_lon.substring(7,8).compareTo("E") != 0)))
          {
             JOptionPane.showMessageDialog(null, "port of destination longitude invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; ETA destination day [or K-line]
          if ((checks_ok) && (amver_sp_time_of_des_day.length() != 2))
          {
             if (main.amver_report.equals(main.AMVER_FR))
             {
                JOptionPane.showMessageDialog(null, "arrived day invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "ETA destination day invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; ETA destination hour [or K-line]
          if ((checks_ok) && (amver_sp_time_of_des_hour.length() != 2))
          {
             if (main.amver_report.equals(main.AMVER_FR))
             {
                JOptionPane.showMessageDialog(null, "arrived hour invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "ETA destination hour invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }

          // I-line; ETA destination minute [or K-line]
          if ((checks_ok) && (amver_sp_time_of_des_minute.length() != 2))
          {
             if (main.amver_report.equals(main.AMVER_FR))
             {
                JOptionPane.showMessageDialog(null, "arrived minute invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "ETA destination minute invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }
          
          // I-line; ETA destination month [or K-line]
          if ((checks_ok) && (!month_3_letter_array.contains(amver_sp_time_of_des_month)))   
          {
             if (main.amver_report.equals(main.AMVER_FR))
             {
                JOptionPane.showMessageDialog(null, "arrived month invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             else
             {
                JOptionPane.showMessageDialog(null, "ETA destination month invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             }
             Reset_All_AMVER_SP_Vars();
          }
       } // if ((main.amver_report.equals(main.AMVER_SP)) || etc.
       else // position report
       {
          // I-line is optional in position report (check on all destination input fields)
//.............
             
          int number_destination_parts = 0;
          if (amver_sp_port_des_name.length() > 0)
          {
             number_destination_parts++;
          }   
          if (amver_sp_port_des_lat.length() > 0)
          {
             number_destination_parts++;
          }   
          if (amver_sp_port_des_lon.length() > 0)
          {
             number_destination_parts++;
          }   
          if (amver_sp_time_of_des_day.length() > 0)
          {
             number_destination_parts++;
          }   
          if (amver_sp_time_of_des_hour.length() > 0)
          {
             number_destination_parts++;
          }   
          if (amver_sp_time_of_des_minute.length() > 0)
          {
             number_destination_parts++;
          }   
          if (amver_sp_time_of_des_month.length() > 0)
          {
             number_destination_parts++;
          }   
            
          if (number_destination_parts != 0 && number_destination_parts != 7)
          {
             JOptionPane.showMessageDialog(null, "For Position Report all 7 (optional) destination input fields must be empty or all 7 fields must be filled out", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             Reset_All_AMVER_SP_Vars();
          } // if (number_destination_parts != 0 && number_destination_parts != 7)
             
//...................          
          
       } // else (position report

       // L-line
       if ((main.amver_report.equals(main.AMVER_SP)) ||
           (main.amver_report.equals(main.AMVER_DR)))
       {
          // first checks routes
          if (checks_ok == true)
          {
             // first check the number of valid routes (a route is valid if method = [RL,GC,COASTAL])
             //
             number_valid_routes = 0;
             for (int r = 0; r < AMVER_TRACK_ROWS; r++)
             {
                if (amver_track_data[r][1] != null)                        // column 1 is method
                {
                   if ((amver_track_data[r][1].compareTo("RL") == 0) ||
                       (amver_track_data[r][1].compareTo("GC") == 0) ||
                       (amver_track_data[r][1].compareTo("COASTAL") == 0))
                   {
                      number_valid_routes++;        // counting start at 0!
                      // so if e.g. row 0 is invalid (e.g. space) and rows 1,2,3 valid than number_valid_routes = 3
                      // see also next check

                      //System.out.println(amver_track_data[r][1]);
                   }
                   else
                   {
                      //   JOptionPane.showMessageDialog(null, "r =" + r, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      //   JOptionPane.showMessageDialog(null, "amver track data =" + amver_track_data[r][1], main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      JOptionPane.showMessageDialog(null, "method route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }
                } // if (amver_track_data[r][1] != null)
             } // for (int r = 0; r < AMVER_TRACK_ROWS; r++)
          } // if (checks_ok == true)

          // L-line vervolg
          if (checks_ok == true)
          {
             // check per column (column numbering start at 0; with column 0 is route number))
             // NOTE a required items must be checked first on NULL!!
             //
             for (int r = 0; r < number_valid_routes; r++)
             {
                // last route may only contain method
                //
                if (r == number_valid_routes -1)
                {
                   if ( (amver_track_data[r][2] != null) && (amver_track_data[r][2].compareTo("") != 0) ||
                        (amver_track_data[r][3] != null) && (amver_track_data[r][3].compareTo("") != 0) ||
                        (amver_track_data[r][4] != null) && (amver_track_data[r][4].compareTo("") != 0) ||
                        (amver_track_data[r][5] != null) && (amver_track_data[r][5].compareTo("") != 0) ||
                        (amver_track_data[r][6] != null) && (amver_track_data[r][6].compareTo("") != 0) ||
                        (amver_track_data[r][7] != null) && (amver_track_data[r][7].compareTo("") != 0) ||
                        (amver_track_data[r][8] != null) && (amver_track_data[r][8].compareTo("") != 0) )
                   {
                      JOptionPane.showMessageDialog(null, "the final route (" + amver_track_data[r][0] + ") requires only the navigation method (from the last turn point to the destination)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   } // if ( (amver_track_data[r][2] != null) etc.
                } // if (r == number_valid_routes -1)

                // not the last route
                //
                else // so not the last route
                {
                   // method (column 1) required -> null is not ok [FIRST METHOD CHECK]
                   if ((amver_track_data[r][1] == null) || (amver_track_data[r][1].compareTo("") == 0))
                   {
                      JOptionPane.showMessageDialog(null, "method route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // method (column 1) required -> null is not ok [SECOND METHOD CHECK]
                   else if ((amver_track_data[r][1].compareTo("RL") != 0) &&
                            (amver_track_data[r][1].compareTo("GC") != 0) &&
                            (amver_track_data[r][1].compareTo("COASTAL") != 0))
                   {
                      JOptionPane.showMessageDialog(null, "method route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 2 speed  optional -> null is ok
                   else if ((amver_track_data[r][2] != null) && (amver_track_data[r][2].compareTo("") != 0) && (amver_track_data[r][2].length() != 4))
                   {
                      JOptionPane.showMessageDialog(null, "speed route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 3: lat required [FIRST LAT CHECK]
                   else if((amver_track_data[r][3] == null) || (amver_track_data[r][3].compareTo("") == 0))
                   {
                      JOptionPane.showMessageDialog(null, "latitude route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 3: lat required [SECOND LAT CHECK]
                   else if(amver_track_data[r][3].length() != 7)
                   {
                      JOptionPane.showMessageDialog(null, "latitude route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 3: lat required [THIRD LAT CHECK]
                   else if ((amver_track_data[r][3].substring(2,3).compareTo("-") != 0) ||
                            (amver_track_data[r][3].substring(5,6).compareTo(" ") != 0) ||
                            (amver_track_data[r][3].substring(6,7).compareTo("N") != 0) && (amver_track_data[r][3].substring(6,7).compareTo("S") != 0) )
                   {
                      JOptionPane.showMessageDialog(null, "latitude route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 4: lon required [FIRST LON CHECK]
                   else if((amver_track_data[r][4] == null) || (amver_track_data[r][4].compareTo("") == 0))
                   {
                      JOptionPane.showMessageDialog(null, "longitude route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 4: lon required [SECOND LON CHECK]
                   else if(amver_track_data[r][4].length() != 8)
                   {
                      JOptionPane.showMessageDialog(null, "longitude route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 4: lon required [THIRD LON CHECK]
                   else if ((amver_track_data[r][4].substring(3,4).compareTo("-") != 0) ||
                            (amver_track_data[r][4].substring(6,7).compareTo(" ") != 0) ||
                            (amver_track_data[r][4].substring(7,8).compareTo("W") != 0) && (amver_track_data[r][4].substring(7,8).compareTo("E") != 0) )
                   {
                      JOptionPane.showMessageDialog(null, "longitude route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 5: ETA day required [FIRST ETA-day CHECK]
                   else if((amver_track_data[r][5] == null) || (amver_track_data[r][5].compareTo("") == 0))
                   {
                      JOptionPane.showMessageDialog(null, "ETA[day] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 5: ETA day required [SECOND ETA-day CHECK]
                   else if (amver_track_data[r][5].length() != 2)
                   {
                      JOptionPane.showMessageDialog(null, "ETA[day] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 6: ETA[hh:mm] required [FIRST ETA-hour-minute CHECK]
                   else if((amver_track_data[r][6] == null) || (amver_track_data[r][6].compareTo("") == 0))
                   {
                      JOptionPane.showMessageDialog(null, "ETA[hh:mm] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 6: ETA[hh:mm] required[SECOND ETA-hour-minute CHECK]
                   else if(amver_track_data[r][6].length() != 5)
                   {
                      JOptionPane.showMessageDialog(null, "ETA[hh:mm] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 6: ETA[hh:mm] required [THIRD ETA-hour-minute CHECK]
                   else if (amver_track_data[r][6].substring(2,3).compareTo(":") != 0)
                   {
                      JOptionPane.showMessageDialog(null, "ETA[hh:mm] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 7 ETD[day] optional -> null is ok
                   else if ((amver_track_data[r][7] != null) && (amver_track_data[r][7].compareTo("") != 0) && (amver_track_data[r][7].length() != 2))
                   {
                      JOptionPane.showMessageDialog(null, "ETD[day] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }

                   // column 8 ETD[hh:mm] optional -> null is ok
                   else if ((amver_track_data[r][8] != null) && (amver_track_data[r][8].compareTo("") != 0) && (amver_track_data[r][8].length() != 5))
                   {
                      JOptionPane.showMessageDialog(null, "ETD[hh:mm] route " + amver_track_data[r][0] + " invalid format", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      Reset_All_AMVER_SP_Vars();
                      break;
                   }
                } // else (so not the last route)
             } // for (int r = 0; r < AMVER_TRACK_ROWS; r++)
          } // if (checks_ok == true)
       } // if ((main.amver_report.equals(main.AMVER_SP)) || etc.


       //
       /////////////////// check the size (length) of the body email string
       //

       // Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length.
       // See http://support.microsoft.com/kb/208427, note the maximum URL length of 2083 characters. This is confirmed for mailto as well
       // in this article: http://support.microsoft.com/kb/279460/en-us. Also, some mail clients can also have a limit (I believe older versions
       // of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that
       // then you'll need to look at alternatives.
       //
       // Microsoft Outlook limits you to 512 characters (http://www.javapractices.com/topic/TopicAction.do?Id=242)
       if (checks_ok == true)
       {
          // NB max 2083 char (or old email programs approx max 500 char?)
          //
          if (main.amver_report.equals(main.AMVER_SP))
          {
             email_body =                   
                "AMVER/SP//" + "\n" +
                "A/" + amver_sp_vessel + "/" + amver_sp_call_sign + "/" + amver_sp_imo_number + "//" + "\n" +
                //"B/" + amver_sp_time_of_dep_day + amver_sp_time_of_dep_hour + amver_sp_time_of_dep_minute + "Z" + "//" + "\n" +
                  "B/" + amver_sp_time_of_dep_day + amver_sp_time_of_dep_hour + amver_sp_time_of_dep_minute + "Z" + " " + amver_sp_time_of_dep_month + "//" + "\n" +
             
                "E/" + amver_sp_current_course + "//" + "\n" +
                "F/" + amver_sp_remainder_speed.replace(".", "") + "//" + "\n" +
                "G/" + amver_sp_port_dep_name + "/" + amver_sp_port_dep_lat.replace(" ", "").replace("-", "") + "/" + amver_sp_port_dep_lon.replace(" ", "").replace("-", "") + "//" + "\n" +
                "I/" + amver_sp_port_des_name + "/" + amver_sp_port_des_lat.replace(" ", "").replace("-", "") + "/" + amver_sp_port_des_lon.replace(" ", "").replace("-", "") + "/" +
                       //amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + "//" + "\n";
                         amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + " " + amver_sp_time_of_des_month + "//" + "\n";

          } // if (main.amver_report.equals(main.AMVER_SP))

          if (main.amver_report.equals(main.AMVER_DR))
          {
             email_body =
                "AMVER/DR//" + "\n" +
                "A/" + amver_sp_vessel + "/" + amver_sp_call_sign + "/" + amver_sp_imo_number + "//" + "\n" +
                //"B/" + amver_sp_time_of_dep_day + amver_sp_time_of_dep_hour + amver_sp_time_of_dep_minute + "Z" + "//" + "\n" +
                  "B/" + amver_sp_time_of_dep_day + amver_sp_time_of_dep_hour + amver_sp_time_of_dep_minute + "Z" +  " " + amver_sp_time_of_dep_month + "//" + "\n" +
               
                "C/" + amver_dr_current_pos_lat.replace(" ", "").replace("-", "") + "/" + amver_dr_current_pos_lon.replace(" ", "").replace("-", "") + "//" + "\n" +
                "E/" + amver_sp_current_course + "//" + "\n" +
                "F/" + amver_sp_remainder_speed.replace(".", "") + "//" + "\n";

                // NB In TurboWin+ line I not optional for Deviation Report            
                //if (amver_sp_port_des_name.length() > 0)   // optional for DR
                //{
                   email_body += "I/" + amver_sp_port_des_name + "/" + amver_sp_port_des_lat.replace(" ", "").replace("-", "") + "/" + amver_sp_port_des_lon.replace(" ", "").replace("-", "") + "/" +
                                        //amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + "//" + "\n";
                                          amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + " " + amver_sp_time_of_des_month + "//" + "\n";
                //}
          } // if (main.amver_report.equals(main.AMVER_DR))

          if (main.amver_report.equals(main.AMVER_FR))
          {
             email_body =
                "AMVER/FR//" + "\n" +
                "A/" + amver_sp_vessel + "/" + amver_sp_call_sign + "/" + amver_sp_imo_number + "//" + "\n" +
                "K/" + amver_sp_port_des_name + "/" + amver_sp_port_des_lat.replace(" ", "").replace("-", "") + "/" + amver_sp_port_des_lon.replace(" ", "").replace("-", "") + "/" +
                       //amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + "//" + "\n";
                         amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + " " + amver_sp_time_of_des_month + "//" + "\n";

          } // if (main.amver_report.equals(main.AMVER_FR))

          if (main.amver_report.equals(main.AMVER_PR))
          {
             email_body =
                "AMVER/PR//" + "\n" +
                "A/" + amver_sp_vessel + "/" + amver_sp_call_sign + "/" + amver_sp_imo_number + "//" + "\n" +
                //"B/" + amver_sp_time_of_dep_day + amver_sp_time_of_dep_hour + amver_sp_time_of_dep_minute + "Z" + "//" + "\n" +
                "B/" + amver_sp_time_of_dep_day + amver_sp_time_of_dep_hour + amver_sp_time_of_dep_minute + "Z" + " " + amver_sp_time_of_dep_month + "//" + "\n" +
                
                "C/" + amver_dr_current_pos_lat.replace(" ", "").replace("-", "") + "/" + amver_dr_current_pos_lon.replace(" ", "").replace("-", "") + "//" + "\n" +
                "E/" + amver_sp_current_course + "//" + "\n" +
                "F/" + amver_sp_remainder_speed.replace(".", "") + "//" + "\n";

                if (amver_sp_port_des_name.length() > 0)   // optional for PR
                {
                   email_body += "I/" + amver_sp_port_des_name + "/" + amver_sp_port_des_lat.replace(" ", "").replace("-", "") + "/" + amver_sp_port_des_lon.replace(" ", "").replace("-", "") + "/" +
                                        //amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + "//" + "\n";
                                          amver_sp_time_of_des_day + amver_sp_time_of_des_hour + amver_sp_time_of_des_minute + "Z" + " " + amver_sp_time_of_des_month + "//" + "\n";
                }
          } // if (main.amver_report.equals(main.AMVER_PR))


          // L-line (if number_valid_routes = 0 -> no L-line added; e.g. in case DR L-line is optional)
          if ((main.amver_report.equals(main.AMVER_SP)) ||
              (main.amver_report.equals(main.AMVER_DR)))
          {
             for (int r = 0; r < number_valid_routes; r++)
             {
                //email_body += r + "]\n";

                // column 0: route number     [fixed by this program]
                // column 1: method           [required, ALL routes (so also the last route)]
                // column 2: speed            [optional, but not applicable for the last route ]
                // column 3: lat              [required, but not applicable for the last route]
                // column 4: lon              [required, but not applicable for the last route]
                // column 5: eta day          [required, but not applicable for the last route]
                // column 6: eta hr-min       [required, but not applicable for the last route]
                // column 7: etd day          [only required if lay over, but not applicable for the last route]
                // column 8: etd hr-min       [only required if lay over, but not applicable for the last route]

                if ((amver_track_data[r][1] != null) && (amver_track_data[r][1].compareTo("") != 0))
                {
                   // in all L-lines "method" required (ALSO in the final L-line)
                   email_body += "L/" + amver_track_data[r][1];

                   // speed (optional)
                   if ((amver_track_data[r][2] != null) && (amver_track_data[r][2].compareTo("") != 0))
                   {
                      email_body += "/" + amver_track_data[r][2].replace(".", "");
                   }

                   // lat (of next turning point)
                   if ((amver_track_data[r][3] != null) && (amver_track_data[r][3].compareTo("") != 0))
                   {
                      email_body += "/" + amver_track_data[r][3].replace(" ", "").replace("-", "");
                   }

                   // lon (of next turning point)
                   if ((amver_track_data[r][4] != null) && (amver_track_data[r][4].compareTo("") != 0))
                   {
                      email_body += "/" + amver_track_data[r][4].replace(" ", "").replace("-", "");
                   }

                   // eta day (of next turning point)
                   if ((amver_track_data[r][5] != null) && (amver_track_data[r][5].compareTo("") != 0))
                   {
                      email_body += "/" + amver_track_data[r][5];
                   }

                   // eta hr:min (of next turning point) [eta-day and eta-hr:min will be combined]
                   if ((amver_track_data[r][6] != null) && (amver_track_data[r][6].compareTo("") != 0))
                   {
                      email_body += amver_track_data[r][6].replace(":", "") + "Z";
                   }

                   // etd day (lay over)
                   if ((amver_track_data[r][7] != null) && (amver_track_data[r][7].compareTo("") != 0))
                   {
                      email_body += "/" + amver_track_data[r][7];
                   }

                   // etd hr:min (lay over) [etd-day and etd-hr:min will be combined]
                   if ((amver_track_data[r][8] != null) && (amver_track_data[r][8].compareTo("") != 0))
                   {
                      email_body += amver_track_data[r][8].replace(":", "") + "Z";
                   }

                   email_body += "//" + "\n";

                } // if (amver_track_data[r][1].compareTo("") != 0) etc.
             } // for (int r = 0; r < number_valid_routes; r++)
          } // if ((main.amver_report.equals(main.AMVER_SP)) || etc.


          // M-line; radio guard
          if ((main.amver_report.equals(main.AMVER_SP)) ||
              (main.amver_report.equals(main.AMVER_DR)) ||
              (main.amver_report.equals(main.AMVER_PR)))
          {
             // M-line; radio guard
             if (amver_sp_radio_guard.length() > 0)
             {
                email_body += "M/" + amver_sp_radio_guard + "//" + "\n";
             }
          }

          // V-line;  medical
          if (main.amver_report.equals(main.AMVER_SP))
          {
             boolean medical_present = false;
             for (int k = 0; k < 4; k++)
             {
                if (amver_sp_medical[k] == true)
                {
                   email_body += "V";
                   medical_present = true;
                   break;
                }
             } // for (int k = 0; k < 4; k++)

             if (medical_present)
             {
                if (amver_sp_medical[0] == true)
                {
                   email_body += "/" + NONE;
                }
                if (amver_sp_medical[1] == true)
                {
                   email_body += "/" + NURSE;
                }
                if (amver_sp_medical[2] == true)
                {
                   email_body += "/" + PA;
                }
                if (amver_sp_medical[3] == true)
                {
                   email_body += "/" + MD;
                }

                email_body += "//" + "\n";
             } // if (medical_present)
          } // if (main.amver_report.equals(main.AMVER_SP))

          
          // X-line; remarks
          if ((main.amver_report.equals(main.AMVER_SP)) ||
              (main.amver_report.equals(main.AMVER_DR)) ||
              (main.amver_report.equals(main.AMVER_FR)) ||
              (main.amver_report.equals(main.AMVER_PR)))
          {
             if (amver_sp_remarks.length() > 0)
             {
                email_body += "X/" + amver_sp_remarks + "//" + "\n";
             }         
          }
          
          
          // Y-line; relay
          if ((main.amver_report.equals(main.AMVER_SP)) ||
              (main.amver_report.equals(main.AMVER_DR)) ||
              (main.amver_report.equals(main.AMVER_FR)) ||
              (main.amver_report.equals(main.AMVER_PR)))
          {
             // Y-line; relay
             boolean relay_present = false;
             for (int k = 0; k < 4; k++)
             {
                if (amver_sp_relay[k] == true)
                {
                   email_body += "Y";
                   relay_present = true;
                   break;
                }
             } // for (int k = 0; k < 4; k++)
             
             if (relay_present)
             {
                if (amver_sp_relay[0] == true)
                {
                   email_body += "/" + JASREP;
                }
                if (amver_sp_relay[1] == true)
                {
                   email_body += "/" + AUSREP;
                }
                if (amver_sp_relay[2] == true)
                {
                   email_body += "/" + CHILREP;
                }
                if (amver_sp_relay[3] == true)
                {
                   email_body += "/" + MAREP;
                }

                email_body += "//" + "\n";
             } // if (relay_present)
          } // if (main.amver_report.equals(main.AMVER_SP))

          
          // close the amver message (the same for SP, DR, FR and PR)
          email_body += "Z/EOR//" + "\n";

       } // if (checks_ok == true)

       
       if (checks_ok == true)
       {
          email_body_lengte = email_body.length();
          //JOptionPane.showMessageDialog(null, email_body_lengte, main.APPLICATION_NAME + " email_body lengte", JOptionPane.WARNING_MESSAGE);

          // always the email_body text to system clipboard (if user clicked the 'E-mail' button or clicked the 'Clipboard' button)
          //
          Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
          StringSelection selection = new StringSelection(email_body);
          clipboard.setContents(selection, null);
          
          if (invoke_email_program == false)                   // so user clicked the 'Clipboard button'
          {
             JOptionPane.showMessageDialog(null, "AMVER formatted message written to Clipboard", main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
          }
       } // if (checks_ok == true)


       //
       /////////////// invoke default (on the user's computer) e-mail program (this section only if user clicked the 'E-mail' button)
       //
       if (checks_ok == true && invoke_email_program == true)   // so user clicked the 'E-mail button'
       {
          new SwingWorker<Void, Void>()
          {
             @Override
             protected Void doInBackground() throws Exception
             {
                /*
                //
                // Version 6 of the Java Platform, Standard Edition (Java SE), continues to narrow the gap with
                // new system tray functionality, better  print support for JTable, and now the Desktop API
                //(java.awt.Desktop API).
                //
                // Use the Desktop.isDesktopSupported() method to determine whether the Desktop API is available.
                // On the Solaris Operating System and the Linux platform, this API is dependent on Gnome libraries.
                // If those libraries are unavailable, this method will return false. After determining that the API is
                // supported, that is, the isDesktopSupported() returns true, the application can retrieve a Desktop
                // instance using the static method getDesktop().
                //
                */
                Desktop desktop = null;

                // Before more Desktop API is used, first check
                // whether the API is supported by this particular
                // virtual machine (VM) on this particular host.
                if (Desktop.isDesktopSupported())
                {
                   desktop = Desktop.getDesktop();
                   try
                   {
                      String email_subject = "Amver Sailing plan";
                      String email_txt = "";
                      if (email_body_lengte < MAX_CHAR_AMVER_EMAIL_BODY)
                      {
                         email_txt = AMVER_EMAIL_ADDRESS + "?subject=" + email_subject  + "&body=" + email_body;
                      }
                      else
                      {
                         email_txt = AMVER_EMAIL_ADDRESS + "?subject=" + email_subject/*  + "&body="*/;
                         JOptionPane.showMessageDialog(null, "Paste coded amver message from clipboard (right click in e-mail body and select Paste)", main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);
                      } // else

                      URI uriMailTo = null;
                      try
                      {
                         uriMailTo = new URI("mailto", email_txt, null);
                      }
                      catch (URISyntaxException ex)
                      {
                         JOptionPane.showMessageDialog(null, "Error invoking default Email program (URISyntaxException)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                      }

                      desktop.mail(uriMailTo);

                   } // try
                   catch (IOException ex)
                   {
                      // Also here if body text exceeds limit number of char

                      JOptionPane.showMessageDialog(null, "Error invoking default Email program", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                   }
                } // if (Desktop.isDesktopSupported())
                else
                {
                   JOptionPane.showMessageDialog(null, "Error invoking default Email program (method not supported on this computer system)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                } // else

                return null;

             } // protected Void doInBackground() throws Exception

             @Override
             protected void done()
             {
                // nothing
             } // protected void done()

          }.execute(); // new SwingWorker<Void, Void>()
       } // if (checks_ok == true)


       //
       /////////////// save sailing plan to logs dir
       //
       //if ((checks_ok == true) && (main.amver_report.equals(main.AMVER_SP)))
       //{
       //   String info = "Do you want to save this sailingplan for future use?";
       //   int reply = JOptionPane.showConfirmDialog(null, info, main.APPLICATION_NAME, JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
       //   if (reply == JOptionPane.YES_OPTION)
       //   {
       //      //doorgaan = false;
       //      save_amver_sp();
       //   }
       //} // if ((checks_ok == true) etc.
       
      // ALLEEN BIJ TESTEN COMMENTEN
      //if (checks_ok == true)
      //{
      //   setVisible(false);
      //   dispose();
      //} // if (checks_ok == true)
    }//GEN-LAST:event_OK_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void save_amver_sp()
   {
      boolean doorgaan;
      String amver_dir;
      

      // NOTE: stopCellEditing() is called automatically when you hit [Enter] or [Tab] on a cell indicating the end of editing
      //       But we want it to stop if the user click the OK button, if fuction stopCellEditing() is not called
      //       it is possible that the last changes/inserts of a cell, if this cell has still the focus, are ignored
      //       when pressing the OK button
      if ((main.amver_report.equals(main.AMVER_SP)) ||  // L-line
          (main.amver_report.equals(main.AMVER_DR)))
      {
         stopCellEditing();
      }


      Reset_All_AMVER_SP_Vars();

      // read all the data from the amver form
      read_sp_data_from_amver_form();

      // pop-up the file/directory chooser dialog box
      //JFileChooser chooser = new JFileChooser();                                    // Constructs a JFileChooser pointing to the user's default directory. This default depends on the operating system. It is typically the "My Documents" folder on Windows, and the user's home directory on Unix.
      if (main.offline_mode == true)
      {
         // NB amver dir fixed for offline mode (sub dir of main dir -main dir is the dir where jar file is located-)
         amver_dir = main.user_dir + java.io.File.separator + main.OFFLINE_AMVER_DIR;
      } 
      else // web mode
      {
         amver_dir = null;    // NB Passing in a null string causes the file chooser to point to the user's default directory (It is typically the "My Documents" folder on Windows)
      }   
      JFileChooser chooser = new JFileChooser(amver_dir);
      chooser.setDialogTitle("Save Amver Sailing Plan");
      chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);                        // now the user can only select files (directories and files are still visible)
      int result = chooser.showSaveDialog(myamversailingplan.this);

      if (result == JFileChooser.APPROVE_OPTION)
      {
         sp_saved_file = chooser.getSelectedFile().getPath();                       // getSelectedFile() -> in this case returns not a file but a directory !

         if (chooser.getSelectedFile().exists ())
         {
            int response = JOptionPane.showConfirmDialog (null, "Overwrite existing file?", main.APPLICATION_NAME + " confirm overwrite", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.CANCEL_OPTION)
            {
               doorgaan = false;
               //return false;
            }
            else
            {
               doorgaan = true;
            }
         }
         else
         {
            doorgaan = true;
         }


         if (doorgaan == true)
         {
            new SwingWorker<Void, Void>()
            {
               @Override
               protected Void doInBackground() throws Exception
               {
                  try
                  {
                     // open output file
                     //String sp_saved_file = main.logs_dir + java.io.File.separator + "amver_sp.txt";
                     BufferedWriter out = new BufferedWriter(new FileWriter(sp_saved_file));

                     out.write(AMVER_SP_VESSEL + amver_sp_vessel);
                     out.newLine();   // newLine(): write a line separator. The line separator string is defined by the system property line.separator, and is not necessarily a single newline ('\n') character.

                     out.write(AMVER_SP_CALL_SIGN + amver_sp_call_sign);
                     out.newLine();

                     out.write(AMVER_SP_IMO_NUMBER + amver_sp_imo_number);
                     out.newLine();
                     
                     out.write(AMVER_SP_DEP_DAY + amver_sp_time_of_dep_day);
                     out.newLine();

                     out.write(AMVER_SP_DEP_HOUR + amver_sp_time_of_dep_hour);
                     out.newLine();

                     out.write(AMVER_SP_DEP_MINUTE + amver_sp_time_of_dep_minute);
                     out.newLine();
                     
                     out.write(AMVER_SP_DEP_MONTH + amver_sp_time_of_dep_month);
                     out.newLine();

                     out.write(AMVER_SP_CURRENT_COURSE + amver_sp_current_course);
                     out.newLine();

                     out.write(AMVER_SP_REMAINDER_SPEED + amver_sp_remainder_speed);
                     out.newLine();

                     out.write(AMVER_SP_PORT_DEP_NAME + amver_sp_port_dep_name);
                     out.newLine();

                     out.write(AMVER_SP_PORT_DEP_LAT + amver_sp_port_dep_lat);
                     out.newLine();

                     out.write(AMVER_SP_PORT_DEP_LON + amver_sp_port_dep_lon);
                     out.newLine();

                     out.write(AMVER_SP_PORT_DES_NAME + amver_sp_port_des_name);
                     out.newLine();

                     out.write(AMVER_SP_PORT_DES_LAT + amver_sp_port_des_lat);
                     out.newLine();

                     out.write(AMVER_SP_PORT_DES_LON + amver_sp_port_des_lon);
                     out.newLine();

                     out.write(AMVER_SP_TIME_OF_DES_DAY + amver_sp_time_of_des_day);
                     out.newLine();

                     out.write(AMVER_SP_TIME_OF_DES_HR + amver_sp_time_of_des_hour);
                     out.newLine();

                     out.write(AMVER_SP_TIME_OF_DES_MIN + amver_sp_time_of_des_minute);
                     out.newLine();
                     
                     out.write(AMVER_SP_TIME_OF_DES_MON + amver_sp_time_of_des_month);
                     out.newLine();

                     // route info (array)
                     for (int r = 0; r < AMVER_TRACK_ROWS; r++)
                     {
                        for (int c = 0; c < AMVER_TRACK_COLUMNS; c++)
                        {
                           if ((amver_track_data[r][c] != null) && (amver_track_data[r][c].compareTo("") != 0))
                           {
                              if (c != 0)   // c:0 contains only route number
                              {
                                 out.write(AMVER_SP_TRACK);
                                 out.write("[" + Integer.toString(r) + "]");
                                 out.write("[" + Integer.toString(c) + "]");

                                 out.write(amver_track_data[r][c]);
                                 out.newLine();
                              } // if (c != 0)
                           } // if ((amver_track_data[r][c] != null) etc.
                        }
                     } // for (int r = 0; r < AMVER_TRACK_ROWS; r++)

                     out.write(AMVER_SP_RADIO_GUARD + amver_sp_radio_guard);
                     out.newLine();

                     if (amver_sp_medical[0] == true)
                     {
                        out.write(AMVER_SP_MEDICAL + NONE);
                        out.newLine();
                     }
                     if (amver_sp_medical[1] == true)
                     {
                        out.write(AMVER_SP_MEDICAL + NURSE);
                        out.newLine();
                     }
                     if (amver_sp_medical[2] == true)
                     {
                        out.write(AMVER_SP_MEDICAL + PA);
                        out.newLine();
                     }
                     if (amver_sp_medical[3] == true)
                     {
                        out.write(AMVER_SP_MEDICAL + MD);
                        out.newLine();
                     }


                     if (amver_sp_relay[0] == true)
                     {
                        out.write(AMVER_SP_RELAY + JASREP);
                        out.newLine();
                     }
                     if (amver_sp_relay[1] == true)
                     {
                        out.write(AMVER_SP_RELAY + AUSREP);
                        out.newLine();
                     }
                     if (amver_sp_relay[2] == true)
                     {
                        out.write(AMVER_SP_RELAY + CHILREP);
                        out.newLine();
                     }
                     if (amver_sp_relay[3] == true)
                     {
                        out.write(AMVER_SP_RELAY + MAREP);
                        out.newLine();
                     }

                     // close output file
                     out.close();

                     // user feedback
                     String info = "Amver Sailing Plan written to: " + sp_saved_file;
                     info += "\n NOTE Sailing Plan was not saved in AMVER format but in an internal format for future (import) use";
                     JOptionPane.showMessageDialog(null, info, main.APPLICATION_NAME + " info", JOptionPane.INFORMATION_MESSAGE);

                  } // try
                  catch (IOException | HeadlessException e)
                  {
                     //JOptionPane.showMessageDialog(null, "unable to write to: " + sp_saved_file, main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                     JOptionPane.showMessageDialog(null, "unable to write to: " + "sp_saved_file", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  } // catch

                  return null;

               } // protected Void doInBackground() throws Exception
            }.execute(); // new SwingWorker<Void, Void>()
         } // if (doorgaan == true)
      } // if (result == JFileChooser.APPROVE_OPTION
   }




   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Cancel_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_button_actionPerformed
       // TODO add your handling code here:

       /* close input page */
       setVisible(false);
       dispose();
    }//GEN-LAST:event_Cancel_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void import_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_button_actionPerformed
       // TODO add your handling code here:

      boolean doorgaan   = true;
      String amver_dir;
      
      
      // initialisation
      import_file = "";

      //String info = "You can only import previous saved sailing plans";
      //int reply = JOptionPane.showConfirmDialog(null, info, main.APPLICATION_NAME, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      //if (reply == JOptionPane.CANCEL_OPTION)
      //{
      //   doorgaan = false;
      //}

      if (doorgaan == true)
      {
         // pop-up the file chooser dialog box
         //JFileChooser chooser = new JFileChooser();
         if (main.offline_mode == true)
         {
            // NB amver dir fixed for offline mode (sub dir of main dir -main dir is the dir where jar file is located-)
            amver_dir = main.user_dir + java.io.File.separator + main.OFFLINE_AMVER_DIR;
         } 
         else // web mode
         {
            amver_dir = null;    // NB Passing in a null string causes the file chooser to point to the user's default directory (It is typically the "My Documents" folder on Windows)
         }   
         JFileChooser chooser = new JFileChooser(amver_dir);
         chooser.setDialogTitle("Import Amver Sailing Plan");
         
         int result = chooser.showOpenDialog(myamversailingplan.this);
         if (result == JFileChooser.APPROVE_OPTION)
         {
            import_file = chooser.getSelectedFile().getPath();

            new SwingWorker<Void, Void>()
            {
               @Override
               protected Void doInBackground() throws Exception
               {
                  String file_line;

                  /* read all lines from imported sailing plan file */
                  try
                  {
                     BufferedReader in = new BufferedReader(new FileReader(import_file));

                     while((file_line = in.readLine()) != null)
                     {
                        read_sp_data_from_import_file(file_line);

                     } // while((file_line = in.readLine()) != null)
                     in.close();
                  } // try
                  catch (Exception e)
                  {
                     JOptionPane.showMessageDialog(null, "Error reading saling plan import file (" + import_file + ")",  main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
                  } // catch

                  return null;

               } // protected Void doInBackground() throws Exception

               @Override
               protected void done()
               {
                  insert_values_in_fields();
               }
            }.execute(); // new SwingWorker<Void, Void>()

         } // if (result == JFileChooser.APPROVE_OPTION
      } // if (doorgaan == true)

    }//GEN-LAST:event_import_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void save_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_button_actionPerformed
       // TODO add your handling code here:

       save_amver_sp();
    }//GEN-LAST:event_save_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void AMVER_web_link_mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AMVER_web_link_mouseClicked
       // TODO add your handling code here:

       new SwingWorker<Void, Void>()
       {
          @Override
          protected Void doInBackground() throws Exception
          {
             Desktop desktop = null;

             // Before more Desktop API is used, first check
             // whether the API is supported by this particular
             // virtual machine (VM) on this particular host.
             if (Desktop.isDesktopSupported())
             {
                desktop = Desktop.getDesktop();
                URI uri = null;
                try
                {
                   String http_adres = "www.amver.com"; // help_dir set in e.g. ch1_image_mouseClicked()
                   uri = new URI(http_adres);
                   desktop.browse(uri);
                }
                catch(IOException | URISyntaxException ioe) { }
             } // if (Desktop.isDesktopSupported())
             else
             {
                JOptionPane.showMessageDialog(null, "Error invoking default web browser (-Desktop-method not supported on this computer system)", main.APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
             } // else

             return null;

          } // protected Void doInBackground() throws Exception
       }.execute(); // new SwingWorker<Void, Void>()

    }//GEN-LAST:event_AMVER_web_link_mouseClicked


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void AMVER_web_link_mouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AMVER_web_link_mouseEntered
       // TODO add your handling code here:

       setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_AMVER_web_link_mouseEntered


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void AMVER_web_link_mouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AMVER_web_link_mouseExited
       // TODO add your handling code here:

       setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_AMVER_web_link_mouseExited



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
    private void Closed_actionPerformed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Closed_actionPerformed
       // TODO add your handling code here:

       main.amver_report = "";                   // reset (will be checed if opening ather AMVER form)
    }//GEN-LAST:event_Closed_actionPerformed

    
    
  /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Clipboard_button_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clipboard_button_actionPerformed
      // TODO add your handling code here:
      
      // NOTE: stopCellEditing() is called automatically when you hit [Enter] or [Tab] on a cell indicating the end of editing
      //       But we want it to stop if the user click the OK button, if fuction stopCellEditing() is not called
      //       it is possible that the last changes/inserts of a cell, if this cell has still the focus, are ignored
      //       when pressing the OK button
      if ((main.amver_report.equals(main.AMVER_SP)) ||  // L-line
          (main.amver_report.equals(main.AMVER_DR)))
      {
         stopCellEditing();
      }

      // initialisation
      Reset_All_AMVER_SP_Vars();

      read_sp_data_from_amver_form();          // for all 4 kinds of AMVER reports

      boolean invoke_email_program = false;
      check_and_clipboard_email_amver_report(invoke_email_program);      
      
      
   }//GEN-LAST:event_Clipboard_button_actionPerformed


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void read_sp_data_from_import_file(String import_record)
   {
      Boolean invalid = false;
      int ro = 0;
      int co = 0;

      if (import_record.indexOf(AMVER_SP_VESSEL) != -1)
      {
         amver_sp_vessel = import_record.substring(SP_IMPORT_FILE_POS_INHOUD); // zo ja, dan staat op een bepaalde pos (achter de : ) de inhoud
      }
      else if (import_record.indexOf(AMVER_SP_CALL_SIGN) != -1)
      {
         amver_sp_call_sign = import_record.substring(SP_IMPORT_FILE_POS_INHOUD); 
      }
      else if (import_record.indexOf(AMVER_SP_IMO_NUMBER) != -1)
      {
         amver_sp_imo_number = import_record.substring(SP_IMPORT_FILE_POS_INHOUD); 
      }
      else if (import_record.indexOf(AMVER_SP_DEP_DAY) != -1)
      {
         amver_sp_time_of_dep_day = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_DEP_HOUR) != -1)
      {
         amver_sp_time_of_dep_hour = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_DEP_MINUTE) != -1)
      {
         amver_sp_time_of_dep_minute = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_DEP_MONTH) != -1)
      {
         amver_sp_time_of_dep_month = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_CURRENT_COURSE) != -1)
      {
         amver_sp_current_course = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_REMAINDER_SPEED) != -1)
      {
         amver_sp_remainder_speed = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_PORT_DEP_NAME) != -1)
      {
         amver_sp_port_dep_name  = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_PORT_DEP_LAT) != -1)
      {
         amver_sp_port_dep_lat = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_PORT_DEP_LON) != -1)
      {
         amver_sp_port_dep_lon = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_PORT_DES_NAME) != -1)
      {
         amver_sp_port_des_name = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_PORT_DES_LAT) != -1)
      {
         amver_sp_port_des_lat = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_PORT_DES_LON) != -1)
      {
         amver_sp_port_des_lon = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_TIME_OF_DES_DAY) != -1)
      {
         amver_sp_time_of_des_day = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_TIME_OF_DES_HR) != -1)
      {
         amver_sp_time_of_des_hour = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_TIME_OF_DES_MIN) != -1)
      {
         amver_sp_time_of_des_minute = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_TIME_OF_DES_MON) != -1)
      {
         amver_sp_time_of_des_month = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }


      if (import_record.indexOf(AMVER_SP_TRACK) != -1)
      {
         String hulp_track = import_record.substring(SP_IMPORT_FILE_POS_INHOUD); // eg: [0][1]COASTAL

         int index_1_links  = hulp_track.indexOf("[", 0);
         int index_1_rechts = hulp_track.indexOf("]", 0);
         int index_2_links  = hulp_track.indexOf("[", index_1_rechts +1);
         int index_2_rechts = hulp_track.indexOf("]", index_1_rechts +1);

         String str_index_1 = hulp_track.substring(index_1_links +1, index_1_rechts);
         String str_index_2 = hulp_track.substring(index_2_links +1, index_2_rechts);

/////////////////////////////

//JOptionPane.showMessageDialog(null, str_index_1, main.APPLICATION_NAME + " TEST", JOptionPane.INFORMATION_MESSAGE);
//JOptionPane.showMessageDialog(null, str_index_2, main.APPLICATION_NAME + " TEST", JOptionPane.INFORMATION_MESSAGE);

///////////////////////////////


         try
         {
            ro = Integer.parseInt(str_index_1);
         }
         catch (NumberFormatException e)
         {
            invalid = true;
         }

         try
         {
            co = Integer.parseInt(str_index_2);
         }
         catch (NumberFormatException e)
         {
            invalid = true;
         }

         if (invalid == false)
         {
            amver_track_data[ro][co] = hulp_track.substring(index_2_rechts + 1);// eg: COASTAL
         }

      } // if (import_record.indexOf(AMVER_SP_TRACK) != -1)


      else if (import_record.indexOf(AMVER_SP_RADIO_GUARD) != -1)
      {
         amver_sp_radio_guard = import_record.substring(SP_IMPORT_FILE_POS_INHOUD);
      }
      else if (import_record.indexOf(AMVER_SP_MEDICAL) != -1)
      {
         if (import_record.indexOf(NONE) != -1)
         {
            amver_sp_medical[0] = true;
         }
         else if (import_record.indexOf(NURSE) != -1)
         {
            amver_sp_medical[1] = true;
         }
         else if (import_record.indexOf(PA) != -1)
         {
            amver_sp_medical[2] = true;
         }
         else if (import_record.indexOf(MD) != -1)
         {
            amver_sp_medical[3] = true;
         }
      } // else if (import_record.indexOf(AMVER_SP_MEDICAL) != -1)
      else if (import_record.indexOf(AMVER_SP_RELAY) != -1)
      {
         if (import_record.indexOf(JASREP) != -1)
         {
            amver_sp_relay[0] = true;
         }
         else if (import_record.indexOf(AUSREP) != -1)
         {
            amver_sp_relay[1] = true;
         }
         else if (import_record.indexOf(CHILREP) != -1)
         {
            amver_sp_relay[2] = true;
         }
         else if (import_record.indexOf(MAREP) != -1)
         {
            amver_sp_relay[3] = true;
         }
      } // else if (import_record.indexOf(AMVER_SP_RELAY) != -1)

   }



   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void set_ship_name_and_call_sign()
   {
      if ((main.ship_name.compareTo("") != 0) && (main.ship_name != null))
      {   
         jTextField1.setText(main.ship_name);
      }
      
      if ((main.call_sign.compareTo("") != 0) && (main.call_sign != null))
      {
         jTextField2.setText(main.call_sign);
      }
      
      if ((main.imo_number.compareTo("") != 0) && (main.imo_number != null))
      {
         jTextField20.setText(main.imo_number);
      }
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void initParameters()
   {
      // --- NB I-line will be K-line in arrival report!!! ---

      // for ALL reports
      set_ship_name_and_call_sign();

      if (main.amver_report.equals(main.AMVER_SP))
      {
         // NB title set as below is not necessary because by default set (see disign)
         // this.setTitle("Amver Sailing Plan");

         // C line (current position)
         disable_C_line();

         // L-line; fixed route numbers (column 0; note column number 0 is not editable)
         for (int r = 0; r < AMVER_TRACK_ROWS; r++)
         {
            jTable1.setValueAt(Integer.toString(r +1), r, 0);     // array number start at 0 but route number at 1
         }

      } // if (main.amver_report.equals(main.AMVER_SP))

      else if (main.amver_report.equals(main.AMVER_DR))
      {
         this.setTitle("Amver Deviation Report");

         jButton4.setVisible(false);                              // Save

         // B-line
         jLabel4.setText("time of position [UTC]");

         // G line (port of departure name + position)
         disable_G_line();

         // V-line; medical
         disable_V_line();

         // L-line; fixed route numbers (column 0; note column number 0 is not editable)
         for (int r = 0; r < AMVER_TRACK_ROWS; r++)
         {
            jTable1.setValueAt(Integer.toString(r +1), r, 0);     // array number start at 0 but route number at 1
         }
      } // else if(main.amver_report.equals(main.AMVER_DR))

      else if (main.amver_report.equals(main.AMVER_FR))           // arrival report
      {
         this.setTitle("Amver Arrival Report");

         jButton4.setVisible(false);                              // Save

         // B-line
         disable_B_line();

         // C-line
         disable_C_line();
         
         // E-line
         disable_E_line();

         // F-line
         disable_F_line();

         // G-line
         disable_G_line();

         // K-line
         jLabel15.setText("arrived [UTC]");

         // I- line
         // NB will be K-line in this arrival report

         // L-line
         disable_L_line();

         // M-line
         disable_M_line();

         // V-line
         disable_V_line();

      } // else if(main.amver_report.equals(main.AMVER_FR))

      else if (main.amver_report.equals(main.AMVER_PR))
      {
         this.setTitle("Amver Position Report");

         jButton4.setVisible(false);                           // Save

         // B-line
         jLabel4.setText("time of position [UTC]");

         // G-line
         disable_G_line();

         // I-line (optional for PR)
         jLabel14.setText("destination*");
         jLabel15.setText("ETA destination [UTC]*");

         // L-line
         disable_L_line();

         // V-line
         disable_V_line();

      } // else if(main.amver_report.equals(main.AMVER_PR))
   }


   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void insert_values_in_fields()
   {
      // vessel (ship name)
      if (amver_sp_vessel.compareTo("") != 0)
      {
         jTextField1.setText(amver_sp_vessel);
      }
      else if (main.ship_name.compareTo("") != 0)
      {
         jTextField1.setText(main.ship_name.trim());
      }

      // call sign
      if (amver_sp_call_sign.compareTo("") != 0)
      {
         jTextField2.setText(amver_sp_call_sign);
      }
      else if (main.call_sign.compareTo("") != 0)
      {
         jTextField2.setText(main.call_sign.trim());
      }

      // IMO number
      if (amver_sp_imo_number.compareTo("") != 0)
      {
         jTextField20.setText(amver_sp_imo_number);
      }
      else if (main.imo_number.compareTo("") != 0)
      {
         jTextField20.setText(main.imo_number.trim());
      }
      
      if (amver_sp_time_of_dep_day.compareTo("") != 0)
      {
         jTextField3.setText(amver_sp_time_of_dep_day);
      }
      if (amver_sp_time_of_dep_hour.compareTo("") != 0)
      {
         jTextField4.setText(amver_sp_time_of_dep_hour);
      }
      if (amver_sp_time_of_dep_minute.compareTo("") != 0)
      {
         jTextField5.setText(amver_sp_time_of_dep_minute);
      }
      if (amver_sp_time_of_dep_month.compareTo("") != 0)
      {
         jTextField22.setText(amver_sp_time_of_dep_month);
      }

      if (amver_sp_current_course.compareTo("") != 0)
      {
         jTextField6.setText(amver_sp_current_course);
      }
      if (amver_sp_remainder_speed.compareTo("") != 0)
      {
         jTextField7.setText(amver_sp_remainder_speed);
      }

      if (amver_sp_port_dep_name.compareTo("") != 0)
      {
         jTextField8.setText(amver_sp_port_dep_name);
      }
      if (amver_sp_port_dep_lat.compareTo("") != 0)
      {
         jTextField9.setText(amver_sp_port_dep_lat);
      }
      if (amver_sp_port_dep_lon.compareTo("") != 0)
      {
         jTextField10.setText(amver_sp_port_dep_lon);
      }

      if (amver_sp_port_des_name.compareTo("") != 0)
      {
         jTextField11.setText(amver_sp_port_des_name);
      }
      if (amver_sp_port_des_lat.compareTo("") != 0)
      {
         jTextField12.setText(amver_sp_port_des_lat);
      }
      if (amver_sp_port_des_lon.compareTo("") != 0)
      {
         jTextField13.setText(amver_sp_port_des_lon);
      }

      if (amver_sp_time_of_des_day.compareTo("") != 0)
      {
         jTextField14.setText(amver_sp_time_of_des_day);
      }
      if (amver_sp_time_of_des_hour.compareTo("") != 0)
      {
         jTextField15.setText(amver_sp_time_of_des_hour);
      }
      if (amver_sp_time_of_des_minute.compareTo("") != 0)
      {
         jTextField16.setText(amver_sp_time_of_des_minute);
      }
      if (amver_sp_time_of_des_month.compareTo("") != 0)
      {
         jTextField23.setText(amver_sp_time_of_des_month);
      }

      for (int r = 0; r < AMVER_TRACK_ROWS; r++)
      {
         for (int c = 0; c < AMVER_TRACK_COLUMNS; c++)
         {
            if ((amver_track_data[r][c] != null) /*&& (amver_track_data[r][1].compareTo("") != 0)*/)
            {
               jTable1.setValueAt(amver_track_data[r][c], r, c);
            }
         }
      } // for (int r = 0; r < AMVER_TRACK_ROWS; r++)

      if (amver_sp_radio_guard.compareTo("") != 0)
      {
         jTextField17.setText(amver_sp_radio_guard);
      }

      if (amver_sp_medical[0] != null)
      {
         if (amver_sp_medical[0] == true)
         {
            jCheckBox1.setSelected(true);
         }
      }
      if (amver_sp_medical[1] != null)
      {
         if (amver_sp_medical[1] == true)
         {
            jCheckBox2.setSelected(true);
         }
      }
      if (amver_sp_medical[2] != null)
      {
         if (amver_sp_medical[2] == true)
         {
            jCheckBox3.setSelected(true);
         }
      }
      if (amver_sp_medical[3] != null)
      {
         if (amver_sp_medical[3] == true)
         {
            jCheckBox4.setSelected(true);
         }
      }

      if (amver_sp_relay[0] != null)
      {
         if (amver_sp_relay[0] == true)
         {
            jCheckBox5.setSelected(true);
         }
      }
      if (amver_sp_relay[1] != null)
      {
         if (amver_sp_relay[1] == true)
         {
            jCheckBox6.setSelected(true);
         }
      }
      if (amver_sp_relay[2] != null)
      {
         if (amver_sp_relay[2] == true)
         {
            jCheckBox7.setSelected(true);
         }
      }
      if (amver_sp_relay[3] != null)
      {
         if (amver_sp_relay[3] == true)
         {
            jCheckBox8.setSelected(true);
         }
      }


      //
      // For sailing plan disable a few fields
      //
      if (main.amver_report.equals(main.AMVER_SP))
      {
         jTextField3.setText("");                 // time of position (day)
         jTextField4.setText("");                 // time of position (hour)
         jTextField5.setText("");                 // time of position (minute)
         jTextField22.setText("");                // time of position (month)

         jTextField14.setText("");                // ETA destination (day)
         jTextField15.setText("");                // ETA destination (hour)
         jTextField16.setText("");                // ETA destination (minute)
         jTextField23.setText("");                // ETA destination (month)
      }
      
      
      //
      // For deviation report disable a few fields
      //
      if (main.amver_report.equals(main.AMVER_DR))
      {
         jTextField3.setText("");                 // time of position (day)
         jTextField4.setText("");                 // time of position (hour)
         jTextField5.setText("");                 // time of position (minute)
         jTextField22.setText("");                // time of position (month)
         
         jTextField18.setText("");                // current position (lat)
         jTextField19.setText("");                // current position (long)

         jTextField6.setText("");                 // current course

         jTextField7.setText("");                 // speed remainder voyage

         jTextField14.setText("");                // ETA destination (day)
         jTextField15.setText("");                // ETA destination (hour)
         jTextField16.setText("");                // ETA destination (minute)
         jTextField23.setText("");                // ETA destination (month)
      } // if (main.amver_report.equals(main.AMVER_DR))


      //
      // For arrival report disable a few fields
      //
      if (main.amver_report.equals(main.AMVER_FR))
      {
         jTextField14.setText("");                // arrived (= ETA desitination (day))
         jTextField15.setText("");                // arrived (= ETA desitination (hour))
         jTextField16.setText("");                // arrived (= ETA desitination (minute))
         jTextField23.setText("");               // arrived (= ETA desitination (month))
      } // if (main.amver_report.equals(main.AMVER_FR))



      //
      // For position report disable a few fields
      //
      if (main.amver_report.equals(main.AMVER_PR))
      {
         jTextField3.setText("");                 // time of position (day)
         jTextField4.setText("");                 // time of position (hour)
         jTextField5.setText("");                 // time of position (minute)
         jTextField22.setText("");                // time of position (month)
         
         jTextField18.setText("");                 // current position
         jTextField19.setText("");                 // current position

         jTextField6.setText("");                 // current course

      } // if (main.amver_report.equals(main.AMVER_PR))




   }

   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_B_line()
   {
      jLabel4.setVisible(false);
      jLabel5.setVisible(false);
      jLabel6.setVisible(false);
      jLabel7.setVisible(false);
      jLabel26.setVisible(false);
      jLabel29.setVisible(false);
      jLabel30.setVisible(false);
      jLabel37.setVisible(false);
      jLabel42.setVisible(false);

      jTextField3.setVisible(false);
      jTextField4.setVisible(false);
      jTextField5.setVisible(false);
      jTextField22.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_C_line()
   {
      jLabel34.setVisible(false);
      jLabel35.setVisible(false);
      jLabel36.setVisible(false);
      jTextField18.setVisible(false);
      jTextField19.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_E_line()
   {
      jLabel8.setVisible(false);
      jLabel28.setVisible(false);
      jTextField6.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_F_line()
   {
      jLabel9.setVisible(false);
      jLabel27.setVisible(false);
      jTextField7.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_G_line()
   {
      jLabel10.setVisible(false);
      jLabel11.setVisible(false);
      jLabel12.setVisible(false);
      jLabel13.setVisible(false);
      jTextField8.setVisible(false);
      jTextField9.setVisible(false);
      jTextField10.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   //private void disable_I_line()
   //{
   //   jLabel14.setVisible(false);
   //   jLabel15.setVisible(false);
   //   jLabel16.setVisible(false);
   //   jLabel17.setVisible(false);
   //   jLabel18.setVisible(false);
   //   jLabel19.setVisible(false);
   //   jLabel20.setVisible(false);
   //   jLabel21.setVisible(false);
   //   jLabel31.setVisible(false);
   //   jLabel32.setVisible(false);
   //   jLabel33.setVisible(false);
   //
   //   jTextField11.setVisible(false);
   //   jTextField12.setVisible(false);
   //   jTextField13.setVisible(false);
   //   jTextField14.setVisible(false);
   //   jTextField15.setVisible(false);
   //   jTextField16.setVisible(false);
   //}

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_L_line()
   {
      jScrollPane1.setVisible(false);  // jTable1.setVisible(false); WERKT NIET
      jLabel25.setVisible(false);
      jPanel2.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_M_line()
   {
      jLabel22.setVisible(false);
      jTextField17.setVisible(false);
   }

   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void disable_V_line()
   {
      jLabel23.setVisible(false);
      jCheckBox1.setVisible(false);
      jCheckBox2.setVisible(false);
      jCheckBox3.setVisible(false);
      jCheckBox4.setVisible(false);
   }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
            public void run() {
                new myamversailingplan().setVisible(true);
            }
        });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JButton jButton5;
   private javax.swing.JCheckBox jCheckBox1;
   private javax.swing.JCheckBox jCheckBox2;
   private javax.swing.JCheckBox jCheckBox3;
   private javax.swing.JCheckBox jCheckBox4;
   private javax.swing.JCheckBox jCheckBox5;
   private javax.swing.JCheckBox jCheckBox6;
   private javax.swing.JCheckBox jCheckBox7;
   private javax.swing.JCheckBox jCheckBox8;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel18;
   private javax.swing.JLabel jLabel19;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel20;
   private javax.swing.JLabel jLabel21;
   private javax.swing.JLabel jLabel22;
   private javax.swing.JLabel jLabel23;
   private javax.swing.JLabel jLabel24;
   private javax.swing.JLabel jLabel25;
   private javax.swing.JLabel jLabel26;
   private javax.swing.JLabel jLabel27;
   private javax.swing.JLabel jLabel28;
   private javax.swing.JLabel jLabel29;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel30;
   private javax.swing.JLabel jLabel31;
   private javax.swing.JLabel jLabel32;
   private javax.swing.JLabel jLabel33;
   private javax.swing.JLabel jLabel34;
   private javax.swing.JLabel jLabel35;
   private javax.swing.JLabel jLabel36;
   private javax.swing.JLabel jLabel37;
   private javax.swing.JLabel jLabel38;
   private javax.swing.JLabel jLabel39;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel40;
   private javax.swing.JLabel jLabel41;
   private javax.swing.JLabel jLabel42;
   private javax.swing.JLabel jLabel43;
   private javax.swing.JLabel jLabel44;
   private javax.swing.JLabel jLabel45;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTable jTable1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField10;
   private javax.swing.JTextField jTextField11;
   private javax.swing.JTextField jTextField12;
   private javax.swing.JTextField jTextField13;
   private javax.swing.JTextField jTextField14;
   private javax.swing.JTextField jTextField15;
   private javax.swing.JTextField jTextField16;
   private javax.swing.JTextField jTextField17;
   private javax.swing.JTextField jTextField18;
   private javax.swing.JTextField jTextField19;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField20;
   private javax.swing.JTextField jTextField21;
   private javax.swing.JTextField jTextField22;
   private javax.swing.JTextField jTextField23;
   private javax.swing.JTextField jTextField3;
   private javax.swing.JTextField jTextField4;
   private javax.swing.JTextField jTextField5;
   private javax.swing.JTextField jTextField6;
   private javax.swing.JTextField jTextField7;
   private javax.swing.JTextField jTextField8;
   private javax.swing.JTextField jTextField9;
   // End of variables declaration//GEN-END:variables

   // local constants
   private final int MAX_CHAR_AMVER_EMAIL_BODY         = 400;  // in theory 512 = body + subject + address

   // constants
   private static final int AMVER_TRACK_ROWS           = 100; // static !!
   private static final int AMVER_TRACK_COLUMNS        = 9;   // static !!
   private static final String AMVER_EMAIL_ADDRESS     = "amvermsg@amver.org";       //"martin.stam@knmi.nl";
   private static final int SP_IMPORT_FILE_POS_INHOUD  = 21;
   private static final String NONE                    = "NONE";
   private static final String NURSE                   = "NURSE";
   private static final String PA                      = "PA";
   private static final String MD                      = "MD";
   private static final String JASREP                  = "JASREP";
   private static final String AUSREP                  = "AUSREP";
   private static final String CHILREP                 = "CHILREP";
   private static final String MAREP                   = "MAREP";
   //private static final String OFFLINE_AMVER_DIR       = "amver";

// private static final String SHIP_NAME_TXT           = "ship name          : ";   // t/m : is 20 characters
   private static final String AMVER_SP_VESSEL         = "amver_sp_vessel    : ";   // t/m : is 20 characters
   private static final String AMVER_SP_CALL_SIGN      = "amver_sp_call_sign : ";
   private static final String AMVER_SP_IMO_NUMBER     = "amver_sp_imo_number: ";
   private static final String AMVER_SP_DEP_DAY        = "amver_sp_dep_day   : ";
   private static final String AMVER_SP_DEP_HOUR       = "amver_sp_dep_hour  : ";
   private static final String AMVER_SP_DEP_MINUTE     = "amver_sp_dep_minute: ";
   private static final String AMVER_SP_DEP_MONTH      = "amver_sp_dep_month : ";
   private static final String AMVER_SP_CURRENT_COURSE = "amver_sp_course    : ";
   private static final String AMVER_SP_REMAINDER_SPEED= "amver_sp_speed     : ";
   private static final String AMVER_SP_PORT_DEP_NAME  = "amver_sp_dep_port  : ";
   private static final String AMVER_SP_PORT_DEP_LAT   = "amver_sp_dep_lat   : ";
   private static final String AMVER_SP_PORT_DEP_LON   = "amver_sp_dep_lon   : ";
   private static final String AMVER_SP_PORT_DES_NAME  = "amver_sp_des_port  : ";
   private static final String AMVER_SP_PORT_DES_LAT   = "amver_sp_des_lat   : ";
   private static final String AMVER_SP_PORT_DES_LON   = "amver_sp_des_lon   : ";
   private static final String AMVER_SP_TIME_OF_DES_DAY= "amver_sp_des_day   : ";
   private static final String AMVER_SP_TIME_OF_DES_HR = "amver_sp_des_hour  : ";
   private static final String AMVER_SP_TIME_OF_DES_MIN= "amver_sp_des_minute: ";
   private static final String AMVER_SP_TIME_OF_DES_MON= "amver_sp_des_month : ";
   private static final String AMVER_SP_TRACK          = "amver_sp_track     : ";
   private static final String AMVER_SP_RADIO_GUARD    = "amver_sp_radio     : ";
   private static final String AMVER_SP_MEDICAL        = "amver_sp_medical   : ";
   private static final String AMVER_SP_RELAY          = "amver_sp_relay     : ";

   // local var's
   boolean checks_ok                                   = false;
   private String email_body                           = "";
   private String import_file                          = "";
   private String sp_saved_file                        = "";
   private int email_body_lengte;
   private int number_valid_routes;

   // global var's
   public static String amver_sp_vessel                = "";
   public static String amver_sp_call_sign             = "";
   public static String amver_sp_imo_number            = "";
   public static String amver_sp_time_of_dep_day       = "";
   public static String amver_sp_time_of_dep_hour      = "";
   public static String amver_sp_time_of_dep_minute    = "";
   public static String amver_sp_time_of_dep_month     = "";
   public static String amver_dr_current_pos_lat       = "";
   public static String amver_dr_current_pos_lon       = "";
   public static String amver_sp_current_course        = "";
   public static String amver_sp_remainder_speed       = "";
   public static String amver_sp_port_dep_name         = "";
   public static String amver_sp_port_dep_lat          = "";
   public static String amver_sp_port_dep_lon          = "";
   public static String amver_sp_port_des_name         = "";
   public static String amver_sp_port_des_lat          = "";
   public static String amver_sp_port_des_lon          = "";
   public static String amver_sp_time_of_des_day       = "";
   public static String amver_sp_time_of_des_hour      = "";
   public static String amver_sp_time_of_des_minute    = "";
   public static String amver_sp_time_of_des_month     = "";
   public static String[][] amver_track_data           = new String[AMVER_TRACK_ROWS][AMVER_TRACK_COLUMNS];// NB default values: null
   public static String amver_sp_radio_guard           = "";
   public static Boolean[] amver_sp_medical            = new Boolean[4];
   public static Boolean[] amver_sp_relay              = new Boolean[4];
   public static String amver_sp_remarks               = "";
   
   public static final List<String> month_3_letter_array = Arrays.asList("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");
}
