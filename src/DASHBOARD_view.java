
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Martin
 */
public class DASHBOARD_view extends javax.swing.JFrame {

   /* inner class popupListener */
   class PopupListener extends MouseAdapter 
   {
      @Override
      public void mousePressed(MouseEvent e) 
      {
         maybeShowPopup(e);
         //System.out.println("Popup menu will be visible!");
      }

      @Override
      public void mouseReleased(MouseEvent e) 
      {
         maybeShowPopup(e);
      }

      private void maybeShowPopup(MouseEvent e) 
      {
         if (e.isPopupTrigger()) 
         {
            popup.show(e.getComponent(), e.getX(), e.getY());
         }
      }
   }     
   
   
   
   /**
    * Creates new form DASHBOARD_view
    */
   public DASHBOARD_view() {
      initComponents();
      initComponents1();
      init_dasboard_timer();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
    * Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel4 = new javax.swing.JPanel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jPanel3 = new javax.swing.JPanel();
      jPanel2 = new javax.swing.JPanel();
      jPanel5 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      /*
      jPanel1 = new javax.swing.JPanel();
      */jPanel1 = new DASHBOARD_grafiek();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosed(java.awt.event.WindowEvent evt) {
            DASBOARD_view_windowClosed(evt);
         }
      });

      jPanel4.setPreferredSize(new java.awt.Dimension(1000, 100));

      jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      jLabel3.setText("--- all readings indicate pressure at barometer height with ic applied ---");

      jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabel4.setText("--- update every minute ---");

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(99, 99, 99)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(104, 104, 104))
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap(75, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(jLabel4))
            .addContainerGap())
      );

      getContentPane().add(jPanel4, java.awt.BorderLayout.NORTH);

      jPanel3.setPreferredSize(new java.awt.Dimension(100, 600));

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 100, Short.MAX_VALUE)
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 521, Short.MAX_VALUE)
      );

      getContentPane().add(jPanel3, java.awt.BorderLayout.EAST);

      jPanel2.setPreferredSize(new java.awt.Dimension(100, 600));

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 100, Short.MAX_VALUE)
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 521, Short.MAX_VALUE)
      );

      getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

      jPanel5.setPreferredSize(new java.awt.Dimension(1000, 100));

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      jLabel1.setText("--- black indicator arrow indicates the pressure at last update, white set hand indicates the pressure 3 hours earlier ---");

      jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabel2.setText("--- right click for night colors ---");

      javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
      jPanel5.setLayout(jPanel5Layout);
      jPanel5Layout.setHorizontalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(100, 100, 100)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(98, 98, 98))
      );
      jPanel5Layout.setVerticalGroup(
         jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jLabel2))
            .addContainerGap(75, Short.MAX_VALUE))
      );

      getContentPane().add(jPanel5, java.awt.BorderLayout.SOUTH);

      jPanel1.setBackground(new java.awt.Color(255, 250, 240));
      jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));
      jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
         public void componentResized(java.awt.event.ComponentEvent evt) {
            Dashboard_componentResizedHandler(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 1042, Short.MAX_VALUE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 521, Short.MAX_VALUE)
      );

      getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void initComponents1()
   {
      /* background color main panel (set by main menu theme option) */
      if (main.theme_mode.equals(main.THEME_NIMBUS_NIGHT))
      {
         night_vision = true;
         
         background_color_panel1 = jPanel1.getBackground();
         background_color_panel2 = Color.LIGHT_GRAY;
         background_color_panel3 = Color.LIGHT_GRAY;
         background_color_panel4 = Color.LIGHT_GRAY;
         background_color_panel5 = Color.LIGHT_GRAY;
              
         jPanel1.setBackground(Color.DARK_GRAY);
         jPanel2.setBackground(Color.BLACK);
         jPanel3.setBackground(Color.BLACK);
         jPanel4.setBackground(Color.BLACK);
         jPanel5.setBackground(Color.BLACK); 
      }
      else
      {
         night_vision = false;
         
         background_color_panel1 = jPanel1.getBackground();
         background_color_panel2 = jPanel2.getBackground();
         background_color_panel3 = jPanel3.getBackground();
         background_color_panel4 = jPanel4.getBackground();
         background_color_panel5 = jPanel5.getBackground();
      } 
   
      
      /* background color main panel (set by popup menu option) */
      popup = new JPopupMenu();
      
      JMenuItem menuItem = new JMenuItem("night colours");
      menuItem.addActionListener(new java.awt.event.ActionListener() 
      {
         @Override
         public void actionPerformed(ActionEvent e) 
         {
            night_vision = true;
       
            jPanel1.setBackground(Color.DARK_GRAY); 
            jPanel2.setBackground(Color.BLACK);
            jPanel3.setBackground(Color.BLACK);
            jPanel4.setBackground(Color.BLACK);
            jPanel5.setBackground(Color.BLACK); 
         }
      });
      popup.add(menuItem);
      
      JMenuItem menuItem2 = new JMenuItem("day colours");
      menuItem2.addActionListener(new java.awt.event.ActionListener() 
      {
         @Override
         public void actionPerformed(ActionEvent e) 
         {
            night_vision = false;
            
            jPanel1.setBackground(background_color_panel1); 
            jPanel2.setBackground(background_color_panel2);
            jPanel3.setBackground(background_color_panel3);
            jPanel4.setBackground(background_color_panel4);
            jPanel5.setBackground(background_color_panel5); 
         }
      });
      popup.add(menuItem2);   
      
      
      MouseListener popupListener = new PopupListener();
      addMouseListener(popupListener);
      
      
      // title
      setTitle(main.APPLICATION_NAME + " Barometer Dashboard");
      
      // NB see below, otherwise if you select Dashboard -> Barometer for the second, third or xth time it wil first display the situation 
      //    of the moment that the dasboard was closed, and after approx 1 minute it will be updated. 
      //    NOW it will update the dashboard immediately
      main_RS232_RS422.RS232_read_dasboard_values();
      jPanel1.repaint();                                                        // main panel

}
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void DASBOARD_view_windowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_DASBOARD_view_windowClosed
      // TODO add your handling code here:
      
   
      if (dashboard_update_timer_is_gecreeerd == true)  
      {
         if (dashboard_update_timer.isRunning())
         {
            dashboard_update_timer.stop();
         }
      }
      
      dashboard_update_timer = null;
      
      dashboard_update_timer_is_gecreeerd = false;      
   }//GEN-LAST:event_DASBOARD_view_windowClosed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   private void Dashboard_componentResizedHandler(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_Dashboard_componentResizedHandler
      // TODO add your handling code here:
      System.out.println("--- Barometer Dashboard (jPanel1) size = " + DASHBOARD_view.jPanel1.getSize());
      //width_AWS_analog_dashboard = jPanel1.getWidth();
      //height_AWS_analog_dashboard = jPanel1.getHeight();
      
      jPanel1.repaint();  
      
   }//GEN-LAST:event_Dashboard_componentResizedHandler

   
   
/***********************************************************************************************/
/*                                                                                             */
/*                                                                                             */
/*                                                                                             */
/***********************************************************************************************/
private void init_dasboard_timer()
{
   // updating/displaying received sensor data (not from file), timer scheduled
   //
   // called from: DASHBOARD_view() [DASHBOARD_view.java]
   
   ActionListener update_dashboard_action = new ActionListener()
   {
      @Override
      public void actionPerformed(ActionEvent e)
      {
         main_RS232_RS422.RS232_read_dasboard_values();
         jPanel1.repaint();                                                        // main panel

      } // public void actionPerformed(ActionEvent e)
   }; // 

   // zo snel mogelijk geheugen weer vrijmaken
   //cal_systeem_datum_tijd = null;

   // main loop for updating dashboard
   dashboard_update_timer = new Timer(DELAY_UPDATE_SENSOR_LOOP, update_dashboard_action);
   dashboard_update_timer.setRepeats(true);                                   // false = only one action
   dashboard_update_timer.setInitialDelay(INITIAL_DELAY_UPDATE_SENSOR_LOOP);  // time in millisec to wait after timer is started to fire first event
   dashboard_update_timer.setCoalesce(true);                                  // by default true, but to be certain
   dashboard_update_timer.restart();
   dashboard_update_timer_is_gecreeerd = true;
}
  
   
   
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(DASHBOARD_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(DASHBOARD_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(DASHBOARD_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(DASHBOARD_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new DASHBOARD_view().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   public static javax.swing.JLabel jLabel4;
   /*
   private static javax.swing.JPanel jPanel1;
   */private static DASHBOARD_grafiek jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   // End of variables declaration//GEN-END:variables


   
   // martin var's    
   private final int DELAY_UPDATE_SENSOR_LOOP                 = 60000; // 1 min                          // time in millisec to wait after timer is started to fire first event (10 min = 10 * 1000 * 60 * 10 = 600000)
   private final int INITIAL_DELAY_UPDATE_SENSOR_LOOP         = 30000; // 1000 = 1 sec                   // time in millisec to wait after timer is started to fire first event
   public static Timer dashboard_update_timer;
   public static boolean dashboard_update_timer_is_gecreeerd;
   public static boolean night_vision;
   private JPopupMenu popup;
   private static Color background_color_panel1;
   private static Color background_color_panel2;
   private static Color background_color_panel3;
   private static Color background_color_panel4;
   private static Color background_color_panel5;


}
